import util from 'utils/tools';
import {
    cldeviceIsOnstate,
    getProdCatagorys,
    getOperationRecord,
    getNodesCount,
    getProdModels,
    getModelProds,
    setStartFormRules,
    getTodoInfoList,
    getInstallPositionCode,
    startInstall,
    finishInstall,
    validateVinVeh,
    deleteProcess,
    returnProccess,
    nextInstall
} from './service';
import { getVehList } from "@/views/basicManage/ownerVehicleManage/service";
import { getAllColorList, getCarModel } from '@/views/basicManage/ownerVehicleManage/service'
import { getParentInfoList } from '@/views/sysManage/organizationManage/service'
import { getToken } from '@/utils/auth'
import delimitBox from '@/components/delimitBox'

export default {
    props: ['windowOutHeight', 'isEmployee'],
    components: {
        delimitBox
    },
    data () {
        return {
            util: util,
            Dayjs: dayjs,
            token: getToken(),
            //搜索 筛选信息
            filters: {
                domSearch: [{
                    select: ['orderno'],
                    content: ''
                }], //查询框
                timeScope: '',
                prodnum:'',
            },
            // 完成安装弹窗
            finishInstallDialogVisible: false,
            rowFinishData: [],//存储当前行的数据
            packList: [],//储存当前行的套餐信息数据
            installStep: '1',//第一步第二步，步骤状态
            isdisabled: false,//禁用
            startForm: {//第一步
                // 默认
                vin: '',
                licenseplatenum: '',
                vehiclePic: '',
                // 带出其他信息
                ownername: '',
                mobile: '',
                idcard: '',
                model: '',
                price: '',
                vehiclecategory: '',
                vehicletype: '',
                vehicletypename: '',
                enginenum: '',
                color: '',
                colorname: '',
                vehiclepower: '',
                firstregisterdate: '',
                indemnitylimit: '',
                priceInsucorp: '',
                beneficiary: '',
                addresshome: '',
            },
            startFormRules: setStartFormRules,
            isSameVin: true,//判断车架号是否一致
            isExistVin: true,//判断车架号是否存在系统
            vehlist: [],//车辆类型
            prods: [],//设备组
            parts: [],//配件组prodIndex:0,//下标
            partsTitle: '',//配件的标题
            picIndex: 0,//图片的index
            checkedParts: [],//多选的配件组
            checkAll: false,
            isIndeterminate: false,
            modellist: [],//完成安装-选择设备型号
            modelloading: false,
            signalInfo: {},//信号检测
            vehiclecategoryList: {//车辆分类列表
                1: '新车',
                2: '二手车',
                3: '资管追回'
            },
            vehiclepowerList: {//能源类型1=汽油，2=柴油，3=纯电，4=混动
                1: '汽油',
                2: '柴油',
                3: '纯电',
                4: '混动'
            },
            InstallPositionArray: [],//设备安装位置
            codeloading: false,
            show: [],//设备显示
            endForm: {//第二步
                // 配件
                parts: [],// accessorymodelid配件型号id ,accessoryqty配件数量
                // 设备
                prods: [],
                impremark: '',//施工备注
            },
            endFormRules: {
                installpositioncode: [{required: true, message: "请选择设备安装位置", trigger: 'change'}],
                piclink: [{required: true, message: "请上传设备安装图片", trigger: 'blur'}],
            },
            prodData: [],//设备选择列表
            prodLoading: false,
            todo: [],//列表数据
            total: 0,
            pageSize: 15,
            currentPage: 1,
            listLoading: false,
            dtotal: 0,
            dpageSize: 15,
            dcurrentPage: 1,
            nodesList: [],//节点数量
            stepState: 0,//当前tab页状态
            //新装数量
            fromNum: {
                num0: 0, num1: 0, num2: 0,
                num3: 0, num4: 0, num5: 0
            },
            curStateData: {id0: 0, id1: 0, id2: 0, id3: 0, id4: 0, id5: 0},//当前新装节点状态值
            flowNodeId: 'all',//状态值传参
            delorder: {//废单、退单
                orderReasonDialogVisible: false,
                reson: '',
                delOrderLoading: false,
                title: '',
                taskid: '',
                processInstanceId: 0
            },
            expandLoading: false,//表格详情
            opHistoryData: [],//操作记录
            activeName: '1',
            isExpandeds: true,
            accept: "jpg,png,jpeg",
            isOvertime: false,//是否超时
            active: false, //滑动框状态
        }
    },
    watch: {
        $route (newValue, oldValue) {
            if(newValue.path === '/orderManage/declarationManage') {
                this.active = false
            }
        }
    },
    methods: {
        // -------------------------------------------------------------------施工节点---------------------------------------------------------------------------------
        // 车辆图片上传成功
        uploadSuccessInvoice (res, file) {
            this.startForm.vehiclePic = res.data;
        },
        // 点击上传-存储上传图片的index
        uploadPicIndex (index) {
            this.picIndex = index;
        },
        // 施工安装图片上传成功
        successInvoiceOne (res, file) {
            this.endForm.prods[this.picIndex].busiPictures[0].piclink = res.data;
        },
        successInvoiceTwo (res, file) {
            this.endForm.prods[this.picIndex].busiPictures[1].piclink = res.data;
        },
        // 开始安装—确认消息
        startInstall (row) {
            this.$confirm('确定当前订单开始安装？', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
            }).then(() => {
                startInstall({id: row.id}).then((res) => {
                    this.$message.success('开始安装成功，订单状态变更为施工中！');
                    this.getTodo()
                })
            }).catch(() => {
            });
        },
        // 完成安装操作按钮—点击
        finishInstall (row) {
            this.packList = [];
            this.intStartForm('');
            this.finishInstallDialogVisible = true;
            this.rowFinishData = row;
            for (var i in row) {
                if (i == "cmsPackageInfo") {
                    this.packList.push(row[i]);
                }
            }
        },
        // 校验车架号
        checkVin (val) {
            if (val.length == 17) {//车架号数量正确时
                var para = {
                    vin: val,
                    declarationid: this.rowFinishData.id
                }
                validateVinVeh(para).then((res) => {
                    if (res.data.data.localVehicle == res.data.data.vin) {//输入的车架号与派单一致
                        this.isSameVin = true;
                        this.startForm = res.data.data;
                    } else {//车架号与派单不一致，且存在时
                        this.isSameVin = false;
                        this.isExistVin = true;
                        this.isdisabled = true;
                        this.startForm = res.data.data;
                        this.startForm.vehiclecategory == 1 ? this.startForm.vehiclecategory = '新车' : this.startForm.vehiclecategory == 2 ? this.startForm.vehiclecategory = '二手车'
                            : this.startForm.vehiclecategory = '资管追回';
                    }
                    this.startForm.vin = val;
                }).catch((err) => {
                    // 系统不存在-新增
                    this.$message.error('系统不存在当前车架号，请完善相关车主车辆信息！');
                    this.intStartForm(val);//初始化
                    this.isSameVin = false;
                    this.isExistVin = false;
                    this.isdisabled = false;
                });
            } else if (val.length == 0) {
                this.intStartForm('');
            }
        },
        // 变更车主车辆信息
        changeOwnerVeh (val) {
            if (val) {          //勾选变更
                this.isdisabled = false;
            } else {              //取消变更
                this.isdisabled = true;
            }
        },
        // 开始安装下一步
        nextStep (row) {
            let para = {
                declarationid: row.id,//报单id
                vin: this.startForm.vin,
                licenseplatenum: this.startForm.licenseplatenum,
                vehiclePic: this.startForm.vehiclePic,
                ownername: this.startForm.ownername,
                mobile: this.startForm.mobile,
                idcard: this.startForm.idcard,
                model: this.startForm.model,
                price:this.startForm.price,
                vehiclecategory: this.startForm.vehiclecategory,
                vehiclecategoryname: this.startForm.vehiclecategoryname,
                vehicletype: this.startForm.vehicletype,
                enginenum:this.startForm.enginenum,
                color:this.startForm.color,
                colorname: this.startForm.colorname,
                vehiclepower: this.startForm.vehiclepower,
                firstregisterdate: this.startForm.firstregisterdate,
                indemnitylimit:this.startForm.indemnitylimit,
                priceInsucorp: this.startForm.priceInsucorp,
                beneficiary:this.startForm.beneficiary,
                addresshome: this.startForm.addresshome,
            }
            if (this.startForm.vin == '') {
                this.$message.error('请填写完整的车架号信息！');
                return;
            }
            if (this.isdisabled) {//禁用状态，跳过表单验证
                nextInstall(para).then((res) => {
                    this.installStep = '2';
                    this.getModelspec(row.id);//获取当前订单的设备类别
                    this.intEndForm();
                })
            } else {//否则，需要表单验证
                this.$refs.startForm.validate(async valid => {
                    if (valid) {
                        nextInstall(para).then((res) => {
                            this.installStep = '2';
                            this.getModelspec(row.id);//获取当前订单的设备类别
                            this.intEndForm();
                        })
                    }
                })
            }
        },
        // 完成安装上一步
        previousStep () {
            this.installStep = '1';
        },
        // 开始安装-取消按钮
        cancelInstall () {
            this.finishInstallDialogVisible = false;
            this.intStartForm('');
            this.intEndForm();
        },
        // 完成安装-关闭弹窗
        closeFinish () {
            this.installStep = '1';
            this.show = [];
        },
        // 开始
        startConfirm () {
            this.startInstallDialogVisible = false;
            this.finishInstallDialogVisible = true;
        },
        // 全选配件
        handleCheckAllChange (val) {
            this.endForm.parts = [];//初始化
            this.checkedParts = val ? this.parts : [];
            this.isIndeterminate = false;
            this.checkedParts.forEach((item, index) => {
                this.endForm.parts.push({accessorymodelid: item.cmsProduct.id, accessoryqty: item.prodqty});
            });
        },
        // 勾选配件
        handleCheckedPartsChange (value) {
            this.endForm.parts = [];//初始化
            let checkedCount = value.length;
            this.checkAll = checkedCount === this.parts.length;
            this.isIndeterminate = checkedCount > 0 && checkedCount < this.parts.length;
            value.forEach((item, index) => {
                if (index == value.length - 1) {
                    this.endForm.parts.push(
                        {accessorymodelid: item.cmsProduct.id, accessoryqty: item.prodqty});
                }
            });
        },
        // 双击选择设备
        deviceClickHandle (val) {
            this.$refs.popover[this.prodIndex].showPopper = false;
            this.$set(this.show, this.prodIndex, true);//触发视图更新,参数（当前数组，下标，值）
            this.endForm.prods[this.prodIndex].modelname = val.modelname;
            this.endForm.prods[this.prodIndex].prodnum = val.prodnum;
            this.endForm.prods[this.prodIndex].simnum = val.simnum;
            this.endForm.prods[this.prodIndex].simmodelname = val.simmodelname;
            this.endForm.prods[this.prodIndex].packid = val.packid;
            this.endForm.prods[this.prodIndex].prodmodelid = this.prods[this.prodIndex].prodmodelid;
            this.$set(this.endForm.prods, this.prodIndex, this.endForm.prods[this.prodIndex])
        },
        // 判断设备重复
        isRepeat(arr){
            var hash = {};
            for(var i in arr) {
                 if(hash[arr[i].prodnum])
                      return true;
                 hash[arr[i].prodnum] = true;
            }
            return false;
        },
        // 完成安装
        confirmFinishInstall () {
            // 获取库房数组
            let storages = this.$store.getters.userInfo.employeeinfo.storages.map((item, index) => {
                return item.id;
            })
            //vehiclecategory是汉字
            if (/^[\u3220-\uFA29]+$/.test(this.startForm.vehiclecategory)) {
                this.startForm.vehiclecategory == '新车' ? this.startForm.vehiclecategory = 1 : this.startForm.vehiclecategory == '二手车' ? this.startForm.vehiclecategory = 2
                    : this.startForm.vehiclecategory = 3;
            }
            this.$refs.endForm.validate(async valid => {
                if (valid) {
                    //填写完整设备信息
                    if (this.prods.length != 0) {//当前订单产品套餐有设备时
                        if (this.endForm.prods.length != this.prods.length) {
                            this.$message.error('请完善安装设备信息后提交！');
                            return;
                        }
                    }
                    //填写完整配件信息
                    if (this.parts.length != 0) {//当前订单产品套餐有配件时
                        if (this.endForm.parts.length == 0) {
                            this.$message.error('请选择安装配件信息后提交！');
                            return;
                        }
                    }
                    // 同一设备不允许重复添加
                    if (this.isRepeat(this.endForm.prods)) {
                        this.$message.error('设备重复！请重新选择！');
                        return;
                    }
                    let para = {
                        id: this.rowFinishData.id,//报单id
                        taskid: this.rowFinishData.taskid,
                        packageid: this.rowFinishData.cmsPackageInfo.id,//套餐id
                        corpid: this.rowFinishData.corpid,
                        busiImpdetails: this.endForm.parts.concat(this.endForm.prods),
                        busiVehicleinfo: this.startForm,
                        impremark: this.endForm.impremark,
                        storageids: storages
                    }
                    finishInstall(para).then((res) => {
                        this.$message.success('您已完成安装！');
                        this.finishInstallDialogVisible = false;
                        this.getTodo();
                    })
                }
            })
        },


        //---------------------------------------------------------------------------废除订单   退回订单-----------------------------------------------------------------
        deleteOrder (index, row) {
            this.delorder.processInstanceId = row.id;
            this.delorder.title = '废除订单';
            this.delorder.taskid = row.taskid
            this.delorder.orderReasonDialogVisible = true;
            this.delorder.reson = '';
        },
        passConstructionOrder (index, row) {
            this.delorder.processInstanceId = row.id;
            this.delorder.title = '退回订单';
            this.delorder.taskid = row.taskid
            this.delorder.orderReasonDialogVisible = true;
            this.delorder.reson = '';
        },
        // 确认废单/退单
        comfirDelOrder (title) {
            this.$refs.delorder.validate(async valid => {
                if (valid) {
                    if (title == '废除订单') {
                        let para = {
                            id: this.delorder.processInstanceId,
                            cancelremark: this.delorder.reson,
                            taskid: this.delorder.taskid
                        }
                        this.delorder.delOrderLoading = true;
                        deleteProcess(para).then((res) => {
                            this.delorder.delOrderLoading = false;
                            this.delorder.orderReasonDialogVisible = false;
                            this.$message.success('废除成功！')
                            this.getNodes();
                        });
                    } else if (title == '退回订单') {
                        let para = {
                            id: this.delorder.processInstanceId,
                            returnremark: this.delorder.reson,
                            taskid: this.delorder.taskid
                        }
                        this.delorder.delOrderLoading = true;
                        returnProccess(para).then((res) => {
                            this.delorder.delOrderLoading = false;
                            this.delorder.orderReasonDialogVisible = false;
                            this.$message.success('退回成功！')
                            this.getNodes();
                        });
                    }
                }

            })
        },


        //-----------------------------------------------------------------------列表数据展开查看详情---------------------------------------------------------
        expandHandle (row, expandeds) {
            if (!this.isExpandeds) {
                this.isExpandeds = true;
                return;
            }
            if (expandeds.length != 0) {//有数据时
                this.getOperation(row);
            }
            ;
            if (expandeds.length > 1) {
                this.isExpandeds = false;
                this.$refs.todeTable.toggleRowExpansion(expandeds[0], false);
            }
            ;
        },
        // 操作记录
        getOperation (row) {
            let para = {
                orderid: row.id
            }
            this.expandLoading = true;
            getOperationRecord(para).then((res) => {
                this.expandLoading = false;
                this.opHistoryData = res.data.data;
            }).catch((err) => {
                this.expandLoading = false;
            });
        },


        // ---------------------------------------------操作-----------------------------------
        // 派单
        dispatchOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/orderProcess',
                    query: {id: row.id, taskid: row.taskid, flow: '1'}
                }
            )
        },
        // 转派
        transferOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/orderProcess',
                    query: {id: row.id, taskid: row.taskid, flow: '2'}
                }
            )
        },
        // 出单
        issueOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/issuingPolicy',
                    query: {id: row.id, taskid: row.taskid}
                }
            )
        },
        // 施工—双击编辑
        editOrder (row) {
            if (this.stepState == '3') {
                this.active = true;
                this.$router.push(
                    { path: '/orderManage/declarationManage/orderEdit',
                    query: { id: row.id, taskid: row.taskid, isEdit: true }}
                )
            }
        },
        // 详情
        detailsOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/orderCompletion',
                    query: {id: row.id}
                }
            )
        },


        // -----------------------------------------------列表----------------------------------------
        //改变新装状态获取对应数据列表
        changeStateHandle (v) {
            if (v == 0) this.flowNodeId = 'all'; //全部
            if (v == 1) this.flowNodeId = this.curStateData.id1;//派单
            if (v == 2) this.flowNodeId = this.curStateData.id2;//接单
            if (v == 3) this.flowNodeId = this.curStateData.id3;//施工
            if (v == 4) this.flowNodeId = this.curStateData.id4;//保险出单
            if (v == 5) this.flowNodeId = this.curStateData.id5;//订单完成

            this.getTodo();
        },
        // 获取节点数量
        getNodes () {
            this.listLoading = true;
            getNodesCount().then((res) => {
                this.nodesList = res.data.data;
                this.nodesList.forEach((item, index) => {
                    if (item.name == '全部') {
                        this.fromNum.num0 = item.num;
                    }
                    if (item.name == '派单') {
                        this.fromNum.num1 = item.num;
                        this.curStateData.id1 = item.id;
                    }
                    if (item.name == '接单') {
                        this.fromNum.num2 = item.num;
                        this.curStateData.id2 = item.id;
                    }
                    if (item.name == '施工') {
                        this.fromNum.num3 = item.num;
                        this.curStateData.id3 = item.id;
                    }
                    if (item.name == '保险出单') {
                        this.fromNum.num4 = item.num;
                        this.curStateData.id4 = item.id;
                    }
                    if (item.name == '订单完成') {
                        this.fromNum.num5 = item.num;
                        this.curStateData.id5 = item.id;
                    }
                });
                this.getTodo();
            });
        },
        //获取列表
        getTodo () {
            this.listLoading = true;
            let para = {
                page: this.currentPage,
                limit: this.pageSize,
                type: 'new',
                domSearch: this.filters.domSearch,
                startTime: this.filters.timeScope ? (this.filters.timeScope[0] ? util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd') : '') : '',
                endTime: this.filters.timeScope ? (this.filters.timeScope[1] ? util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd') : '') : '',
                flowNodeId: this.flowNodeId
            };
            para = Object.assign(para);
            getTodoInfoList(para).then((res) => {
                this.listLoading = false;
                this.total = res.data.data.total;
                this.todo = res.data.data.records;
                if (this.todo == null) this.todo = [];
            }).catch((error) => {
                this.listLoading = false;
            });
        },
        //切换当前页
        handleCurrentChange (val) {
            this.currentPage = val;
            this.getTodo();
        },
        //切换每页显示数量
        handleSizeChange (val) {
            this.pageSize = val;
            this.getTodo();
        },

        //清空查询表单
        resetForm (formName) {
            this.$refs[formName].resetFields();
        },

        // 添加查询条件
        addSelect () {
            this.filters.domSearch.push({
                select: [],
                content: ''
            });
        },
        // 移除查询条件
        removeSelect (index) {
            this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
        },
        //格式化后台传来的时间戳
        dateFormatter (row, col) {
            return row.declaredate ? util.formatDate.format(new Date(row.declaredate), 'yyyy-MM-dd hh:mm') : '--';
        },
        //格式化后台传来的时间戳
        dateFormatter2 (row, col) {
            return row.startDate ? util.formatDate.format(new Date(row.startDate), 'yyyy-MM-dd hh:mm') : '--';
        },
        //格式化后台传来的时间戳
        dateFormatter3 (row, col) {
            return row.endDate ? util.formatDate.format(new Date(row.endDate), 'yyyy-MM-dd hh:mm') : '--';
        },
        // ----------------------------------------------下拉框------------------------------
        /**
         * 获取车辆颜色
         * @param queryString
         * @param cb
         */
        handleColorChange (queryString, cb) {
            let para = {
                model: this.startForm.model,
                color: queryString,
                limit: 100
            }, colorArray = [];
            getAllColorList(para).then((res) => {
                if (res.data.data.records) {
                    res.data.data.records.forEach(function (item, index) {
                        if (item && item.color) {
                            colorArray.push({
                                value: item.color,
                                color_rgb: item.color_rgb,
                            });
                        }
                    });
                    cb(colorArray);
                }
            });
        },
        /**
         * 选择车辆颜色
         * @param v
         */
        changeCarColor (v) {
            if (typeof v != "object") return;
            this.startForm.colorname = v.value; //存colorname汉字
            this.startForm.color = v.color_rgb; //存color码
        },
        //选择车型查询颜色
        handleSelectColor (v) {
            this.startForm.model = v.value;
            this.startForm.color = '';
            this.startForm.colorname = '';
        },
        //车型选择
        handleItemChange (queryString, cb) {
            let para = {
                    model: queryString,
                    viewName: "VW_VAS_WEB_VAS_VEHICLE_MODEL",
                    limit: 30,
                },
                ownerArray = [];
            getCarModel(para).then((res) => {
                if (res.data.data != null) {
                    res.data.data.records.forEach(function (item, index) {
                        ownerArray.push({
                            value: item.model,
                            brand: item.brand,
                            serious: item.serious
                        });
                    });
                    cb(ownerArray);
                }
            });
        },
        // 获取车辆类型
        vehChange (r) {
            const params = {
                page: 1,
                limit: 10000,
                isactive: 1
            }
            getVehList(params).then((res) => {
                this.vehlist = res.data.data;
            });
        },
        // 获取设备型号
        modelChange (item) {
            this.filters.prodnum = '';
            this.modellist = [];
            this.modelloading = true;
            const params = {
                page: 1,
                limit: 10000,
                impby:this.rowFinishData.impby,
                modelspec: item.cmsProduct.prodcategory == 'P_WIRE' ? 'P1' :
                    item.cmsProduct.prodcategory == 'P_WIRELESS' ? 'P2' : ''
            }
            getProdModels(params).then((res) => {
                this.modelloading = false;
                this.modellist = res.data.data;
                if (this.modellist.length == 0) this.$message.error('当前账号下暂无设备信息！')
            });
        },
        // 获取设备列表
        getProds (index) {
            this.prodIndex = index;
            if (!this.endForm.prods[this.prodIndex]) {
                this.endForm.prods[this.prodIndex] = {
                    installpositioncode: '',
                    prodmodelid: '',
                    packid: '',
                    busiPictures: [{piccode: 19, piclink: '',}, {piccode: 20, piclink: '',}],
                }
            }
            this.prodLoading = true;
            const params = {
                page: this.dcurrentPage,
                limit: this.dpageSize,
                prodnum: this.filters.prodnum,
                impby:this.rowFinishData.impby,
                modelid: this.prods[index].prodmodelid
            }
            getModelProds(params).then((res) => {
                this.prodLoading = false;
                this.prodData = res.data.data.records;
                this.dtotal = res.data.data.total;
            });
        },
        //设备切换当前页
        dhandleCurrentChange (val) {
            this.dcurrentPage = val;
            this.getProds();
        },
        //设备切换每页显示数量
        dhandleSizeChange (val) {
            this.dpageSize = val;
            this.getProds();
        },
        /**
         * 获取第一受益人
         * @param parm
         */
        async getCorpList (parm, cb) {
            let param = {
                page: 1,
                limit: 10000,
                corpcategory: 'BANK',
                corpname: parm
            }
            try {
                const {data} = await getParentInfoList(param)
                cb(data.data.records)
            } catch (e) {
            }
        },
        //安装位置初始化
        changeInstallDecode (r) {
            if (!r || this.InstallPositionArray.length > 0) return;
            this.codeloading = true;
            getInstallPositionCode().then((res) => {
                this.InstallPositionArray = res.data.data;
                this.codeloading = false;
            });
        },
        // 完成安装-获取设备类别
        getModelspec (dataId) {
            this.parts = [], this.prods = [];//初始化
            getProdCatagorys({declarationid: dataId}).then((res) => {
                res.data.data.forEach((item, index) => {
                    if (item.cmsProduct.prodcategory == 'P_ACCESSORY') {//配件
                        this.parts.push(item);
                        this.partsTitle = item.cmsProduct.prodcategory;
                    } else {  //有线和无线
                        if (item.prodqty > 1) {
                            for (let i = 0; i < item.prodqty; i++) {
                                this.prods.push(Object.assign({}, item))
                            }
                        } else {
                            this.prods.push(item)
                        }
                    }
                })
                if (this.parts.length == 0) {//没有配件数据时
                    this.partsTitle = '';
                }
            })
        },
        // 选择车辆分类
        chooseCategory (val) {
            this.startForm.vehiclecategory = val;
        },
        // 设备状态
        async getSignalInfo (productNum) {
            try {
                this.signalInfo = {
                    curonlinestatus: '',//设备实时状态
                    locationmode: '',//定位方式
                    gps_satellite_count: '',//卫星或基站数量
                    signalqulity: '',//卫星或基站信号强度
                    curaddress: '',//定位地址
                    onlineStatus: ''//上线质量
                }
                const params = {
                    id: productNum
                }
                const {data} = await cldeviceIsOnstate(params)
                const realdata = data.data.realdata
                let curonlinestatus = ''
                let signalqulity = ''
                let onlineStatus = ''
                switch (realdata.istate) {
                    case 0:
                        curonlinestatus = "行驶";
                        break;
                    case 1:
                        curonlinestatus = "离线";
                        break;
                    case 2:
                        curonlinestatus = "停车";
                        break;
                    case 3:
                        curonlinestatus = "报警";
                        break;
                    case 4:
                        curonlinestatus = "无效定位";
                        break;
                    case 5:
                        curonlinestatus = "未定位";
                        break;
                }
                switch (realdata.signalqulity) {
                    case 0:
                        signalqulity = "未知";
                        onlineStatus = '差'
                        break;
                    case 1:
                        signalqulity = "无信号";
                        onlineStatus = '差'
                        break;
                    case 2:
                        signalqulity = "信号较弱";
                        onlineStatus = '差'
                        break;
                    case 3:
                        signalqulity = "信号良好/中";
                        onlineStatus = '中'
                        break;
                    case 4:
                        signalqulity = "信号强";
                        onlineStatus = '优'
                        break;
                }
                this.signalInfo.curonlinestatus = curonlinestatus
                this.signalInfo.onlineStatus = onlineStatus
                this.signalInfo.locationmode = realdata.locationmode
                this.signalInfo.gps_satellite_count = realdata.gps_satellite_count
                this.signalInfo.signalqulity = signalqulity
                const geocoder = new AMap.Geocoder({
                    radius: 1000 //范围，默认：500
                });
                geocoder.getAddress([realdata.lng, realdata.lat], (status, result) => {
                    if (status === 'complete' && result.info === 'OK') {
                        //获得了有效的地址信息:
                        this.signalInfo.curaddress = result.regeocode.formattedAddress
                    } else {
                        //获取地址失败
                    }
                });
            } catch (e) {
                console.log(e)
            }
        },

        // 初始化安装信息
        intStartForm (vinVal) {
            this.show = [];
            this.isSameVin = true;
            this.isExistVin = true;
            this.isdisabled = false;
            this.checkAll = false;
            this.filters.prodnum = '';
            this.startForm = {
                vin: vinVal,
                licenseplatenum: '',
                vehiclePic: '',
                ownername: '',
                mobile: '',
                idcard: '',
                model: '',
                price: '',
                vehiclecategory: '',
                vehiclecategoryname: '',
                vehicletype: '',
                enginenum: '',
                color: '',
                colorname: '',
                vehiclepower: '',
                firstregisterdate: '',
                indemnitylimit: '',
                priceInsucorp: '',
                beneficiary: '',
                addresshome: '',
            }
        },
        intEndForm(){
            this.endForm = {//第二步
                // 配件
                parts: [],
                // 设备
                prods: [
                    {
                        installpositioncode: '',
                        prodmodelid: '',
                        packid: '',
                        busiPictures: [//设备安装图片
                            {
                                piccode: 19,
                                piclink: '',//安装位置照
                                picdesc: '安装位置照'
                            }, {
                                piccode: 20,
                                piclink: '',//名牌照+设备
                                picdesc: '铭牌+设备照'
                            }
                        ],
                    }
                ],
                impremark: '',//施工备注
            }
        },
        close() {
            this.$router.push('/orderManage/declarationManage')
        },
        exportExcel() {
            let para = {
                type: 'new',
                domSearch: this.filters.domSearch,
                startTime: this.filters.timeScope ? (this.filters.timeScope[0] ? util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd') : '') : '',
                endTime: this.filters.timeScope ? (this.filters.timeScope[1] ? util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd') : '') : '',
                flowNodeId: this.flowNodeId
            };
            para = Object.assign(para);
            getTodoInfoList(para).then((res) => {
                let todo = res.data.data.records;
                if (todo == null) todo = [];
                this.$emit('exportExcel', todo)
            }).catch((error) => {});
        }
    },
    //初始化数据
    created () {
        this.getNodes();
    },
}