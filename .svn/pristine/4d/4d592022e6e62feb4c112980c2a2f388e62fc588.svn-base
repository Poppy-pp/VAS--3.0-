import util from 'utils/tools';
// import nanobar from 'common/js/nanobar';
import {
    getEmployeeInfoList,
    addEmployeeInfo,
    modifyEmployeeInfo,
    removeEmployeeInfo,
    getEmpType,
    getDeptList,
    getCorporateInfoList,
    getGroupInfoList,
    getSortList,
    getSelectList,
    getPositionList,
    getDepartmentInfoList,
    getUserRole,
    getSysRoleInfoList,
    editUserRole,
    modifyEmployeeInfoStatus,
    getCheckout,
    getNamebyUserid
} from './service.js';

export default {
    name: 'EmployeeInfo',
    props: ['windowOutHeight'],
    data () {
        // 验证手机
        var checkMobile = (rule, value, callback) => {
            var reg = /^1\d{10}$/g,
                flag = reg.test(value);
            if (!flag) {
                return callback(new Error('请输入11位的手机号码'));
            } else {
                callback();
            }
        };
        //验证中文名字(只能输入中文不能大于四个子)
        var checkName = (rule, value, callback) => {
            var reg = /^[a-zA-Z\u4e00-\u9fa5]{1,10}$/g,
                flag = reg.test(value);
            if (!flag) {
                return callback(new Error('只能输入10个以内的汉字和字母'));
            } else {
                callback();
            }
        }
        return {
            fmtdata: util,
            filters: {
                isenable: '1',
                domSearch: [{
                    select: ['employeename'],
                    content: ''
                }] //查询框
            },
            radio: '1',
            editRoleInfoVisible: false,
            isIndeterminate: true,
            prOptions: util.initProvince(),
            listData: [],
            emptype: [], //员工类型列表
            poslist: [], //员工职位列表
            posLoading: false,
            deptlist: [], //员工所属部门列表
            deptLoading: false,
            corplist: [], //所属公司
            corpLoading: false, //
            grouplist: [], //所属分组
            createname: "",
            updatename: "",
            otherinfoData: [], //详情数据
            formDialogTableVisible: false, //是否显示订单详情弹出
            etLoading: false,
            ptLoading: false,
            total: 0,
            checkoutDataT: true, //数据验证返回的布尔值true
            checkoutDataF: [], //数据验证组
            thisInput: '', //编辑时存入row验证的值
            currentPage: 1,
            pageSize: 15,
            listLoading: false,
            curUserId: '',
            cities: [],
            checkAll: true,
            nodeLoading: false,
            groupLoading: false, //
            imageUrl: '', //头像
            accept: '.jpg,.png,.jpeg',
            // headers:{token:JSON.parse(localStorage.getItem('user')).token},
            sels: [], //列表选中列
            editFormVisible: false, //编辑界面是否显示
            editLoading: false,
            editFormRules: { //表单验证
                employeename: [{
                    required: true,
                    message: "请输入员工姓名",
                    trigger: 'blur'
                },
                    {
                        validator: checkName,
                        trigger: 'blur'
                    }
                ],
                mobile: [{
                    required: true,
                    message: "请输入员工手机号码",
                    trigger: 'blur'
                },
                    {
                        validator: checkMobile,
                        trigger: 'blur'
                    }
                ],
                employeetypename: [{
                    required: true,
                    message: "请选择员工类型",
                    trigger: 'blur'
                }]
            },
            //编辑界面数据
            editForm: {
                id: '',
                headiconpath: '',
                employeetypename: '',
                employeecode: '',
                employeename: '',
                username: '',
                positionname: '',
                mobile: '',
                isenable: 1,
                positionid: '',
                groupid: '',
                groupname: '',
                deptid: '',
                deptname: '',
                gender: '',
                region: '',
                address: '',
                wechatid: '',
                qq: '',
                regionAll: '',
            },
            editFormId: {
                employeetype: '',
                positionid: '',
                userid: '',
                corpid: '',
                corpname: '',
                groupid: '',
                groupname: '',
                positionname: '',
                deptname: '',
                deptid: '',
            },
            //新增界面数据
            addForm: {
                headiconpath: '',
                employeetypename: '',
                employeecode: '',
                employeename: '',
                username: '',
                positionname: '',
                deptname: '',
                groupname: '',
                corpname: '',
                mobile: '',
                stogisneed: '',
                isenable: 1,
                positionid: '',
                deptid: '',
                groupid: '',
                corpid: '',
                gender: 'M',
                region: '',
                address: '',
                wechatid: '',
                qq: '',
                regionAll: '',
            },
            checkedCities: [],
            addFormVisible: false, //新增界面是否显示
            addLoading: false,
            addFormRules: {
                employeename: [{
                    required: true,
                    message: "请输入员工姓名",
                    trigger: 'blur'
                },
                    {
                        validator: checkName,
                        trigger: 'blur'
                    }
                ],
                mobile: [{
                    required: true,
                    message: "请输入员工手机号码",
                    trigger: 'blur'
                },
                    {
                        validator: checkMobile,
                        trigger: 'blur'
                    }
                ],
                regionAll: [{
                    required: true,
                    message: "请选择所属区域",
                    trigger: 'blur'
                }], //区域验证
                employeetypename: [{
                    required: true,
                    message: "请选择员工类型",
                    trigger: 'blur'
                }]
            },

        };

    },
    methods: {
        //新增时数据监测
        checkout (p, v, index) {
            if (v == "") return;
            if (this.thisInput == v) return; //编辑时 没改输入框值
            this.checkoutDataT = true; //初始化
            let paras = {
                para: p,
                value: v,
            }
            getCheckout(paras).then((res) => {
                let errorInput = res.data.data.param; //保存验证失败的字段
                if (!res.data.data.result) {
                    this.$message({
                        message: '信息输入重复！',
                        type: 'warning'
                    });
                    this.$refs[errorInput].$el.className = "el-form-item is-error"; //输入框标红
                    this.checkoutDataF[index] = false
                } else {
                    this.$refs[errorInput].$el.className = "el-form-item"; //输入框恢复
                    this.checkoutDataF[index] = true
                }
            });
        },
        // 员工入职跳转
        empIn () {
            this.$router.push('/employeeInduction');
        },
        // 员工离职跳转
        empLeave () {
            this.$router.push('/employeeLeave');
        },
        //查询清空
        clearAll () {
            this.filters.domSearch = [{
                select: [],
                content: ''
            }] //清空查询框;
        },
        // 角色编辑
        roleEditClose () {
            this.checkedCities = [];
        },
        handleCheckAllChange (event) {
            let arry = [];
            this.cities.forEach(function (obj) {
                arry.push(obj.id);
            });
            this.checkedCities = event ? arry : [];
            this.isIndeterminate = false;
        },
        handleCheckedCitiesChange (value) {
            let checkedCount = value.length;
            this.checkAll = checkedCount === this.cities.length;
            this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;
        },
        //角色编辑
        roleEdit: function (index, row) {
            this.editRoleInfoVisible = true;
            this.curUserId = row.userid;

            //初始化角色
            let paraOne = {isenable: "1"}
            getSysRoleInfoList(paraOne).then((res) => {
                this.cities = res.data.data.records;
                let para = {
                    userid: this.curUserId,
                };
                getUserRole(para).then((res) => {
                    let carry = [];
                    res.data.data.records.forEach(function (obj) {
                        carry.push(obj.roleid);
                    });
                    this.checkedCities = carry;
                });
            });
        },
        handleNodeClick () {
            this.nodeLoading = true;
            let checkedNode = this.checkedCities,
                para = {
                    userid: this.curUserId,
                    data: []
                },
                _this = this;
            checkedNode.forEach(function (val) {
                var obj = {};
                obj.userid = _this.curUserId;
                obj.roleid = val;
                para.data.push(obj);
            });
            editUserRole(para).then((res) => {
                var data = res.data.data;
                this.$message({
                    message: '编辑角色权限成功！',
                    type: 'success'
                });
                this.nodeLoading = false;
                this.editRoleInfoVisible = false;
            });
        },
        // 排序
        sortChange (col, prop, order) {
            let para = {
                prop: col.prop,
                order: col.order.substring(0, col.order.length - 6),
            }
            getSortList(para).then((res) => {
            });
        },
        //详情查看
        formDetailHandle (empid) {
            this.formDialogTableVisible = true;
            let para = {
                id: empid,
            }
            // nanobar.go(70);
            getEmployeeInfoList(para).then((res) => {
                this.otherinfoData = res.data.data.records[0];
                // nanobar.go(100);

                let paraThree = {
                    createby: this.otherinfoData.createby == null ? 0 : this.otherinfoData.createby,
                    updateby: this.otherinfoData.updateby == null ? 0 : this.otherinfoData.updateby,
                }
                getNamebyUserid(paraThree).then((res) => {
                    this.createname = res.data.data[0];
                    this.updatename = res.data.data[1];
                });
            });

        },
        // 有效无效开关
        showData (i) {
            this.filters.isenable = i;
            this.handleQuery();
        },
        //  // 分组——搜索下拉
        // querySearchGropName(queryString, cb){
        //         let para = {
        //             groupname : queryString
        //         },groupNameArray=[];
        //         getGroupInfoList(para).then((res) => {
        //             res.data.data.records.forEach( function(item, index) {
        //                 groupNameArray.push({value:item.groupname,id:item.ID});
        //             });
        //             cb(groupNameArray);
        //         });
        // },
        // handleSelectGropName(item){
        //       this.editForm.groupname = item.value;
        //       this.editForm.groupid = item.id;
        //       this.addForm.groupname = item.value;
        //       this.addForm.groupid = item.id;
        //  },
        // 公司——搜索下拉
        // querySearchCorpName(queryString, cb){
        //         let para = {
        //             corpname : queryString
        //         },corpNameArray=[];
        //         searchCorpNameList(para).then((res) => {
        //             res.data.data.records.forEach( function(item, index) {
        //                 corpNameArray.push({value:item.corpname,id:item.id});
        //             });
        //             cb(corpNameArray);
        //         });
        // },
        // handleSelectCorpName(item){
        //       this.editForm.corpname = item.value;
        //       this.editForm.corpid = item.id;
        //       this.addForm.corpname = item.value;
        //       this.addForm.corpid = item.id;
        //  },
        // 职位——搜索下拉
        // querySearchName(queryString, cb){
        //         let para = {
        //             positionname : queryString,
        //             isdelete:0
        //         },posNameArray=[];
        //         getPosList(para).then((res) => {
        //             res.data.data.records.forEach( function(item, index) {
        //                 posNameArray.push({value:item.positionname,id:item.id});
        //             });
        //             cb(posNameArray);
        //         });
        // },
        // handleSelectName(item){
        //       this.editForm.positionname = item.value;
        //       this.editForm.positionid = item.id;
        //       this.addForm.positionname = item.value;
        //       this.addForm.positionid = item.id;
        //  },
        // 部门——搜索下拉
        // querySearchDepName(queryString, cb){
        //         let para = {
        //             deptname : queryString
        //         },depNameArray=[];
        //         getDeptList(para).then((res) => {
        //             res.data.data.records.forEach( function(item, index) {
        //                 depNameArray.push({value:item.deptname,id:item.id});
        //             });
        //             cb(depNameArray);
        //         });
        // },
        // handleSelectDepName(item){
        //       this.editForm.deptname = item.value;
        //       this.editForm.deptid = item.id;
        //       this.addForm.deptname = item.value;
        //       this.addForm.deptid = item.id;
        //  },

        // 选择所属公司时，匹配部门，传corpid
        sendCorpIdData (val) {
            this.addForm.deptname = ''; //清空所属部门
            this.addForm.groupname = ''; //清空所属分组
            this.editForm.deptname = ''; //清空所属部门
            this.editForm.groupname = ''; //清空所属分组

            let para = {
                corpid: val
            }
            if (typeof(para.corpid) == 'number') {
                getDepartmentInfoList(para).then((res) => {
                    this.deptlist = res.data.data.records;
                });
            }
        },
        // 选择所属部门时，匹配分组，传deptid
        sendDeptIdData (val) {
            this.addForm.groupname = ''; //清空所属分组
            this.editForm.groupname = ''; //清空所属分组
            let para = {
                deptid: val
            }
            if (typeof(para.deptid) == 'number') {
                getGroupInfoList(para).then((res) => {
                    this.grouplist = res.data.data.records;
                });
            }

        },
        /*所属公司——下拉*/
        corpChange (r) {
            this.corplist = [];
            if (!r || this.corplist.length > 0) return;
            let para = {
                showCount: 30
            }
            this.corpLoading = true;
            getCorporateInfoList(para).then((res) => {
                this.corplist = res.data.data.records;
                this.corpLoading = false;
            });
        },
        // 所属公司，模糊查询
        corpChangeSelect (query) {
            let para = {
                showCount: 30,
                corpname: query,
            }
            this.corpLoading = true;
            getCorporateInfoList(para).then((res) => {
                this.corplist = res.data.data.records;
                this.corpLoading = false;
            });
        },
        //所属 部门——搜索下拉
        deptChange (r) {
            if (!r || this.deptlist.length > 0) return;
            this.deptLoading = true;
            getDeptList().then((res) => {
                // this.deptlist = res.data.data.records;//未选择公司时不获取部门信息
                this.deptLoading = false;
            });
        },
        // 员工岗位——搜索下拉
        posChange (r) {
            if (!r || this.poslist.length > 0) return;
            this.posLoading = true;
            getPositionList().then((res) => {
                this.poslist = res.data.data.records;
                this.posLoading = false;
            });
        },
        // 员工岗位——模糊搜索下拉
        posChangeSelect (query) {
            let para = {
                showCount: 30,
                positionname: query,
            }
            this.posLoading = true;
            getPositionList(para).then((res) => {
                this.poslist = res.data.data.records;
                this.posLoading = false;
            });
        },
        //有效无效转换
        isenableFomat (row, col) {
            return row.isenable == 1 ? '是' : row.isenable != undefined ? '否' : '未知';
        },
        // 有效无效颜色切换
        tableRowClassName (row, index) {
            if (row.isenable == 0) {
                return 'warning-row';
            }
            return '';
        },
        // 有效按钮切换状态
        handleChange: function (index, row) {
            this.$confirm('确认设置该条记录的状态吗？', '提示', {
                type: 'warning'
            }).then(() => {
                let para = {
                    id: row.ID,
                    userid: row.userid,
                    isenable: row.isenable == 0 ? 1 : 0,
                    isactive: row.isenable == 0 ? 1 : 0,
                }
                if (para.isenable == 0) { //有效变无效时
                    modifyEmployeeInfoStatus(para).then((res) => {
                        if (res.data.data.disable != undefined) {
                            this.$message({
                                message: '设置成功',
                                type: 'success'
                            });
                            row.isenable = para.isenable;
                        } else {
                            this.$message({
                                message: '该员工有关联关系，请先解除关联关系！',
                                type: 'warning'
                            });
                        }

                    });
                } else {
                    modifyEmployeeInfo(para).then((res) => {
                        this.$message({
                            message: '设置成功！',
                            type: 'success'
                        });
                        row.isenable = para.isenable;
                    }).catch(() => {
                        this.listLoading = false;
                    });
                }
            });
        },
        // 有效 鼠标移入
        mouseoverChange (e) {
            if ($(e.target).hasClass('icon-duigou')) {
                $(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
            } else {
                $(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
            }
        },
        // 有效 鼠标移除
        mouseoutChange (e) {
            if ($(e.target).hasClass('icon-cha')) {
                $(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
            } else {
                $(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
            }
        },
        // 上传图片成功后
        headImgSuccess (res, file) {
            this.imageUrl = URL.createObjectURL(file.raw);
            this.editForm.headiconpath = res;
            this.addForm.headiconpath = res;
        },
        // 员工类型
        empChange (r) {
            if (!r || this.emptype.length > 0) return;
            this.etLoading = true;
            getEmpType().then((res) => {
                this.emptype = res.data.data.records;
                this.etLoading = false;
            });
        },

        //切换当前页
        handleCurrentChange (val) {
            this.currentPage = val;
            // this.handleQuery();
            this.handleQuerySelect(); //查询分页
        },
        //切换每页显示数量
        handleSizeChange (val) {
            this.pageSize = val;
            this.handleQuery();
        },
        // 添加查询条件
        addSelect () {
            this.filters.domSearch.push({
                select: [],
                content: ''
            });
        },
        // 移除查询条件
        removeSelect (index) {
            this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
        },
        //搜索按钮——模糊查询
        handleQuerySelect () {
            let para = {
                currentPage: this.currentPage,
                showCount: this.pageSize,
                isenable: this.filters.isenable,
                domSearch: this.filters.domSearch,
            };
            this.listLoading = true;
            getSelectList(para).then((res) => {
                this.total = res.data.data.totalResult;
                this.listData = res.data.data.records;
                this.listLoading = false;
            }).catch((error) => {
                this.listLoading = false;
            });
        },
        //获取员工
        handleQuery () {
            let para = {
                currentPage: this.currentPage,
                showCount: this.pageSize,
                isenable: this.filters.isenable,
                content: this.filters.content,
                select: this.filters.select,
            };
            this.listLoading = true;
            getEmployeeInfoList(para).then((res) => {
                this.total = res.data.data.totalResult;
                this.listData = res.data.data.records;
                this.listLoading = false;
            }).catch((error) => {
                this.listLoading = false;
            });
        },
        //删除
        handleDel (index, row) {
            this.$confirm('确认删除该记录吗?', '提示', {
                type: 'warning'
            }).then(() => {
                this.listLoading = true;
                let para = {
                    ids: row.ID,
                    method: "delete"
                };
                removeEmployeeInfo(para).then((res) => {
                    this.listLoading = false;
                    this.$message({
                        message: '删除成功',
                        type: 'success'
                    });
                    this.handleQuery();
                });
            }).catch(() => {
                this.listLoading = false;
            });
        },
        //显示编辑界面
        handleEdit (index, row) {
            // 查询公司部门分组
            this.sendCorpIdData(row.corpid);
            this.sendDeptIdData(row.deptid);

            $(".is-error").removeClass('is-error'); //清空验证时的红框
            this.editFormVisible = true;
            // 地址
            var addrVal = row.region;
            if (addrVal != null) {
                var addrArr = addrVal.split(",");
            } else {
                var addrArr = ["四川", "成都", "高新区"];
            }
            this.editForm = {
                id: row.ID,
                headiconpath: row.headiconpath,
                employeetypename: row.employeetypename,
                employeecode: row.employeecode,
                employeename: row.employeename,
                username: row.username,
                positionname: row.positionname,
                corpname: row.corpname,
                groupname: row.groupname,
                deptname: row.deptname,
                mobile: row.mobile,
                isenable: parseInt(row.isenable),
                gender: row.gender,
                regionAll: addrArr,
                address: row.address,
                wechatid: row.wechatid,
                qq: row.qq,
            }
            this.editFormId = {
                employeetype: row.employeetype,
                employeetypename: row.employeetypename,
                positionid: row.positionid,
                positionname: row.positionname,
                deptid: row.deptid,
                deptname: row.deptname,
                corpid: row.corpid,
                corpname: row.corpname,
                groupid: row.groupid,
                groupname: row.groupname,
            }
            this.thisInput = this.editForm.mobile; //将当前验证的字段 已获得的值存入
            // 设置编辑时获取头像方式
            if (this.editForm.headiconpath == undefined) {
                this.imageUrl = '';
            } else {
                this.imageUrl = this.$store.state.IMG_URL + row.headiconpath;
            }
        },
        //显示新增界面
        handleAdd () {
            $(".is-error").removeClass('is-error'); //清空验证时的红框
            this.addFormVisible = true;
            this.addForm = {
                headiconpath: '',
                employeetypename: '',
                username: '',
                employeecode: '',
                employeename: '',
                positionname: '',
                deptname: '',
                corpname: '',
                groupname: '',
                mobile: '',
                stogisneed: '',
                isenable: 1,
                gender: 'M',
                regionAll: ["四川", "成都", "高新区"],
                region: '',
                address: '',
                wechatid: '',
                qq: '',
                deptid: '',
                groupid: '',
                positionid: '',
            };
        },
        //编辑
        editSubmit () {
            this.$refs.editForm.validate((valid) => {
                if (valid) {
                    this.editLoading = true;
                    let para = {
                        id: this.editForm.id,
                        employeecode: this.editForm.employeecode,
                        employeename: this.editForm.employeename,
                        username: this.editForm.username,
                        deptid: this.editForm.deptname,
                        positionid: this.editForm.positionname,
                        corpid: this.editForm.corpname,
                        groupid: this.editForm.groupname,
                        mobile: this.editForm.mobile,
                        isenable: this.editForm.isenable,
                        headiconpath: this.editForm.headiconpath,
                        gender: this.editForm.gender,
                        region: this.editForm.regionAll.toString(),
                        address: this.editForm.address,
                        wechatid: this.editForm.wechatid,
                        qq: this.editForm.qq,
                    }
                    if (this.editFormId.employeetypename == this.editForm.employeetypename) {
                        para.employeetype = this.editFormId.employeetype;
                    } else {
                        para.employeetype = this.editForm.employeetypename;
                    }
                    // if(this.editFormId.deptname == this.editForm.deptname) {
                    //     para.deptid = this.editFormId.deptid;
                    // }else{
                    //     para.deptid = this.editForm.deptid;
                    // }
                    if (this.editFormId.deptname == this.editForm.deptname) {
                        para.deptid = this.editFormId.deptid;
                    } else {
                        para.deptid = this.editForm.deptname;
                    }
                    if (this.editFormId.groupname == this.editForm.groupname) {
                        para.groupid = this.editFormId.groupid;
                    } else {
                        para.groupid = this.editForm.groupname;
                    }
                    if (this.editFormId.positionname == this.editForm.positionname) {
                        para.positionid = this.editFormId.positionid;
                    } else {
                        para.positionid = this.editForm.positionname;
                    }
                    if (this.editFormId.corpname == this.editForm.corpname) {
                        para.corpid = this.editFormId.corpid;
                    } else {
                        para.corpid = this.editForm.corpname;
                    }
                    if (para.corpid != '' && para.deptid == '') { //当选择了公司,未选择部门时
                        this.$message({
                            message: '请选择部门！',
                            type: 'warning'
                        });
                        this.editLoading = false;
                        return;
                    } else {
                        modifyEmployeeInfo(para).then((res) => {
                            this.editLoading = false;
                            if (res.data.result.desc != 'success') {
                                this.$message({
                                    message: '当前员工电话号码有误或者在员工(有效或者无效)中已存在此号码！',
                                    type: 'warning'
                                });
                                return;
                            } else {
                                this.$message({
                                    message: '编辑成功！',
                                    type: 'success'
                                });
                            }
                            this.$refs['editForm'].resetFields(); //表单清空
                            this.editFormVisible = false;
                            this.handleQuerySelect();
                        }).catch((error) => {
                            this.editLoading = false;
                        });
                    }

                }
            });
        },
        //新增
        addSubmit () {
            this.$refs.addForm.validate((valid) => {
                if (valid) {
                    this.addLoading = true;
                    let para = {
                        employeetype: this.addForm.employeetypename,
                        employeecode: this.addForm.employeecode,
                        headiconpath: this.addForm.headiconpath,
                        employeename: this.addForm.employeename,
                        username: this.addForm.username,
                        positionid: this.addForm.positionname,
                        deptid: this.addForm.deptname,
                        corpid: this.addForm.corpname,
                        groupid: this.addForm.groupname,
                        mobile: this.addForm.mobile,
                        stogisneed: this.addForm.stogisneed,
                        isenable: this.addForm.isenable,
                        gender: this.addForm.gender,
                        region: this.addForm.regionAll.toString(),
                        address: this.addForm.address,
                        wechatid: this.addForm.wechatid,
                        qq: this.addForm.qq,
                    }
                    if (this.checkoutDataT) { //验证通过时(无重复时)
                        if (para.corpid != '' && para.deptid == '') { //当选择了公司,未选择部门时
                            this.$message({
                                message: '请选择部门！',
                                type: 'warning'
                            });
                            this.addLoading = false;
                            return;
                        } else {
                            addEmployeeInfo(para).then((res) => {
                                this.addLoading = false;
                                if (res.data.result.desc != 'success') {
                                    this.$message({
                                        message: '员工添加失败！',
                                        type: 'warning'
                                    });
                                    return;
                                } else {
                                    this.$message({
                                        message: '新增成功！',
                                        type: 'success'
                                    });
                                    this.$refs['addForm'].resetFields();
                                    this.addFormVisible = false;
                                    this.handleQuery();
                                }
                            }).catch((error) => {
                                this.addLoading = false;
                            });
                        }
                    } else {
                        this.addLoading = false;
                        this.$message({
                            message: '标红信息已存在！',
                            type: 'warning'
                        });
                    }
                }
            });
        },
        selsChange (sels) {
            this.sels = sels;
        },
        //批量删除
        batchRemove () {
            var ids = this.sels.map(item => item.id).toString();
            this.$confirm('确认删除选中记录吗？', '提示', {
                type: 'warning'
            }).then(() => {
                this.listLoading = true;
                let para = {
                    ids: ids,
                    method: "delete"
                };
                removeEmployeeInfo(para).then((res) => {
                    this.listLoading = false;
                    this.$message({
                        message: '删除成功',
                        type: 'success'
                    });
                    this.handleQuery();
                });
            }).catch(() => {

            });
        }
    },
    mounted () {
        this.handleQuery();
    }
}