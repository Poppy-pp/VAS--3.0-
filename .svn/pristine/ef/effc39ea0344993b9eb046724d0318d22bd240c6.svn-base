    import util from 'utils/tools.js'
    import { getTodoInfoList,  } from './service';

   export default {
        props: ['windowOutHeight'],
        data() {
            return {
                bxDialogVisible:false,
                filters: {
                    domSearch: [{
                        select: ['status'],
                        content: ''
                    }], //查询框
                },
                flowData:'',
                listLoading:false,
                todo: [],
                total: 0,
                pageSize: 15,
                baseUrl: 'http://192.168.50.146/template/',//基础模板地址
                iframeSrc: '',//模板地址
            }
        },
        methods: {
            //获取待办列表
            getTodo() {
                let para = {
                    // page: this.currentPage,
                    // limit: this.pageSize,
                    // domSearch: this.filters.domSearch,
                    currentPage: this.currentPage,
                    showCount: this.pageSize,
                    taskDefinitionKey: this.filters.curInsuranceStatus == '出单' ? 'node_work' : this.filters.curInsuranceStatus == '打印' ? 'sid-71506EF2-8A37-4FA4-B84C-B361F686EFC7' : '',
                    owner_name: this.filters.ownername,
                    VehicleInfo_licenseplatenum:this.filters.licenseplatenum,
                    VehicleInfo_vin: this.filters.vin,
                    type:5,
                    all:true
                };
                this.listLoading = true;
                getTodoInfoList(para).then((res) => {
                    this.listLoading = false;
                    if(res.data.result.code == 0) {
                        this.total = res.data.data.total;
                        this.todo = res.data.data.records;
                    }
                }).catch((error) => {
                    this.listLoading = false;
                });
            },
            //搜索按钮——模糊查询
            handleQuerySelect() {
                let para = {
                    page: this.currentPage,
                    limit: this.pageSize,
                    domSearch: this.filters.domSearch,
                };
                this.listLoading = true;
                getTodoInfoList(para).then((res) => {
                    this.total = res.data.data.total;
                    this.todo = res.data.data.records;
                    this.listLoading = false;
                }).catch((error) => {
                    this.listLoading = false;
                });
            },
            //出单
            issueIns(index,row){
                row.type = 5;
                this.$store.state.formObj = row;
                this.$router.push('/formProcess/4');
            },
            //切换当前页
            handleCurrentChange(val) {
                this.currentPage = val;
                this.handleQuerySelect();
            },
            //切换每页显示数量
            handleSizeChange(val) {
                this.pageSize = val;
                this.getTodo();
            },
            resetForm(){
                this.filters.domSearch = [{
                    select: ['status'],
                    content: ''
                }] //清空查询框;
            },
            // 添加查询条件
            addSelect() {
                this.filters.domSearch.push({
                    select: [],
                    content: ''
                });
            },
            // 移除查询条件
            removeSelect(index) {
                this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
            },
            //时间转换1
            dateFormatter(row,col){
                return util.formatDate.format(new Date(row.createTime), 'yyyy-MM-dd hh:mm:ss');
            },
            //时间转换2
            dateFormatterSecond: function(row, col) {
                if(row.effectivedate == "" || row.effectivedate == undefined) return;
                return util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd');
            },
            //时间转换3
            dateFormatterThird: function(row, col) {
                if(row.createdate == "" || row.createdate == undefined) return;
                return util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd hh:mm:ss');
            },
            //时间转换4
            dateFormatterForth: function(row, col) {
                if(row.updatedate == "" || row.updatedate == undefined) return;
                return util.formatDate.format(new Date(row.updatedate), 'yyyy-MM-dd hh:mm:ss');
            },
        },
        //初始化数据
        created() {
            this.getTodo();
        }
    }