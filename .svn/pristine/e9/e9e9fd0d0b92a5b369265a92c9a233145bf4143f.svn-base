import { get, add, update } from './service';
// import { modifyEmployeeInfo } from "../../../basicManage/employeeManage/service";
// import TemplateDetails from './abc.vue'

export default {
    props: ['windowOutHeight'],
    // components: {
    //     TemplateDetails
    // },
    data () {
        return {
            listData: [],
            insuCorpList: [
                {
                    name: '中国人寿',
                    id: 1,
                    insucorpeffectivedate: ["2016-10-30T16:00:00.000Z", "2018-11-20T16:00:00.000Z"],
                    insucorpnumber: 'WWS20181019'
                },
                {
                    name: '中国人保',
                    id: 2,
                    insucorpeffectivedate: ["2017-10-30T16:00:00.000Z", "2019-11-20T16:00:00.000Z"],
                    insucorpnumber: 'WWS20182131'
                }
            ],
            dialogVisible: false,
            total: 0,
            currentPage: 0,
            pageSize: 15,
            loading: false,
            // editFormVisible: false, //修改界面是否显示
            editLoading: false,
            //修改界面数据
            editForm: {},
            addFormVisible: false, //新增界面是否显示
            addLoading: false,
            rules: {
                templatename: [
                    {required: true, message: '保单模板名称必填', trigger: 'blur'},
                    {min: 1, max: 20, message: '长度在 1 到 20 个字符', trigger: 'blur'}
                ],
                templateurl: [
                    {required: true, message: '保险公司名称必选', trigger: 'blur'}
                ],
                insucorpname: [
                    {required: true, message: '保险公司名称必选', trigger: 'change'}
                ],
                remark: [
                    {max: 100, message: '长度在不能超过 100 个字符', trigger: 'blur'}
                ]
            },
            //新增界面数据
            form: {},
            accept: '.html',
            fileList: [],
            baseUrl: 'http://222.212.141.40:9104/img/'
        }
    },
    methods: {
        // 模板详情
        templateDetails (row) {
            this.form.templateurl = row.templateurl
            this.dialogVisible = true
        },
        // 有效按钮切换状态
        handleChange: function (index, row) {
            this.$confirm('确认设置该条记录的状态吗？', '提示', {
                type: 'warning'
            }).then(() => {
                let para = {
                    id: row.id,
                    isactive: row.isactive == 1 ? 0 : 1
                }
                update(para).then((res) => {
                    if (res.data.code === 0) {
                        this.$message({
                            message: '设置成功',
                            type: 'success'
                        });
                        row.isactive = para.isactive;
                    }
                });
            })
        },
        // 有效 鼠标移入
        mouseoverChange (e) {
            if ($(e.target).hasClass('icon-duigou')) {
                $(e.target)
                    .addClass('operate-cha icon-cha')
                    .removeClass('operate-duigou icon-duigou')
            } else {
                $(e.target)
                    .addClass('operate-duigou icon-duigou')
                    .removeClass('operate-cha icon-cha')
            }
        },
        // 有效 鼠标移除
        mouseoutChange (e) {
            if ($(e.target).hasClass('icon-cha')) {
                $(e.target)
                    .addClass('operate-duigou icon-duigou')
                    .removeClass('operate-cha icon-cha')
            } else {
                $(e.target)
                    .addClass('operate-cha icon-cha')
                    .removeClass('operate-duigou icon-duigou')
            }
        },
        //显示编辑界面
        handleEdit (index, row) {
            // $('.is-error').removeClass('is-error') //清空验证时的红框
            this.addFormVisible = true
            this.form = row
            this.fileList = [{name: row.templateurl}]
        },
        //有效转换器
        formatIsactive (row, column) {
            return row.isactive == 1 ? '有效' : row.isactive == 0 ? '无效' : '未知'
        },
        //切换每页显示数量
        handleSizeChange (val) {
            this.pageSize = val
        },
        handleCurrentChange (val) {
            this.currentPage = val
        },
        //显示新增界面
        handleAdd () {
            this.addFormVisible = true;
            this.form = {
                templateurl: '',
                id: ''
            }
            this.fileList = []
        },
        addSubmit () {
            this.$refs.form.validate(async valid => {
                if (valid) {
                    this.editLoading = true
                    let para = Object.assign({}, this.form)
                    if (para.id) {
                        try {
                            await update(para)
                            this.addFormVisible = false;
                            this.$message.success('修改模板成功')
                            this.editLoading = false
                        } catch (e) {
                            this.editLoading = false
                        }
                    } else {
                        try {
                            await add(para)
                            this.get()
                            this.addFormVisible = false;
                            this.$message.success('添加模板成功')
                            this.editLoading = false
                        } catch (e) {
                            this.editLoading = false
                        }
                    }
                }
            })
        },
        uploadSuccess (response, file, fileList) {
            this.form.templateurl = response;
            this.$refs.templateurl.clearValidate();
        },
        changeFile (file, fileList) {
            if (fileList.length > 1) {
                this.fileList = fileList.slice(1)
            } else {
                this.fileList = fileList
            }
        },
        removeFile () {
            this.form.templateurl = ''
        },
        async get () {
            this.loading = true
            try {
                const params = {
                    limit: this.pageSize,
                    page: this.currentPage
                }
                const {data} = await get(params)
                _.forEach(data.data.records, item => {
                    const insucorp = _.find(this.insuCorpList, {name: item.insucorpname})
                    item.insucorpnumber = insucorp.insucorpnumber
                    item.insucorpeffectivedate = insucorp.insucorpeffectivedate
                })
                this.listData = data.data.records
                this.total = data.data.total
                this.currentPage = data.data.current
                this.loading = false
            } catch (e) {
                this.loading = false
            }
        },
        dataFormatter (row) {
            if (row.createdate) {
                return new Date(row.createdate).toLocaleDateString()
            } else {
                return '-'
            }
        },
        changeInsucorp (name) {
            const insucorp = _.find(this.insuCorpList, {name: name})
            this.form.insucorpnumber = insucorp.insucorpnumber
            this.form.insucorpeffectivedate = insucorp.insucorpeffectivedate
        },
        timeScopeFormatter (row) {
            const arr = _.map(row.insucorpeffectivedate, item=>{
                return new Date(item).format('yyyy/MM/dd')
            })
            return arr.join('-')
        }
    },
    mounted () {
        this.get()
    }
}
