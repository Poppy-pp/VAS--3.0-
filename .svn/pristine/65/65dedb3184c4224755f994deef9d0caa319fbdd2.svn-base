import util from 'utils/tools';
import {
    getEmpAllocation,
    getProductInfoList,
    getViewLogistics,
    getaAllocationDetails,

} from './service.js';
import { checkNum } from '@/utils/formValidation'
import allocationDetail from './allocation-detail/index.vue'
import { mapActions, mapState } from 'vuex'

export default {
    props: ['windowOutHeight'],
    components: {
        allocationDetail
    },
    computed: {
        ...mapState({
            storageInvoice: state => state.storage.data
        })
    },
    data() {
        return {
            filters: {
                domSearch: [{
                    select: ['batchno'],
                    content: ''
                }], //查询框
                timeScope: '',
            },
            filtersYishi: {
                timeScope: '',
            },
            filtersProd: {
                domSearch: [{
                    select: ['prodnum'],
                    content: ''
                }], //查询框
            },
            listData: [],
            total: 0,
            currentPage: 1,
            pageSize: 15,
            listLoading: false,
            addFormVisible: false, //新增界面是否显示
            addLoading: false,
            addFormRules: {
                contractid: [{required: true,message: '请选择采购合同',trigger: 'blur'}],
                modelId: [{required: true,message: '请选择配件类型',trigger: 'blur'}],
                instocknum: [{required: true,message: '请输入入库数量',trigger: 'blur'},{validator: checkNum,trigger: 'blur'}],
            },
            //新增界面数据
            addForm: {
                batchno:'',
                contractid:'',
                supplierid:'',
                suppliername:'',
                storagename:'',
                modelId: '',
                instocknum: '',
                remarks:'',
                operatingpersonnel:''
            },
            activeName:'first',
            moreData:[],//遗失列表数据
            loseEmplist:[],//遗失人列表
            loseEmpLoading:false,
            loseFormVisible:false,
            chooseLoseProdData:[],//已选择遗失设备组
            loseForm:{      //遗失
                batchno:'',
            },
            loseFormRules:{

            },
            ytotal: 0,
            ycurrentPage: 1,
            ypageSize: 15,
            deviceListData: [], //遗失设备选择列表
            deviceFormVisible: false,
            devicelistLoading: false,
            dtotal: 0,
            dcurrentPage: 1,
            dpageSize: 10,
            notext: '',//物流
            logisticsList: [],
            distributionVisible: false,
            expandLoading: false,
        }
    },
    methods: {
        ...mapActions(['setPutInData']),
        // -----------------------------------------------遗失------------------------------------------------
        // 点击遗失
        handleLose(){
         this.loseFormVisible = true;
         this.chooseLoseProdData = [];//初始化
        },
        // 确认遗失提交
        loseSubmit(){
        },
        // 遗失人下拉
        loseEmpChange(){
        },
        yhandleCurrentChange(val) {
         this.ycurrentPage = val;
         this.getDeciceListInfo();
        },
        //切换每页显示数量
        yhandleSizeChange(val) {
         this.ypageSize = val;
         this.getDeciceListInfo();
        },
        //点击添加遗失设备按钮
        addDeviceList() {
            this.deviceFormVisible = true;
            this.filtersProd.domSearch = [{select: ['prodnum'],content: ''}];//初始化查询框
            this.getDeciceListInfo();
        },
        //获取设备列表信息
        getDeciceListInfo() {
            let para = {
                page: this.dcurrentPage,
                limit: this.dpageSize,
                domSearch: this.filtersProd.domSearch, //查询框
            };
            this.devicelistLoading = true;
            getProductInfoList(para).then((res) => {
                this.dtotal = res.data.data.total;
                this.deviceListData = res.data.data.records;
                this.devicelistLoading = false;
            }).catch((error) => {
                this.devicelistLoading = false;
            });
        },
        // 双击确认选择设备
        comlist(checkData, event) {
                this.deviceFormVisible = false;
                this.chooseLoseProdData.push(checkData);
        },
        // 删除已选设备
        handleDelete(index,row){
            this.chooseLoseProdData.splice(index,1);
        },
        //切换当前页——选择遗失设备
        dhandleCurrentChange(val) {
            this.dcurrentPage = val;
            this.getDeciceListInfo();
        },
        //切换每页显示数量
        dhandleSizeChange(val) {
            this.dpageSize = val;
            this.getDeciceListInfo();
        },


        // ----------------------------------------------------新增调拨-------------------------------------------------
        // 获取采购合同
        async getStoPurchaseList () {
            try {
                const {data} = await getStoPurchaseList()
                this.purchaseList = data.data;
            } catch (e) {}
        },
        // 选择合同匹配供应商
        chooseChange(val){                                         //新增入库
            this.addForm.contractid = val.id;
            this.addForm.suppliername = val.suppliername;
            this.addForm.supplierid = val.supplierid;
        },
        // 配件类型——搜索下拉
        partsChange(r) {
            if(!r || this.partsType.length > 0) return;
            this.partsLoading = true;
            let para = {
                limit:100
            }
            getPartsModelList(para).then((res) => {
                this.partsType = res.data.data.records;
                this.partsLoading = false;
            });
        },

        //显示新增界面
        handleAdd() {
            this.addFormVisible = true;
            this.$router.push({name: 'allocation-detail'})
        },
        //新增
        addSubmit() {
            this.$refs.addForm.validate((valid) => {
                if(valid) {
                    let para = Object.assign({}, this.addForm);
                    addPartsInStore(para).then((res) => {
                        this.addLoading = false;
                        this.$message.success('新增成功！');
                        this.$refs['addForm'].resetFields();
                        this.addFormVisible = false;
                        this.handleQuery();
                    });
                }
            });
        },

        // 入库单详情
        async toPutInStoDetails(rows){
            this.deviceFormVisible = true;
            try {
                 const res = await getDetails({modelid:rows.modelId});
                 this.deviceListData = res.data.data;
            } catch (e) {}
        },



        // ---------------------------------------------------------查看物流-----------------------------------------------------------
        async viewDistribution (row) {
            this.distributionVisible = true
            this.expandLoading = true
            this.logisticsList = []
            this.notext = ''
            try {
                const params = {
                    id: row.deliveryid
                }
                const {data} = await getViewLogistics(params)
                this.expandLoading = false;
                this.logisticsList = data.data.traces.reverse();//倒叙
                this.logisticsList.logisticName = data.data.logisticName;
                this.logisticsList.logisticCode = data.data.logisticCode;
            } catch (e) {
                this.expandLoading = false
                this.notext = '抱歉！该订单暂不支持查询！'
                if (e && e.data && e.data.msg) {
                    this.notext = e.data.msg
                }
            }
        },


        // ---------------------------------------------------------查看详情-----------------------------------------------------------
        viewDetails(row){
            let para = {id:row.id}
            getaAllocationDetails(para).then((res) => {
                this.$router.push({
                    name: `allocation-detail`,
                    query: res.data.data
                })
            })
        },

        //查询清空
        clearAll() {
            this.filters.domSearch = [{
                select: [],
                content: ''
            }] //清空查询框;
        },        
        // 添加查询条件
        addSelect() {
            this.filters.domSearch.push({
                select: [],
                content: ''
            });
        },
        // 移除查询条件
        removeSelect(index) {
            this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
        },
        //切换当前页
        handleCurrentChange(val) {
            this.currentPage = val;
            this.handleQuery();
        },
        //切换每页显示数量
        handleSizeChange(val) {
            this.pageSize = val;
            this.handleQuery();
        },
        //获取列表
        handleQuery() {
            let para = {
                page: this.currentPage,
                limit: this.pageSize,
                domSearch: this.filters.domSearch,
                startTime: this.filters.timeScope ? (this.filters.timeScope[0] ? util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd hh:mm:ss') : '') : '',
                endTime: this.filters.timeScope ? (this.filters.timeScope[1] ? util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd hh:mm:ss') : '') : '',
            };
            this.listLoading = true;
            getEmpAllocation(para).then((res) => {
                this.total = res.data.data.total;
                this.listData = res.data.data.records;
                this.listLoading = false;
            }).catch((error) => {
                this.listLoading = false;
            });
        },
        //时间转换1
        dateFormatter: function(row, col) {
            if(row.actiondate == "" || row.actiondate == undefined) return '--';
            return util.formatDate.format(new Date(row.actiondate), 'yyyy-MM-dd');
        },
    },
    created() {
        this.handleQuery();
    }
}