    import util from 'utils/tools.js'
    import { getToken } from '@/utils/auth'
    import axios from 'axios'
    import { getInsuranceInfoList, addInsuranceInfo, modifyInsuranceInfo,exportInsurance,getInsTemplate,handleInsurance,getRecordsInfo,getMoreInfo, removeInsuranceInfo, getCheckoutOfIns,getCorpList,againInsuranceInfo,printInsuranceInfo  } from './service';

    export default {
        name:'InsuranceInfo',
        props: ["windowOutHeight"],
        data() {
            //验证车价、赔偿限额(只能输入数字)
            var checkPrice = (rule, value, callback) => {
                var reg = /^\d+(\.\d{2})?$/g,
                    flag = reg.test(value);
                if(!flag) {
                    return callback(new Error('必须为数字,小数最多保留两位'));
                } else {
                    callback();
                }
            };
            //验证特殊字符
            var checkWord = (rule, value, callback) => {
                var reg = /^[a-zA-Z\d]+$/g,
                    flag = reg.test(value);
                if(!flag) {
                    return callback(new Error('格式为数字或字母'));
                } else {
                    callback();
                }
            };
            // 验证手机
            var checkvehicleownercontact = (rule, value, callback) => {
                var reg = /^1\d{10}$/g,
                    flag = reg.test(value);
                if(!flag) {
                    return callback(new Error('请输入11位的手机号码'));
                } else {
                    callback();
                }
            };
            //验证车主身份证号(只能输入11位数字)
            var checkvehicleowneridcard = (rule, value, callback) => {
                var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/g,
                    flag = reg.test(value);
                if($.trim(value) == '') {
                    callback();
                    return;
                }
                if(!flag) {
                    return callback(new Error('身份证格式不合法'));
                } else {
                    callback();
                }
            };
            //验证车牌号
            var checkVehicleNumber = (rule, value, callback) => {
                if ($.trim(value).length == 8){//新能源汽车
                    var reg = /^[\u4e00-\u9fa5]{1}[A-Z]{1}[A-Z_0-9]{6}$/;
                }else{//普通汽车
                    var reg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
                }

                var flag = reg.test(value);
                if($.trim(value) == '') {
                    callback();
                    return;
                }
                if(!flag) {
                    return callback(new Error('车牌号格式不规范'));
                } else {
                    callback();
                }
            };
            //验证车架号(只能输入数字和字母)
            var checkVin = (rule, value, callback) => {
                var reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*$/g,
                    flag = reg.test(value);
                if(!flag) {
                    return callback(new Error('车架号必须为数字和字母组成'));
                } else {
                    callback();
                }
            };
            
            return {
                fmtdata: util,
                filters: {
                    Formate(value) {
                        return new Date(value).toLocaleDateString().replace(/\//g, "-");
                    },
                    domSearch: [{
                        select: ['isactive'],
                        content: ''
                    }], //查询框
                },
                bxDialogVisible:false,//打印保单
                // flowData:{
                //  flowData:'',
                // },//保单信息
                flowData:'',
                moNamelist: [], //设备型号列表
                moNameLoading: false, //设备型号
                pickerOptions: { //日期
                },
                prOptions: util.initProvince(),
                activeNames: '',
                insurancestatusOptions: [{
                    value: 1,
                    label: '预投保'
                }, {
                    value: 2,
                    label: '已出单'
                }, {
                    value: 3,
                    label: '已拒绝'
                }],
                insurances: [],
                moreDetailsData: [], //其他详情
                somedata: [],
                customers: [],
                insurancelist: [{
                    label: '盗抢险',
                    value: 'THEFT',
                }], //保险类型列表
                insuranceLoading: false, //保险类型
                total: 0,
                currentPage: 1,
                pageSize: 15,
                listLoading: false,
                corptwolist: [], //受理银行
                corptwoLoading: false, //
                // inStatuslist:[],//保单类型列表
                // inStatusLoading:false,
                // bcorplist:[],//报单公司列表
                // bcorpLoading:false,
                incorplist: [], //保单公司列表
                incorpLoading: false,
                checkoutDataT: true, //数据验证返回的布尔值true
                checkoutDataF: [], //
                thisInput: [], //编辑时存入row验证的值
                sels: [], //列表选中列
                editFormVisible: false, //编辑界面是否显示
                editFormVisibleAgain:false,
                formDialogTableVisible: false, //是否显示订单详情弹出
                editLoading: false,
                editFormRules: {
                    price:[
                        {required:true,message:"请输入车价",trigger: 'blur'},
                        {validator: checkPrice,trigger: 'blur'}
                    ],
                    indemnitylimit:[
                             {required:true,message:"请输入赔偿限额",trigger: 'blur'},
                             {validator: checkPrice,trigger: 'blur'}
                    ],
                },
                editFormAgainRules: {
                    policyno: [{required: true,message: "请输入保险函编号",trigger: 'blur'},{validator: checkWord,trigger: 'blur'}],
                    price:[
                        {required:true,message:"请输入车价",trigger: 'blur'},
                                {validator: checkPrice,trigger: 'blur'}
                    ],
                    indemnitylimit:[
                             {required:true,message:"请输入赔偿限额",trigger: 'blur'},
                             {validator: checkPrice,trigger: 'blur'}
                    ],
                    vehicleownercontact: [{
                            required: true,
                            message: "请输入车主手机号码",
                            trigger: 'blur'
                        },
                        {
                            validator: checkvehicleownercontact,
                            trigger: 'blur'
                        }
                    ],
                    vehicleowneridcard: [{
                            required: true,
                            message: "请输入身份证号码",
                            trigger: 'blur'
                        },
                        {
                            validator: checkvehicleowneridcard,
                            trigger: 'blur'
                        }
                    ],
                    vehicleplate:[{
                            required: true,
                            message: "请输入车牌号",
                            trigger: 'blur'
                        },{
                            validator: checkVehicleNumber,
                            trigger: 'blur'
                    }],
                    vehiclevin: [{
                            required: true,
                            message: "请输入车架号",
                            trigger: 'blur'
                        },
                        {
                            validator: checkVin,
                            trigger: 'blur'
                        }
                    ],
                },
                //编辑界面数据
                editForm: {
                    id: '',
                    policyno: '',
                    insurancecorpid: '',
                    vehicleid: '',
                    itype: '',
                    insurancetype: '',
                    insurancestatus: '',
                    vehicleplate: '',
                    issuedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    expiredate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    price: '',
                    indemnitylimit: '',
                    receivingbankname: '',
                    isactive: '',
                    vin: '',
                    model: '',
                    color: '',
                    name: '',
                    gender: '',
                    vehicleownercontact: '',
                    addresshome: '',
                    vehicleowneridcard: '',
                    prodspec: '',
                    prodmodel: '',
                    prodnum: '',
                    prodsnnum: '',
                    indemnitylimit: '',
                    isactive:'',
                    status:''
                },
                editFormId: {
                    insurancecorpid: '',
                    insurancecorpname: '',
                    itype: 'THEFT',
                    insurancetype: '',
                },
                //重新出单界面数据
                editFormAgain: {
                    vehicleowner:  '',
                    vehicleownercontact:  '',
                    vehicleowneridcard:  '',
                    addresshome:  '',
                    gender:  '',
                    vehicleid: '',
                    vehicleplate:  '',
                    vehiclevin:  '',
                    vehiclemodel:  '',
                    vehiclecolor:  '',
                    vehicleenginenum: '',
                    id: '',
                    policyno: '',
                    insurancecorpid: '',
                    itype: '',
                    insurancetype: '',
                    insurancestatus: '',
                    issuedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    expiredate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    price: '',
                    indemnitylimit: '',
                    receivingbankname: '',
                    isactive: '',
                    createdate:util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    remark:'',
                    serialnum:'',
                    isactive:'',
                    status:''
                },
                editFormAgainId: {
                    insurancecorpid: '',
                    insurancecorpname: '',
                    itype: 'THEFT',
                    insurancetype: '',
                },

                pickerOptions0: {
                    disabledDate(time) {
                        return time.getTime() < Date.now() - 8.64e7;
                    }
                },
                noteTitle:'',//操作弹窗标题
                noteDialogVisible:false,
                noteForm:{
                    remark:'',
                    words:0
                },
                insuranceId :'',
                eventType :'',
                eventStatus :'',
                checkWordsStatus:true,
                activeName: 'first',
                operationData:[],//操作记录
                checkoutDataF:true,//验证万网保单号重复
                baseUrl: 'http://222.212.141.40:9104/img/',//基础模板地址
                iframeSrc: '',//模板地址
            }
        },
        methods: {
            // 数据重复验证
            checkout(){
                let para = {
                    policyno:this.editFormAgain.policyno
                }
                getCheckoutOfIns(para).then((res) => {
                    if (res.data.data) {
                        this.$message({
                            message: '信息输入重复！',
                            type: 'warning'
                        });
                        this.$refs.policyno.$el.className = "el-form-item is-error"; //输入框标红
                        this.checkoutDataF = false;
                    }else{
                        this.$refs.policyno.$el.className = "el-form-item"; //输入框恢复
                        this.checkoutDataF = true;
                    }
                })
            },
            //查询清空
            clearAll() {
                this.filters.domSearch = [{
                    select: [],
                    content: ''
                }] //清空查询框;
            },
            /*银行——下拉*/
            corpChangeTwo(r) {
                if(!r || this.corptwolist.length > 0) return;
                this.corptwoLoading = true;

                let para = {
                    limit:30,
                    page:1,
                    corpcategory:'BANK'
                }
                getCorpList(para).then((res) => {
                    this.corptwolist = res.data.data.records;
                    this.corptwoLoading = false;
                });
            },
            // 银行，模糊查询
            corpChangeTwoSelect(query) {
                let para = {
                    limit:30,
                    page:1,
                    corpcategory:'BANK',
                    corpname: query,
                }
                this.corptwoLoading = true;
                getCorpList(para).then((res) => {
                    this.corptwoLoading = false;
                    this.corptwolist = res.data.data.records;
                });
            },
            // 保单公司（出单单位）——搜索下拉
            incorpChange(r) {
                if(!r || this.incorplist.length > 0) return;
                this.incorpLoading = true;
                 let para = {
                    limit:30,
                    page:1,
                    corpcategory:'INSU'
                }
                getCorpList(para).then((res) => {
                    this.incorplist = res.data.data.records;
                    this.incorpLoading = false;
                });
            },
            //改变出单日期 联动 生效日期、失效日期 
            issuedateChange(val) {
                this.editForm.effectivedate = util.addReduceDate(new Date(val), +1);//生效日期
                var dayjian = util.addReduceDate(new Date(val),0);
                this.editForm.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期

                this.editFormAgain.effectivedate = util.addReduceDate(new Date(val), +1);//生效日期
                this.editFormAgain.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期
            },
            //改变生效日期 同步 失效日期 有效期3年
            matchDate(val) {
                var dayjian = util.addReduceDate(new Date(val), -1);
                this.editForm.issuedate = dayjian;//出单日期
                this.editForm.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期

                this.editFormAgain.issuedate = dayjian;//出单日期
                this.editFormAgain.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期
            },
            // 选择到期日自动匹配生效日
            matchDateTwo(val) {
                var dayjian = util.addReduceDate(new Date(val), +1);
                this.editForm.effectivedate = util.getDateThreeYers(dayjian, -3);
                this.editFormAgain.effectivedate = util.getDateThreeYers(dayjian, -3);
            },

            
            // 有效 鼠标移入
            mouseoverChange(e) {
                if($(e.target).hasClass('icon-duigou')) {
                    $(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
                } else {
                    $(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
                }
            },
            // 有效 鼠标移除
            mouseoutChange(e) {
                if($(e.target).hasClass('icon-cha')) {
                    $(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
                } else {
                    $(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
                }
            },
            // 排序
            sortChange(col, prop, order) {
                let para = {
                    prop: col.prop,
                    order: col.order.substring(0, col.order.length - 6),
                }
                console.log(para);
                getSortList(para).then((res) => {});
            },
            /*设备型号——下拉*/
            moNameChange(r) {
                if(!r || this.moNamelist.length > 0) return;
                this.moNameLoading = true;
                getMoNameList().then((res) => {
                    this.moNamelist = res.data.data.records;
                    this.moNameLoading = false;
                });
            },
            //编辑—— 设备型号选中时自动获取设备分类
            getNameEdit() {
                for(var i = 0; i < this.moNamelist.length; i++) {
                    if(this.moNamelist[i].id == this.editForm.prodmodel) {
                        this.editForm.prodspec = this.moNamelist[i].prodspec;
                        this.editForm.prodcategory = this.moNamelist[i].prodcategory;
                    }
                }
            },
           
            /*保险类型——下拉*/
            insuranceChange(r) {
                if(!r || this.insurancelist.length > 0) return;
                this.insuranceLoading = true;
                getInsuranceInfoList().then((res) => {
                    this.insurancelist = res.data.data.records;
                    this.insuranceLoading = false;
                });
            },

            
            // iframe模板路径
            parseParams (url, data) {
                try {
                    let tempArr = [];
                    for (let i in data) {
                        if (data[i]) {
                            let key = i;
                            let value = data[i];
                            tempArr.push(key + '=' + value);
                        }
                    }
                    return `${url}?${tempArr.join('&')}`;
                } catch (err) {
                    return '';
                }
            },
            // 电子保单
            electronicPrint(index,row){
                let para = {
                    insucorpid:row.insurancecorpid,
                    isactive :1
                }
                getInsTemplate(para).then((res) => {
                    if (res.data.data.records.length == 0) {
                        this.$message({
                            message: '该保险公司暂无模板！请至【保单模板】中添加',
                            type: 'error'
                        });
                        this.bxDialogVisible = false;
                    }else{
                        this.bxDialogVisible = true;
                        let templateurl = res.data.data.records[0].templateurl
                        this.iframeSrc = this.parseParams((this.baseUrl+templateurl), row)
                    }
                });
            },
            //关闭当前电子保单
            closeDialog(){
                this.bxDialogVisible = false;
            },
            //显示 保险模板打印
            // print(data){
            //         // this.flowData.flowData = '';
            //         this.$refs.editForm.validate((valid) => {
            //         if(valid) {
            //             this.editLoading = true;
            //             let para = {
            //                 id: data.id,
            //                 policyno: this.editForm.policyno,
            //                 vehicleid: this.editForm.vehicleid,
            //                 vehicleplate: this.editForm.vehicleplate,
            //                 issuedate: util.formatDate.format(new Date(this.editForm.issuedate), 'yyyy-MM-dd'),
            //                 effectivedate: util.formatDate.format(new Date(this.editForm.effectivedate), 'yyyy-MM-dd'),
            //                 expiredate: this.editForm.expiredate,
            //                 price: this.editForm.price,
            //                 indemnitylimit: this.editForm.indemnitylimit,
            //                 receivingbankname: this.editForm.receivingbankname,
            //                 receivingbankid:this.editForm.receivingbankname,
            //                 vin: this.editForm.vin,
            //                 model: this.editForm.model,
            //                 color: this.editForm.color,
            //                 name: this.editForm.name,
            //                 gender: this.editForm.gender,
            //                 vehicleownercontact: this.editForm.vehicleownercontact,
            //                 addressHome: this.editForm.addresshome,
            //                 vehicleowneridcard: this.editForm.vehicleowneridcard,
            //                 prodspec: this.editForm.prodspec,
            //                 prodmodel: this.editForm.prodmodel,
            //                 prodnum: this.editForm.prodnum,
            //                 prodsnnum: this.editForm.prodsnnum,
            //                 insurancestatus: this.editForm.insurancestatus,
            //                 indemnitylimit: this.editForm.indemnitylimit,
            //                 insurancecorpid: this.editForm.insurancecorpname,
            //                 itype: this.editForm.itype,
            //                 insurancetype: this.editForm.insurancetype,
            //             }
            //             if(this.editFormId.insurancecorpname == this.editForm.insurancecorpname) {
            //                 para.insurancecorpid = this.editFormId.insurancecorpid;
            //             } else {
            //                 para.insurancecorpid = this.editForm.insurancecorpname;
            //             }
            //             if(this.editFormId.receivingbankname == this.editForm.receivingbankname) {
            //                 para.receivingbankid = this.editFormId.receivingbankid;
            //             } else {
            //                 para.receivingbankid = this.editForm.receivingbankname;
            //             }
            //             if(this.editFormId.insurancetype == this.editForm.insurancetype) {
            //                 para.insurancetype = this.editFormId.itype;
            //             } else {
            //                 para.itype = this.editForm.insurancetype;
            //             }
            //             printInsuranceInfo(para).then((res) => {
            //                 this.editLoading = false;
            //                 if(res.data.result.code == 0){
            //                     // this.flowData.flowData = res.data.data.flowData;
            //                     this.$message({
            //                         message: '提交成功',
            //                         type: 'success'
            //                     });
            //                     // 请求成功跳转打印页面，传参
            //                     this.bxDialogVisible = true;
            //                              this.$nextTick(function(){//向子级传参
            //                                     this.$refs.chinaLife.flowData = res.data.data;
            //                                     this.$refs.chinaPeopleIns.flowData = res.data.data;
            //                              })
            //                              console.log(res.data.data)
            //                 }
            //                 this.$refs['editForm'].resetFields();
            //                 this.editFormVisible = false;
            //                 this.GetInsurances();
            //             });
            //         }
            //     });
            // },
            //详情查看
            formDetailHandle(message, idinfo) {
                this.formDialogTableVisible = true;
                let para = {
                    id: idinfo,
                }
                getMoreInfo(para).then((res) => {
                        this.moreDetailsData = res.data.data;
                });
                let paraTwo = {
                    insuranceid: idinfo,
                }
                getRecordsInfo(paraTwo).then((res) => {
                        this.operationData = res.data.records;
                });
                
            },
            // 导出
            handleExport(){
                let para = {
                    domSearch:this.filters.domSearch
                }
                axios({
                      method: 'get',
                      url: '/insurance/insuranceinfo/query/export',
                      params:para,
                      headers: {
                          'Authorization':'Bearer ' + getToken()
                      },
                      responseType: 'blob'
                }).then((response) => {
                      let blob = response.data;//得到返回数据
                      let a = document.createElement('a');//创建a标签
                      let fileURL = (window.URL || window.webkitURL).createObjectURL(new Blob([blob]));//url路径
                      a.setAttribute('href', fileURL)
                      a.setAttribute('target', '_self')
                      a.setAttribute('download', 'excel.xlsx');//设置download属性
                      document.body.appendChild(a);//插入到文档中并click
                      a.click();//插入到文档中并click
                }).catch((error) => {
                    console.log(error)
                })
            },
            // 车架号关联
            querySearchVin(queryString, cb) {
                let para = {
                        VIN: queryString,
                    },
                    vinNameArray = [];
                getVehicleSearchInfoList(para).then((res) => {
                    res.data.data.records.forEach(function(item, index) {
                        vinNameArray.push({
                            value: item.VIN,
                        });
                    });
                    cb(vinNameArray);
                });
            },
            handleSelectVin(item) {
                this.editForm.VIN = item.value;
                this.addForm.VIN = item.value;
            },
            //有效无效转换
            isactiveFomat(row, col) {
                return row.isactive == 1 ? '是' : row.isactive != undefined ? '否' : '未知';
            },
            // 有效无效颜色切换
            tableRowClassName(row, index) {
                if(row.isactive == 0) {
                    return 'warning-row';
                }
                return '';
            },
            // 验证备注字数
            checkWords(){
                this.noteForm.words = this.noteForm.remark.length;
                if (this.noteForm.remark.length > 500) {
                    this.$refs.remark.$el.className = "el-form-item el-form-item--medium is-error"; //输入框标红
                    this.checkWordsStatus = false;
                }else{
                    this.$refs.remark.$el.className = "el-form-item el-form-item--medium"; //输入框恢复
                    this.checkWordsStatus = true;
                }
            },
            // 操作备注弹窗
            handleNote: function(index, row) {
                this.noteDialogVisible = true;
                this.noteForm.remark = '';//初始化
                this.noteForm.words = 0;
                // 操作标题
                switch (index) {
                    case 0:
                        this.noteTitle = '报案登记情况'
                        break;
                    case 1:
                        this.noteTitle = '退保完成情况'
                        break;
                    case 2:
                        this.noteTitle = '理赔完成情况'
                        break;
                    case 3:
                        this.noteTitle = '理赔失败情况'
                        break;
                    case 4:
                        this.noteTitle = '撤销报案情况'
                        break;
                }
                // 存储
                this.insuranceId = row.id;
                this.eventType = index == 0 ? 1 : index == 1 ? 3 : index == 2 ? 2 : index == 3 ? 2 : index == 4 ? 1 : ''; // 1报案，2理赔，3退保
                this.eventStatus = index == 0 || index == 1 || index == 2 ? 1 : index == 3 || index == 4 ? 0 : ''; // 1正常，0撤销
            },
            // 操作备注提交
            remarkConfirm(){
                if (this.checkWordsStatus) {
                    let para = {
                        insuranceid:this.insuranceId,
                        eventdesc:this.noteForm.remark,
                        eventtype:this.eventType,
                        eventstatus:this.eventStatus,
                    }
                    handleInsurance(para).then((res) => {
                        this.noteDialogVisible = false;
                        this.GetInsurances();
                    })
                }else {
                    this.$message({
                        message: '字数超限制！',
                        type: 'error'
                    });
                }
            },
            // 有效按钮切换状态
            handleChange: function(index, row) {
                this.$confirm('确认设置该条记录的状态吗？', '提示', {
                    type: 'warning'
                }).then(() => {
                    let para = {
                        id: row.id,
                        isactive: 0,//设为无效
                        status: 1,//设为无效
                }
                    if (row.status == 1) {//保险状态已无效时——设为有效
                       para.isactive = 2;
                       para.status = 2;
                    }
                    modifyInsuranceInfo(para).then((res) => {
                        this.$message({
                            message: '设置成功',
                            type: 'success'
                        });
                        row.isactive = para.isactive;
                        this.GetInsurances();
                    }).catch(() => {
                        this.listLoading = false;
                    });
                });
            },
            // 废除保单
            handleAbate: function(index, row) {
                this.$prompt('请输入废除保单备注', '提示', {
                              confirmButtonText: '确定',
                              cancelButtonText: '取消',
                        }).then(({ value }) => {
                                let para = {
                                    id: row.id,
                                    remark:value,
                                }
                                delInsuranceInfoList(para).then((res) => {
                                if (res.data.result.code ==0 ) {
                                this.$message({
                                    message: '废除成功',
                                    type: 'success'
                                });
                                this.GetInsurances();
                            }
                        }).catch(() => {
                            this.listLoading = false;
                        });
                        }).catch(() => {
                              this.$message({
                                type: 'info',
                                message: '取消输入'
                              });       
                        });
            },
            //时间转换1
            dateFormatter: function(row, col) {
                if(row.issuedate == "" || row.issuedate == undefined) return;
                return util.formatDate.format(new Date(row.issuedate), 'yyyy-MM-dd');
            },
            //时间转换2
            dateFormatterSecond: function(row, col) {
                if(row.effectivedate == "" || row.effectivedate == undefined) return;
                return util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd');
            },
            //时间转换3
            dateFormatterThird: function(row, col) {
                if(row.createdate == "" || row.createdate == undefined) return;
                return util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd hh:mm:ss');
            },
            //时间转换4
            dateFormatterForth: function(row, col) {
                if(row.updatedate == "" || row.updatedate == undefined) return;
                return util.formatDate.format(new Date(row.updatedate), 'yyyy-MM-dd hh:mm:ss');
            },
            // 保险状态转换
            statusFormatter: function(row, col) {
                return row.status == 'INVALID' ? '作废' : row.status == 'NORMAL' ? '正常' : '暂无';
            },
            //切换当前页
            handleCurrentChange(val) {
                this.currentPage = val;
                this.handleQuerySelect();
                // this.GetInsurances();
            },
            //切换每页显示数量
            handleSizeChange(val) {
                this.pageSize = val;
                this.GetInsurances();
            },
            // 添加查询条件
            addSelect() {
                this.filters.domSearch.push({
                    select: [],
                    content: ''
                });
            },
            // 移除查询条件
            removeSelect(index) {
                this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
            },
            //搜索按钮——模糊查询
            handleQuerySelect() {
                let para = {
                    page: this.currentPage,
                    limit: this.pageSize,
                    domSearch: this.filters.domSearch,
                };
                this.listLoading = true;
                getInsuranceInfoList(para).then((res) => {
                    this.total = res.data.data.total;
                    this.insurances = res.data.data.records;
                    this.listLoading = false;
                }).catch((error) => {
                    this.listLoading = false;
                });
            },
            //获取保单列表
            GetInsurances() {
                let para = {
                    page: this.currentPage,
                    limit: this.pageSize,
                    domSearch: this.filters.domSearch,
                };
                this.listLoading = true;
                getInsuranceInfoList(para).then((res) => {
                    this.total = res.data.data.total;
                    this.insurances = res.data.data.records;
                    this.insurances.dateString = '';
                    this.listLoading = false;
                }).catch((error) => {
                    this.listLoading = false;
                });
            },

            //删除
            handleDel(index, row) {
                this.$confirm('确认删除该记录吗?', '提示', {
                    type: 'warning'
                }).then(() => {
                    this.listLoading = true;
                    //NProgress.start();
                    let para = {
                        ids: row.ID,
                        method: "delete"
                    };
                    removeInsuranceInfo(para).then((res) => {
                        this.listLoading = false;
                        //NProgress.done();
                        if (res.data.result.code ==0 ) {
                            this.$message({
                                message: '删除成功',
                                type: 'success'
                            });
                            this.GetInsurances();
                        }
                    });
                }).catch(() => {

                });
            },

            // 重新出单
            handleAgain: function(index, row) {
                $(".is-error").removeClass('is-error'); //清空验证时的红框
                this.editFormVisibleAgain = true;
                this.editFormAgain = {
                    id: row.id,
                    vehicleowner: row.vehicleowner,
                    vehicleownercontact: row.vehicleownercontact,
                    vehicleowneridcard: row.vehicleowneridcard,
                    addresshome: row.addresshome,
                    gender: row.gender,
                    policyno: '',
                    vehicleid: row.vehicleid,
                    vehicleplate: row.vehicleplate,
                    vehiclevin: row.vehiclevin,
                    vehiclemodel: row.vehiclemodel,
                    vehiclecolor: row.vehiclecolor,
                    vehicleenginenum:row.vehicleenginenum,
                    insurancetype: row.insurancetype,
                    issuedate: util.formatDate.format(new Date(row.issuedate), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd'),
                    expiredate: row.expiredate == undefined ? null : util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd'),
                    price: row.price,
                    indemnitylimit: row.indemnitylimit,
                    receivingbankname: row.receivingbankname,
                    insurancecorpname: row.insurancecorpname,
                    insurancecorpid: row.insurancecorpid,
                    receivingbankid: row.receivingbankid,
                    createdate:util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd'),
                    remark:row.remark,
                    serialnum:row.serialnum,
                }
                this.editFormAgainId = {
                    insurancecorpid: row.insurancecorpid,
                    insurancecorpname: row.insurancecorpname,
                    receivingbankid: row.receivingbankid,
                    receivingbankname: row.receivingbankname,
                    itype: 'THEFT',
                    insurancetype: '盗抢险',
                }
                this.thisInput = this.editFormAgain.policyno; //将当前验证的字段 已获得的值存入
            },
            editSubmitAgain() {
                this.$refs.editFormAgain.validate((valid) => {
                    if(valid) {
                        this.editLoading = true;
                        let para = {
                            policyno: this.editFormAgain.policyno,
                            vehicleowner: this.editFormAgain.vehicleowner,
                            vehicleownercontact: this.editFormAgain.vehicleownercontact,
                            vehicleowneridcard: this.editFormAgain.vehicleowneridcard,
                            gender: this.editFormAgain.gender,
                            addressHome: this.editFormAgain.addresshome,
                            vehicleid: this.editFormAgain.vehicleid,
                            vehiclevin: this.editFormAgain.vehiclevin,
                            vehiclemodel: this.editFormAgain.vehiclemodel,
                            vehiclecolor: this.editFormAgain.vehiclecolor,
                            vehicleenginenum:this.editFormAgain.vehicleenginenum,
                            vehicleplate: this.editFormAgain.vehicleplate,
                            issuedate: util.formatDate.format(new Date(this.editFormAgain.issuedate), 'yyyy-MM-dd'),
                            effectivedate: util.formatDate.format(new Date(this.editFormAgain.effectivedate), 'yyyy-MM-dd'),
                            expiredate: this.editFormAgain.expiredate,
                            price: this.editFormAgain.price,
                            indemnitylimit: this.editFormAgain.indemnitylimit,
                            receivingbankid:this.editFormAgain.receivingbankname,
                            insurancecorpid: this.editFormAgain.insurancecorpname,
                            insurancetype: this.editFormAgain.insurancetype,
                            createdate:util.formatDate.format(new Date(this.editFormAgain.createdate), 'yyyy-MM-dd'),
                            remark:this.editFormAgain.remark,
                            serialnum:this.editFormAgain.serialnum,
                        }
                        if(this.editFormAgainId.insurancecorpname == this.editFormAgain.insurancecorpname) {
                            para.insurancecorpid = this.editFormAgainId.insurancecorpid;
                        } else {
                            para.insurancecorpid = this.editFormAgain.insurancecorpname;
                        }
                        if(this.editFormAgainId.receivingbankname == this.editFormAgain.receivingbankname) {
                            para.receivingbankid = this.editFormAgainId.receivingbankid;
                        } else {
                            para.receivingbankid = this.editFormAgain.receivingbankname;
                        }
                        if(this.editFormAgainId.insurancetype == this.editFormAgain.insurancetype) {
                            para.insurancetype = this.editFormAgainId.itype;
                        } else {
                            para.itype = this.editFormAgain.insurancetype;
                        }
                        if (this.checkoutDataF) {
                            againInsuranceInfo(para).then((res) => {
                                this.editLoading = false;
                                this.$message({
                                    message: '重新出单成功',
                                    type: 'success'
                                });
                                this.$refs['editFormAgain'].resetFields();
                                this.editFormVisibleAgain = false;
                                this.GetInsurances();
                            });
                        }else{
                                this.editLoading = false;
                                this.$message({
                                    message: '请先处理标红信息！',
                                    type: 'error'
                                });
                        }
                    }
                });
            },
            //显示编辑界面
            handleEdit(index, row) {
                $(".is-error").removeClass('is-error'); //清空验证时的红框
                this.editFormVisible = true;
                this.editForm = {
                    id: row.id,
                    policyno: row.policyno,
                    vehicleid: row.vehicleid,
                    vehicleplate: row.vehicleplate,
                    itype: 'THEFT',
                    insurancetype: row.insurancetype,
                    issuedate: util.formatDate.format(new Date(row.issuedate), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd'),
                    expiredate: row.expiredate == undefined ? null : util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd'),
                    price: row.price,
                    indemnitylimit: row.indemnitylimit,
                    receivingbankname: row.receivingbankname,
                    vin: row.vin,
                    model: row.model,
                    color: row.color,
                    name: row.name,
                    gender: row.gender,
                    vehicleownercontact: row.vehicleownercontact,
                    addresshome: row.addresshome,
                    vehicleowneridcard: row.vehicleowneridcard,
                    prodspec: row.prodspec,
                    prodmodel: row.prodmodel,
                    prodnum: row.prodnum,
                    prodsnnum: row.prodsnnum,
                    insurancecorpname: row.insurancecorpname,
                    insurancestatus: row.insurancestatus,
                    insurancecorpid: row.insurancecorpid,
                    receivingbankid: row.receivingbankid,
                    indemnitylimit: row.indemnitylimit,
                    isactive:row.isactive == 0 ? '无效' : row.isactive == 1 ? '待生效' : row.isactive == 2 ? '已生效' : '未知',
                    status:row.status == 1 ? '已无效' : 
                                row.status == 2 ? '生效中' : 
                                row.status == 3 ? '待生效' : 
                                row.status == 4 ? '已退保' : 
                                row.status == 5 ? '已报案' : 
                                row.status == 6 ? '已理赔' : 
                                row.status == 7 ? '已过期' : '未知'
                }
                this.editFormId = {
                    insurancecorpid: row.insurancecorpid,
                    insurancecorpname: row.insurancecorpname,
                    receivingbankid: row.receivingbankid,
                    receivingbankname: row.receivingbankname,
                    itype: 'THEFT',
                    insurancetype: '盗抢险',
                }
                this.thisInput = this.editForm.policyno; //将当前验证的字段 已获得的值存入
            },
            //编辑
            editSubmit() {
                if ($(".is-error").hasClass('is-error')) return;//如果保单号重复
                this.$refs.editForm.validate((valid) => {
                    if(valid) {
                        this.editLoading = true;
                        let para = {
                            id: this.editForm.id,
                            policyno: this.editForm.policyno,
                            vehicleid: this.editForm.vehicleid,
                            vehicleplate: this.editForm.vehicleplate,
                            issuedate: util.formatDate.format(new Date(this.editForm.issuedate), 'yyyy-MM-dd'),
                            effectivedate: util.formatDate.format(new Date(this.editForm.effectivedate), 'yyyy-MM-dd'),
                            expiredate: this.editForm.expiredate,
                            price: this.editForm.price,
                            indemnitylimit: this.editForm.indemnitylimit,
                            receivingbankid:this.editForm.receivingbankname,
                            vin: this.editForm.vin,
                            model: this.editForm.model,
                            color: this.editForm.color,
                            name: this.editForm.name,
                            gender: this.editForm.gender,
                            vehicleownercontact: this.editForm.vehicleownercontact,
                            addressHome: this.editForm.addresshome,
                            vehicleowneridcard: this.editForm.vehicleowneridcard,
                            prodspec: this.editForm.prodspec,
                            prodmodel: this.editForm.prodmodel,
                            prodnum: this.editForm.prodnum,
                            prodsnnum: this.editForm.prodsnnum,
                            insurancestatus: this.editForm.insurancestatus,
                            indemnitylimit: this.editForm.indemnitylimit,
                            insurancecorpid: this.editForm.insurancecorpname,
                            insurancetype: this.editForm.insurancetype,
                        }
                        if(this.editFormId.insurancecorpname == this.editForm.insurancecorpname) {
                            para.insurancecorpid = this.editFormId.insurancecorpid;
                        } else {
                            para.insurancecorpid = this.editForm.insurancecorpname;
                        }
                        if(this.editFormId.receivingbankname == this.editForm.receivingbankname) {
                            para.receivingbankid = this.editFormId.receivingbankid;
                        } else {
                            para.receivingbankid = this.editForm.receivingbankname;
                        }
                        if(this.editFormId.insurancetype == this.editForm.insurancetype) {
                            para.insurancetype = this.editFormId.itype;
                        } else {
                            para.itype = this.editForm.insurancetype;
                        }
                        modifyInsuranceInfo(para).then((res) => {
                            this.editLoading = false;
                            this.$message({
                                message: '编辑成功',
                                type: 'success'
                            });
                            this.$refs['editForm'].resetFields();
                            this.editFormVisible = false;
                            this.GetInsurances();
                        });
                    }
                });
            },
            selsChange(sels) {
                this.sels = sels;
            },
        },
        created() {
            this.GetInsurances();
        }

    }