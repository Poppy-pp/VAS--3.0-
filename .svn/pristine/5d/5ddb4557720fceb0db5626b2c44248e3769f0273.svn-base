    import util from 'utils/tools';
    import async from 'async';
    import gdmap3 from '@/views/map/gdmap';
    import { getTodoInfoList, getFormCount, getInstallPositionCode } from './service';
 export default {
        props:['windowOutHeight'],
        components: {
            gdmap3
        },
        data() {
            return {
                //搜索 筛选信息
                filters: {
                    domSearch: [{
                        select: ['orderno'],
                        content: ''
                    }], //查询框
                    timeScope: '',
                },
                // 开始安装弹窗
                startInstallDialogVisible:true,
                picLargedialogVisible:false,//图片放大
                picLargeImageUrl:'',//图片路径
                startForm:{
                    reson:'',
                },
                startFormRules:{},
                tableData:[],
                // 完成安装弹窗
                endInstallDialogVisible:false,
                codeloading:false,
                InstallPositionArray: [],//设备安装位置
                endForm:{
                    value:'',
                },
                endFormRules:{},
                activities: [{
                  content: '上线质量',
                }, {
                  content: '定位方式',
                }, {
                  content: '卫星或基站数量',
                }, {
                  content: '卫星或基站型号强度',
                }, {
                  content: '定位地址',
                }],


                realTimeRefreshLoading:false,
                util:util, 
                //车辆信息修改表单
                vehicleEditFormInfos:{
                    receivingbankid:'',
                    carPcolor:'蓝色',
                    cartype:1,
                    buycarmanprice:1
                },
                //新装数量
                fromNum:{
                    num0:0,
                    num1:0,
                    num2:0,
                    num3:0,
                    num4:0,
                    num5:0,
                },
                delorder:{//废单
                    orderReasonDialogVisible:false,
                    reson:'',
                    delOrderLoading:false,
                    processInstanceId:'',
                },
                expandLoading:false,
                copsUerLoading:false,
                userDataList:[],
                stolen:[{value:"已购买保险",id:0},{value:"未购买保险",id:1}],
                //编辑订单
                editFormAddLoading:false,
                //补传照片是否显示弹窗
                uploadDialogVisibleImg:false,
                //车牌颜色
                carPsalerData:[{name:"黄绿双拼色"},{name:"黑色"},{name:"黄色"},{name:"蓝色"},{name:"白色"},{name:"浅变绿色色"}],
                //车主信息
                ownEditFormInfos:{},
                //修改订单tabs切换
                editFormdialogActiveName:'1',
                //修改订单弹窗
                editFormDialogTableVisible:false,
                //保险出单弹窗是否显示
                successDialogTableVisible:false,
                //查看照片 弹窗
                showDialogVisibleImg:false,
                //安装信息
                dialogActiveNameImg:'1',
                //拒绝理由弹窗备注
                rejectDialogVisible:false,
                //备注弹窗标题
                rejectTitle:"拒绝理由",
                //显示子类图片弹窗
                dialogVisible:false,
                //显示图片url
                dialogImageUrl:'',
                //是否显示派单弹窗
                clerkOrderDialogTableVisible:false,
                //是否显示安装弹窗
                equipmentDialogTableVisible:false,
                //默认显示订单详情弹出
                dialogActiveName:'1',
                //当前状态
                stepState:0,
                //公司下拉数据对象数据初始化
                copName:[],
                //公司下拉loading初始化
                copLoading:false,
                //列表详情操作默认显示那个
                activeName: '1',
                //操作记录
                opHistoryData:[],
                historyListLoading:false,
                //处理表格列表数据
                todo:[],
                indDe:0,
                //当前新装状态值
                curStateData:{},
                //新装弹窗详情显示
                dialogFormData:{
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    installDetails:'',
                    corporateInfo:{},
                    declarEmployee:{},
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    }
                },
                //新装弹窗详情显示
                editFormData:{
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    installDetails:'',
                    corporateInfo:{},
                    declarEmployee:{},
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    }
                },
                isExpandeds:true,
                //拒绝备注
                rejectRemarks:'',
                //拒绝类型单子
                sumbitType:'',
                //静态数据详情展现
                ruleFormStatic:{
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    },
                    pictures:[]
                },
                expandRuleFormStatic:{
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    },
                    pictures:[]
                },
                //受理银行数组
                salerData:[],
                //loading受理银行下拉
                receLoading:false,
                //当前流程任务id
                curTaskId:'',
                viewer:'',
                total: 0,
                currentPage: 0,
                //拒绝理由提交加载
                addLoading:false,
                curLinkid:'',
                //是否是弹窗详情 不是为1 是为2
                clickState:1,
                
                listLoading: false,
                cvlistLoading:false,
                accept:"jpg,png,jpeg",
                pageSize:15,
                editPiceForm:{
                    id:'',
                    type:'edit'
                },
                profilters: {
                    search_key  : ''
                },
                replaceDeviceData:[],
                deviceDialogVisible:false,
                dpageSize:10,
                dcurrentPage:0,
                cdtotal:0,
                installUserId:'',
                citem:'',
                cindex:'',
                carPicLoading:false,
                carPicList:[],
                carPicValue:'',
                deviceSectList:[],
                deviceLinkIndex:'',
                deviceLinkid:'',
                deviceIndex:0

            }    
        },
        methods: {
            // -------------------------------------------------------------------施工节点---------------------------------------------------------------------------------
            // 放大图片
            handlePictureCardPreview(file) {
                $(".v-modal").css('height','0');//隐藏图片的dialog遮罩层
                this.picLargeImageUrl = file.url;
                this.picLargedialogVisible = true;
            },
            // 关闭放大图片
            closeLargePic(){
                $(".v-modal").css('height','100%');//显示外部dialog遮罩层
            },
            handleRemove(file, fileList) {
                console.log(file, fileList);
            },
            // 开始安装下一步
            nextStep(){
                this.startInstallDialogVisible = false;
                this.endInstallDialogVisible = true;
            },
            // 完成安装上一步
            previousStep(){
                this.startInstallDialogVisible = true;
                this.endInstallDialogVisible = false;
            },
            //安装位置初始化
            changeInstallDecode(r) {
                if(!r || this.InstallPositionArray.length > 0) return;
                this.codeloading = true;
                getInstallPositionCode().then((res) => {
                    this.InstallPositionArray = res.data.data.records;
                    this.codeloading = false;
                });
            },
            // 完成安装
            confirmFinishInstall(){

            },

            //改变设备记录当前设备位置
            chageDeviceSect(item){
                this.deviceLinkid = item.split(",")[0];
                this.deviceIndex = item.split(",")[1];
            },
            //获取车辆上传照片位置
            changeCarPicLac(r){
                if(!r || this.carPicList.length > 0) return;
                this.carPicLoading = true;
                let para = {
                    showCount:1000
                }
                getCarPicLocation(para).then((res) => {
                    this.carPicLoading = false;
                    if(res.data.result.code == 0){
                        this.carPicList = res.data.data.records;
                    }
                });
            },
            deviceClickHandle(row, event, column){
                this.$refs.dialogChild.rdeviceClickHandle(row, event, column,this.citem,this.cindex);
                this.deviceDialogVisible = false;
            },
            showDeviceXzReplace(installUserId,olditem,index){
                this.installUserId = installUserId;
                this.citem = olditem;
                this.cindex = index;
                this.deviceDialogVisible = true;
                this.replaceDevceinfo();
            },
            //切换当前页
            dhandleCurrentChange(val) {
                this.dcurrentPage = val;
                this.replaceDevceinfo();
            },
              //切换每页显示数量
              dhandleSizeChange(val) {
                  this.dpageSize = val;
                  this.replaceDevceinfo();
              },
            //替换设备查询
            replaceDevceinfo(){
                if(!this.installUserId){
                    this.$message({
                        showClose: true,
                        message: '未找到安装人员信息！',
                        type: 'error'
                    });
                    return;
                }
                let para = {
                    userid:this.installUserId,
                    showCount:this.dpageSize,
                    E_STATUS:"在库",
                    search_key:this.profilters.search_key,
                    E_INSURANCEFLAG:this.citem.E_INSURANCEFLAG == 'N'?'':this.citem.E_INSURANCEFLAG,
                    E_NORMALFLAG:this.citem.E_NORMALFLAG == 'N'?'':this.citem.E_NORMALFLAG
                };
                this.cvlistLoading = true;
                getMyDeviceInfo(para).then((res) => {
                    this.cvlistLoading = false;
                    if(res.data.result.code == 0){
                        this.replaceDeviceData = res.data.data.records;
                        this.cdtotal = res.data.data.totalResult;
                    }else{
                        this.replaceDeviceData = [];
                        this.cdtotal = 0;
                    }
                }).catch((error) => {
                    this.cvlistLoading = false;
                });
            },
            //关闭子类窗体 清空子类数据
            closeDialogEquipmentInstall(){
                this.$refs.dialogChild.resetForm();
            },
            comfirDelOrder(){
                let para = {
                    id:this.delorder.processInstanceId,
                    reson:this.delorder.reson
                }
                this.delorder.delOrderLoading = true;
                deleteProcess(para).then((res) => {
                    this.delorder.delOrderLoading = false;
                    this.delorder.orderReasonDialogVisible = false;
                    this.getTodo();
                });
            },
            //废除订单
            deleteOrder(index,row){
                this.delorder.processInstanceId = row.processInstanceId;
                this.delorder.orderReasonDialogVisible = true;
            },
            //补传 订单传照片删除
            carHandleRemove(file, fileList) {
              // this.installPic(fileList,1);
            },
            //删除订单图片
            removeBusiPicture(id,pindex,cindex){
                this.$confirm('确认删除当前订单图片吗?', '提示', {
                    type: 'warning'
                }).then(() => {
                    let para = {
                        ids:id,
                        method:"delete"
                    };
                    removeBusiPicture(para).then((res) => {
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '删除照片成功！',
                                type: 'success'
                            });
                            if(this.dialogActiveNameImg == '1'){
                                this.ruleFormStatic.installDetails[pindex].pictures.splice(cindex,1);
                            }
                            if(this.dialogActiveNameImg == '2'){
                                this.ruleFormStatic.pictures.splice(cindex,1);
                            }
                        }

                    });
                });
            },
             //修改订单图片
             modifyBusiPicture(id){
                //启动选择文件界面
                $(this.$refs.orderUpload.$children[0].$el).click();
                this.editPiceForm.id = id;
                this.editPiceForm.type = 2;
            },
            //
            beforeUpload(file){
                if(!this.deviceLinkid && this.dialogActiveNameImg == '1'){
                    this.$message({
                        showClose: true,
                        message: '请选择设备',
                        type: 'error'
                    });
                    return false
                }
                if(!this.carPicValue){
                    this.$message({
                        showClose: true,
                        message: '请选择照片位置',
                        type: 'error'
                    });
                    return false;
                }else{
                    nanobar.go(70);
                }
            },
            //补传 订单传照片成功
            carHandleSuccess(response, file, fileList){
                let para = {
                    pictype:this.dialogActiveNameImg == '1'?'NBI':'NB',
                    linkid:this.dialogActiveNameImg == '1'?this.deviceLinkid:this.curLinkid,
                    piclink:response,
                    picdesc:this.carPicValue
                }
                busiPicture(para).then((res) => {
                    let picRes = res.data.data;
                    nanobar.go(100);
                    if(res.data.result.code == 0){
                        if(this.dialogActiveNameImg == '1'){
                            this.ruleFormStatic.installDetails[this.deviceIndex].pictures.push(picRes);
                        }
                        if(this.dialogActiveNameImg == '2'){
                            this.ruleFormStatic.pictures.push(picRes);
                        }
                    }
                });
            },
            //完成派单操作
            successSendForm(index,row){
                this.clerkOrderDialogTableVisible = true;
                this.clickState = 3;
                this.getFormData(row);
            },
            //完成安装操作
            successWorkForm(index,row){
                this.equipmentDialogTableVisible = true;
                this.clickState = 3;
                this.getFormData(row);
            },
            //修改安装信息
            editWorkForm(index,row){
                this.equipmentDialogTableVisible = true;
                this.clickState = 3;
                this.getFormData(row);
            },
            // 查看安装人员轨迹
            showDraw(index,row){
                window.open('http://mqtt.wwvas.com:9201/Map/UserHistoryRoute?id=' + row.flowData.work_user_id);
            },
            //修改订单信息
            editFormInfo(index,row){
                this.editFormDialogTableVisible = true;
                this.clickState = 4;
                this.getFormData(row);
            },
            comfirEditFormInfo(){
                this.editFormAddLoading = true;
                if(this.editFormdialogActiveName == '1'){
                    let para = {
                        id:this.editFormData.id,
                        salername:this.editFormData.salername,
                        salermobile:this.editFormData.salermobile
                    }
                    editDeclarationInfo(para).then((res) => {
                        this.editFormAddLoading = false;
                        this.editFormDialogTableVisible = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '订单信息修改成功！',
                                type: 'success'
                            });
                        }
                    });
                    return;
                }
                if(this.editFormdialogActiveName == '2'){
                    let para = {
                        id:this.ownEditFormInfos.id,
                        idcard:this.ownEditFormInfos.idcard,
                        name:this.ownEditFormInfos.name,
                        mobile:this.ownEditFormInfos.mobile
                    }
                    editOwnerInfo(para).then((res) => {
                        this.editFormAddLoading = false;
                        this.editFormDialogTableVisible = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '车主信息修改成功！',
                                type: 'success'
                            });
                        }
                    });
                    return;
                }
                if(this.editFormdialogActiveName == '3'){
                    let para = {
                        id:this.vehicleEditFormInfos.id,
                        licenseplatenum:this.vehicleEditFormInfos.licenseplatenum
                    }
                    editVehicleInfo(para).then((res) => {
                        this.editFormAddLoading = false;
                        this.editFormDialogTableVisible = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '车辆信息修改成功！',
                                type: 'success'
                            });
                        }
                    });
                    return;
                }
            },
            //初始化修改订单信息
            initEditFormInfo(data){
                //所有订单信息
                this.editFormData = data;
                this.editFormData.id = data.id;
                //车主信息
                this.ownEditFormInfos = data.ownerInfo;
                this.ownEditFormInfos.carmantype = 1;
                this.ownEditFormInfos.id = data.ownerInfo.id;
                /*车辆颜色*/
                if(data.vehicleInfo){
                    this.vehicleEditFormInfos = data.vehicleInfo;
                    this.vehicleEditFormInfos.id = data.vehicleInfo.id;
                    this.vehicleEditFormInfos.carPcolor = '蓝色';
                    this.vehicleEditFormInfos.hastheftinsurance = parseInt(data.vehicleInfo.hastheftinsurance) == 1 ? 1 : 2;;
                    if(data.vehicleInfo.receivingbank){
                        this.vehicleEditFormInfos.receivingbankid = data.vehicleInfo.receivingbank.corpname;
                        this.vehicleEditFormInfos.corpname = data.vehicleInfo.receivingbank.id;
                    }
                    this.vehicleEditFormInfos.cartype = 1;
                    this.vehicleEditFormInfos.buycarmanprice = 1;
                }
            },
            //操作显示子类弹窗
            changeDialogImg(file){
                this.dialogImageUrl = file.url;
                this.dialogVisible = true;
            },
            //输入关键字查询员工
            remoteGsMethod(query){
                if (query !== '') {
                    let para = {
                        employeename:query
                    };
                    this.loading = true;
                    getDeptManagerInfoList(para).then((res) => {
                        this.userDataList = res.data.data.records;
                        this.copsUerLoading = false;
                    });
                } else {
                    let para = {
                        showCount:15
                    };
                    getDeptManagerInfoList(para).then((res) => {
                        this.userDataList = res.data.data.records;
                        this.copsUerLoading = false;
                    });
                }
            },
            //业务员下拉查询
            changeUserCop(r){
                if(!r || this.userDataList.length > 0) return;
                this.copsUerLoading = true;
                let para = {
                    showCount:10000
                };
                getDeptManagerInfoList(para).then((res) => {
                    this.userDataList = res.data.data.records;
                    this.copsUerLoading = false;
                });
            },
            //操作公司下拉查询
            changeCop(r){
                if(!r || this.copName.length > 0) return;
                this.copLoading = true;
                let para = {
                    showCount:1000
                }
                getCorpNameList(para).then((res) => {
                    this.copName = res.data.data.records;
                    this.copLoading = false;
                });
            },
            //实时获取设备位置 和 在线情况
            realTimeRefreshPro(gmapname){
                let _this = this,
                pro = _this.ruleFormStatic,
                len = pro.installDetails.length;
                console.log(pro)
                if(_this.$refs[gmapname]) _this.$refs[gmapname].clearMap();
                if(len > 0){
                    let i = _this.indDe,
                    para = {id:pro.installDetails[i].packInfo.E_PRODUNUM};
                    _this.realTimeRefreshLoading = true;
                    async.waterfall([
                        function(callback) {
                            cldeviceIsOnstate(para).then((res) => {
                                let data = res.data.data.realdata;
                               
                                callback(null, data);
                            });
                            
                        },
                        function(data, callback) {
                            if(data){
                                if(data.lng == 0 || data.lat == 0){
                                    _this.ruleFormStatic.installDetails[i].curaddress = "无定位";
                                    callback(null, data);
                                }else{
                                    _this.$refs[gmapname].getAddress(util.transformWGStoGCJ(data.lng,data.lat),para.id,(res)=>{
                                        _this.ruleFormStatic.installDetails[i].curaddress = res;
                                        callback(null, data);
                                    });
                                }
                            }else{
                                _this.ruleFormStatic.installDetails[i].curaddress = "无定位";
                                callback(null, data);
                            }
                        },
                    ], function (err, data) {
                        console.log(data)
                        if(data){
                            switch(data.istate){
                                case 0:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "行驶";
                                break;
                                case 1:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "离线";
                                break;
                                case 2:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "停车";
                                break;
                                case 3:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "报警";
                                break;
                                case 4:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "无效定位";
                                break;
                                case 5:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "未定位";
                                break;
                            }
                            _this.ruleFormStatic.installDetails[i].recvtime = data.recvtime;
                        }else{
                            _this.ruleFormStatic.installDetails[i].curaddress = "无定位";
                            _this.ruleFormStatic.installDetails[i].curonlinestatus ="未在线";
                        }
                         _this.realTimeRefreshLoading = false;
                        _this.indDe++;
                        if(_this.indDe < len) _this.realTimeRefreshPro(gmapname);
                        if(_this.indDe == len) _this.indDe = 0;
                    });
                }
            },
            //操作公司下拉 点击返回value值
            changeVal(item){
            },
            //受理银行查询
            receivinList(r){
                if(!r || this.salerData.length > 0) return;
                let para = {
                    corptype:'BANK'
                };
                this.receLoading = true;
                searchCorpNameList(para).then((res) => {
                    this.salerData = res.data.data.records;
                    this.receLoading = false;
                });
            },
            /*提供车辆颜色选择建议*/
            querySearchColor(queryString, cb){
                let tempColor = [
                {value: "红色"},
                {value: "白色"},
                {value: "黑色"},
                {value: "蓝色"},
                {value: "银色"},
                {value: "绿色"},
                {value: "棕色"},
                {value: "珍珠白"},
                {value: "深海蓝"},
                {value: "火焰红"},
                {value: "钛空金"},
                {value: "月光银"},
                {value: "象牙白"},
                {value: "水晶紫"},
                {value: "碧玉黑"},
                ],
                restaurants = this.tempColor,
                results = queryString ? tempColor.filter(this.createFilter(queryString)) : tempColor;
                // 调用 callback 返回建议列表的数据
                cb(results);
            },
            //改变新装状态获取对应数据列表
            changeStateHandle(v){
                if(v == 0){
                    this.curStateData = {};
                }
                if(v == 1){
                    this.curStateData = {
                        taskDefinitionKey:"node_apply"
                    };
                }
                if(v == 2){
                    this.curStateData = {
                        taskDefinitionKey:"node_send"
                    };
                }
                if(v == 3){
                    this.curStateData = {
                        taskDefinitionKey:"node_work"
                    };
                }
                if(v == 4){
                    this.curStateData = {
                        taskDefinitionKey:"node_service_verify"
                    };
                }
                if(v == 5){
                    this.curStateData = {
                        taskDefinitionKey:"node_insurance"
                    };
                }
                if(v == 6){
                    this.curStateData = {
                        taskDefinitionKey:"node_work_receive"
                    };
                }
                this.getTodo();
            },
            //当前列表数据展开查看详情
            expandHandle(row, expandeds){
                if(!this.isExpandeds){
                    this.isExpandeds = true;
                    return;
                }
                if(expandeds.length != 0 && this.curTaskId != row.id){
                    this.clickState = 5;
                    this.expandLoading = true;
                    this.getOperationRecord(row);
                    this.getFormData(row);
                };
                if(expandeds.length > 1) {
                    this.isExpandeds = false;
                    this.$refs.todeTable.toggleRowExpansion(expandeds[0],false);
                };
            },
            getOperationRecord(row){
                let para = {
                    id:row.executionId
                }
                this.historyListLoading = true;
                getOperationRecord(para).then((res) => {
                    this.historyListLoading = false;
                    if(res.data.result.code == 0){
                        this.opHistoryData = res.data.data;
                    }
                });
            },
            //切换当前页
            handleCurrentChange(val) {
                this.currentPage = val;
                this.getTodo();
            },
            //切换每页显示数量
            handleSizeChange(val) {
                this.pageSize = val;
                this.getTodo();
            },
            taskFormatter(row,col){
                let task_vars = row.task_vars;
                if(task_vars){
                    return (task_vars.result?"通过":"拒绝")+(task_vars.remark?'-备注说明：'+task_vars.remark:"");
                } else {
                    return "";
                }
            },
            //格式化后台传来的时间戳
            dateFormatter(row,col){
                return util.formatDate.format(new Date(row.createTime), 'yyyy-MM-dd hh:mm:ss');
            },
            //完成保险出单
            successFornm(index,row){
                this.successDialogTableVisible = true;
                this.clickState = 3;
                this.getFormData(row);
            },
            //提交拒绝理由
            addRefuseHandling(){
                let addformpara = {
                    taskId:this.curTaskId,
                    properties : {}
                };
                addformpara.properties = {
                    result:false,
                    remark:this.rejectRemarks
                }
                if(this.sumbitType == 1){
                    this.addLoading = true;
                    //提交审核结果
                    addApprovaperSend(addformpara).then((res) => {
                        this.addLoading = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '拒绝成功！',
                                type: 'success'
                            });
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    }).catch((error) => {
                        this.addLoading = false;
                    });
                }
                if(this.sumbitType == 2){
                    this.addLoading = true;
                    //提交审核结果
                    addApprovaperWork(addformpara).then((res) => {
                        this.addLoading = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '提交成功！',
                                type: 'success'
                            });
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    }).catch((error) => {
                        this.addLoading = false;
                    });
                }
                if(this.sumbitType == 3){
                    this.addLoading = true;
                    //提交审核结果
                    addApprovaperServiceVerify(addformpara).then((res) => {
                        this.addLoading = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '提交成功！',
                                type: 'success'
                            });
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    }).catch((error) => {
                        this.addLoading = false;
                    });
                }
                if(this.sumbitType == 4){
                    this.addLoading = true;
                    addformpara.properties.result = true;
                    //提交审核结果
                    addApprovaperServiceVerify(addformpara).then((res) => {
                        this.addLoading = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '提交成功！',
                                type: 'success'
                            });
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    }).catch((error) => {
                        this.addLoading = false;
                    });
                }
                if(this.sumbitType == 5){
                    this.addLoading = true;
                    addformpara.properties.result = false;
                    //提交审核退回
                    addApprovaperServiceVerify(addformpara).then((res) => {
                        this.addLoading = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '退回成功！',
                                type: 'success'
                            });
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    }).catch((error) => {
                        this.addLoading = false;
                    });
                }
                if(this.sumbitType == 6){
                    this.addLoading = true;
                    addformpara.properties.result = false;
                    //提交审核退回
                    addApprovaperInsurance(addformpara).then((res) => {
                        this.addLoading = false;
                        if(res.data.result.code == 0){
                            this.$message({
                                message: '退回成功！',
                                type: 'success'
                            });
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    }).catch((error) => {
                        this.addLoading = false;
                    });
                }
                this.rejectRemarks = '';
                this.rejectDialogVisible = false;
            },
            //施工接单通过审核
            passConstructionOrder(index,row,type){
                let addformpara = {
                    taskId:row.id,
                    properties : {
                        result:true
                    }
                };
                if(type == 0){
                    addformpara.properties.result = true;
                    addApprovaperWorkReceiveCl(addformpara).then((res) => {
                        if(res.data.result.code == 0){
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    });
                }
                if(type == 1){
                    addformpara.properties.result = false;
                    addApprovaperWorkReceiveCl(addformpara).then((res) => {
                        if(res.data.result.code == 0){
                            //初始化待办数量
                            this.$store.dispatch('initFormNum');
                            this.getTodo();
                        }
                    });
                }
            },
            //拒绝理由弹窗显示 并且记录相关信息
            refuseHandling(index,row,type){
                this.sumbitType = type;
                this.curTaskId = row.id;
                this.rejectTitle = "拒绝理由";
                if(type == 4) this.rejectTitle = "通过备注";
                if(type == 5) this.rejectTitle = "拒绝理由";
                this.rejectDialogVisible = true;
            },
            //获取我的待办列表列表
            getTodo() {
                let para = {
                    page   : this.currentPage,
                    limit   : this.pageSize,
                    domSearch   : this.filters.domSearch,
                    startTime     : this.filters.timeScope?(this.filters.timeScope[0]?util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd hh:mm:ss'):''):'',
                    endTime        : this.filters.timeScope?(this.filters.timeScope[1]?util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd hh:mm:ss'):''):'',
                };
                para = Object.assign(para,this.curStateData);
                this.listLoading = true;
                getTodoInfoList(para).then((res) => {
                    this.listLoading = false;
                        this.total       = res.data.data.total;
                        this.todo        = res.data.data.records;
                        if (para.taskDefinitionKey == '' || para.taskDefinitionKey == undefined) {
                                this.fromNum.num0 = res.data.data.totalResult;
                        }
                        // this.initFormNum();
                    }).catch((error) => {
                        this.listLoading = false;
                    });
                },
            //根据任务id获取表单信息
            getFormData(obj) {
                if(!obj) return;
                  //获取填写的任务变量值
                  let pa = {
                      taskId:obj.id
                  };
                  this.curTaskId = obj.id;
                  nanobar.go(60);
                  getvariablesTaskInfoList(pa).then((res) => {
                      let _this = this,data = res.data.data;
                      nanobar.go(100);
                      this.expandLoading = false;
                      if(!data.vehicleInfo){
                          data.vehicleInfo = _this.ruleFormStatic.vehicleInfo;
                      }
                      if(!data.ownerInfo){
                          data.ownerInfo = _this.ruleFormStatic.ownerInfo;
                      }
                      if(!data.installEmployee){
                          data.installEmployee = _this.ruleFormStatic.installEmployee;
                      }
                      if(!data.installGroupInfo){
                          data.installGroupInfo = _this.ruleFormStatic.installGroupInfo;
                      }
                      if(!data.flowData){
                          data.flowData = _this.ruleFormStatic.flowData;
                      }
                      if(!data.vehicleInfo.receivingbank){
                          data.vehicleInfo.receivingbank = _this.ruleFormStatic.vehicleInfo.receivingbank;
                      }
                      if(this.clickState == 1) {
                          this.ruleFormStatic = data;
                          this.realTimeRefreshPro('vueAmap3');
                          this.deviceSectList = this.ruleFormStatic.installDetails;
                          this.curLinkid = this.ruleFormStatic.id;
                      }
                      if(this.clickState == 2) this.dialogFormData = data;
                      if(this.clickState == 3) this.$refs.dialogChild.getCustoHistoryInfo(data,obj);
                      if(this.clickState == 4) this.initEditFormInfo(data);
                      if(this.clickState == 5) this.expandRuleFormStatic = data;
                  }).catch((error) => {
                      nanobar.go(100);
                      this.expandLoading = false;
                  });
                },
            //查看图片窗口关闭
            showDialogVisibleImgClose(){
                this.resetFieldsRuleForm();
            },
            //查看设备安装照片
            showInstallImg(index,row){
                this.showDialogVisibleImg = true;
                this.clickState = 1;
                this.getFormData(row);
                //初始化图片查看器
                $("div.showimgDialog").on("click",".image",function(e){
                    $("div.showimgDialog").viewer("destroy");
                    $("div.showimgDialog").viewer({zIndex:999999999});
                });
            },
            handleEditRow(row,e,col){
                this.handleEdit(0,row);
            },
            editCuserForm(index,row){
                this.$store.state.formObj = row;
                this.$store.state.isApply = true;
                this.$router.push('/formProcess');
            },
            //显示审核该报单界面
            handleEdit(index, row) {
                this.$store.state.formObj = row;
                if(row.taskDefinitionKey == 'proc_new_build_node_apply' || row.taskDefinitionKey == 'node_apply'){
                    this.$store.state.isApply = true;
                    this.$router.push('/formProcess');
                    return;
                }
                this.$store.state.isApply = false;
                if(row.taskDefinitionKey == 'proc_new_build_node_send' || row.taskDefinitionKey == 'node_send'){
                    this.$router.push('/formProcess/1');
                }
                if(row.taskDefinitionKey == 'proc_new_build_node_work' || row.taskDefinitionKey == 'node_work'){
                    this.equipmentDialogTableVisible = true;
                    this.dialogLoading = true;
                    this.clickState = 3;
                    this.getFormData(row);
                }
                if(row.taskDefinitionKey == 'proc_new_build_node_service_verify' || row.taskDefinitionKey == 'node_service_verify'){
                    this.$router.push('/formProcess/3');
                }
                if(row.taskDefinitionKey == 'proc_new_build_node_insurance' || row.taskDefinitionKey == 'node_insurance'){
                    this.$router.push('/formProcess/4');
                }
            },
            //清空查询表单
            resetForm(formName) {
                this.$refs[formName].resetFields();
            },
            //关闭子类弹窗
            closeDialog(type,n){
                if(type == 1){
                    this.clerkOrderDialogTableVisible = false;
                }
                if(type == 2){
                    this.equipmentDialogTableVisible = false;
                    this.dialogLoading = false;
                }
                if(type == 3){
                    this.successDialogTableVisible = false;
                }
                if(n != 0) this.getTodo();
            },
            //初始化新装各个状态总数  待优化
            initFormNum(){
                var user = sessionStorage.getItem('user');
                user = JSON.parse(user);
                let para = {
                    type:1
                };
                getFormCount(para).then((res) => {
                    let node = res.data.data;
                    if(node == null) return;
                    this.fromNum.num1 = (node.proc_new_build_node_apply + node.node_apply) ? (node.proc_new_build_node_apply + node.node_apply) : 
                        node.proc_new_build_node_apply ? node.proc_new_build_node_apply : 
                        node.node_apply ? node.node_apply : 0;
                    this.fromNum.num2 =  (node.proc_new_build_node_send + node.node_send) ? (node.proc_new_build_node_send + node.node_send) : 
                        node.proc_new_build_node_send ? node.proc_new_build_node_send : 
                        node.node_send ? node.node_send : 0;
                    this.fromNum.num3 = (node.proc_new_build_node_work + node.node_work) ? (node.proc_new_build_node_work + node.node_work) :
                        node.proc_new_build_node_work ? node.proc_new_build_node_work : 
                        node.node_work ? node.node_work : 0;
                    this.fromNum.num4 = (node.proc_new_build_node_service_verify + node.node_service_verify) ? (node.proc_new_build_node_service_verify + node.node_service_verify) : 
                        node.proc_new_build_node_service_verify ? node.proc_new_build_node_service_verify : 
                        node.node_service_verify ? node.node_service_verify : 0;
                    this.fromNum.num5 = (node.proc_new_build_node_insurance + node.node_insurance) ? (node.proc_new_build_node_insurance + node.node_insurance) :
                        node.proc_new_build_node_insurance ? node.proc_new_build_node_insurance : 
                        node.node_insurance ? node.node_insurance : 0;
                   this.fromNum.num6 = (node.proc_new_build_node_work_receive + node.node_work_receive) ? (node.proc_new_build_node_work_receive + node.node_work_receive) :
                        node.proc_new_build_node_work_receive ? node.proc_new_build_node_work_receive : 
                        node.node_work_receive ? node.node_work_receive : 0;

                    // this.fromNum.num1 = (node.proc_new_build_node_apply + node.node_apply)?(node.proc_new_build_node_apply + node.node_apply):0;
                    // this.fromNum.num2 = (node.proc_new_build_node_send  + node.node_send)?(node.proc_new_build_node_send +  node.node_send):0;
                    // this.fromNum.num3 = (node.proc_new_build_node_work +  node.node_work)?(node.proc_new_build_node_work + node.node_work):0;
                    // this.fromNum.num4 = (node.proc_new_build_node_service_verify + node.node_service_verify)?(node.proc_new_build_node_service_verify + node.node_service_verify):0;
                    // this.fromNum.num5 = (node.proc_new_build_node_insurance + node.node_insurance)?(node.proc_new_build_node_insurance + node.node_insurance):0;
                    // this.fromNum.num0 = (this.fromNum.num1+this.fromNum.num2+this.fromNum.num3+this.fromNum.num4+this.fromNum.num5)?(this.fromNum.num1+this.fromNum.num2+this.fromNum.num3+this.fromNum.num4+this.fromNum.num5):0;
                });
            },
            //初始化ruleFormStatic
            resetFieldsRuleForm(){
                this.deviceSectList = [];
                this.deviceLinkIndex = '';
                this.deviceLinkid = '';
                this.deviceIndex = 0;
                this.carPicList = [];
                this.carPicValue = '';
                this.ruleFormStatic = {
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    },
                    pictures:[]
                }
            },
            // 添加查询条件
            addSelect () {
                this.filters.domSearch.push({
                    select: [],
                    content: ''
                });
            },
            // 移除查询条件
            removeSelect (index) {
                this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
            },
        },
        //初始化数据
        created(){
            this.getTodo();
        }
    }