import util from 'utils/tools';
import {
    returnProccess,
    deleteProcess,
    getInstallProds,
    cldeviceIsOnstate,
    getOwnerInfo,
    getOperationRecord,
    getNodesCount,
    getModelProds,
    setStartFormRules,
    getTodoInfoList,
    getInstallPositionCode,
    startVindicate,
    finishVindicate,
    getTodoInfoListByUser,
    getNodesCountByUser
} from './service';
import { nextInstall } from '../newPackingList/service.js';
import { getVehList } from "@/views/basicManage/ownerVehicleManage/service";
import { getAllColorList, getCarModel } from '@/views/basicManage/ownerVehicleManage/service'
import { getToken } from '@/utils/auth'

let getTodo = getTodoInfoList
let getNodes = getNodesCount

export default {
    props: ['windowOutHeight'],
    data () {
        return {
            util: util,
            Dayjs: dayjs,
            token: getToken(),
            //搜索 筛选信息
            filters: {
                domSearch: [{
                    select: ['orderno'],
                    content: ''
                }], //查询框
                timeScope: '',
                prodnum: '',
            },
            // 完成安装弹窗
            finishInstallDialogVisible: false,
            rowFinishData: [],//存储当前行的数据
            installStep: '1',//第一步第二步，步骤状态
            picLargedialogVisible: false,//图片放大
            picLargeImageUrl: '',//图片路径
            startForm: {//第一步
                vin: '',
                licenseplatenum: '',
                vehicletype: '',
                vehiclePic: '',
            },
            startFormRules: setStartFormRules,
            vehlist: [],//车辆类型
            // prodCatagorys:[],//当前单的设备类别组
            signalInfo: {},//信号检测
            vehiclecategoryList: {//车辆分类列表
                1: '新车',
                2: '二手车',
                3: '资管追回'
            },
            vehiclepowerList: {//能源类型1=汽油，2=柴油，3=纯电，4=混动
                1: '汽油',
                2: '柴油',
                3: '纯电',
                4: '混动'
            },
            prodIndex: 0,//选择设备下标
            codeloading: false,
            InstallPositionArray: [],//设备安装位置
            ischange: [],//设备显示
            endForm: {//第二步
                impremark: '',//备注
                prodCatagorys: []
            },
            endFormRules: {
                installpositioncode: [{required: true, message: "请选择设备安装位置", trigger: 'change'}],
                piclink: [{required: true, message: "请上传设备安装图片", trigger: 'change'}],
            },
            actionTypes: [
                {label: '维修', value: 'REPAIR-YES'},
                {label: '无需维修', value: 'REPAIR-NO'},
                {label: '更换设备', value: 'CHANGE'},
                {label: '未找到设备不补装', value: 'LOST'},
                {label: '未找到设备补装', value: 'LOST-INSTALL'},
            ],
            sameVin: true,//车架号是否一致
            prodData: [],//设备选择列表
            prodLoading: false,
            todo: [],//列表数据
            total: 0,
            pageSize: 15,
            currentPage: 1,
            listLoading: false,
            dtotal: 0,
            dpageSize: 15,
            dcurrentPage: 1,
            nodesList: [],//节点数量
            stepState: 0,//当前tab页状态
            //新装数量
            fromNum: {
                num0: 0, num1: 0, num2: 0,
                num3: 0, num4: 0, num5: 0
            },
            curStateData: {id0: 0, id1: 0, id2: 0, id3: 0, id4: 0, id5: 0},//当前新装节点状态值
            flowNodeId: 'all',//状态值传参
            delorder: {//废单、退单
                orderReasonDialogVisible: false,
                reson: '',
                delOrderLoading: false,
                title: '',
                taskid: '',
                processInstanceId: 0
            },
            expandLoading: false,//表格详情
            opHistoryData: [],//操作记录
            activeName: '1',

            copName: [],//公司下拉
            copLoading: false,
            isExpandeds: true,
            accept: "jpg,png,jpeg",
        }
    },
    watch: {
        $route (newValue, oldValue) {
            this.initFn()
        }
    },
    computed: {
        isSelf () {
            return this.$route.name === 'personalStandby'
        }
    },
    methods: {
        // -------------------------------------------------------------------施工节点---------------------------------------------------------------------------------
        // 车辆图片上传成功
        uploadSuccessInvoice (res, file) {
            this.startForm.vehiclePic = res.data;
        },
        // 施工安装图片上传成功
        successInvoiceOne (res, file) {
            this.endForm.prodCatagorys[this.prodIndex].busiPictures[0].piclink = res.data;
        },
        successInvoiceTwo (res, file) {
            this.endForm.prodCatagorys[this.prodIndex].busiPictures[1].piclink = res.data;
        },

        // 开始—确认消息
        startVindicate (row) {
            this.$confirm('确定当前订单开始维修？', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
            }).then(() => {
                startVindicate({id: row.id}).then((res) => {
                    this.$message.success('开始维修成功，订单状态变更为施工中！');
                    this.getTodo()
                })
            }).catch(() => {
            });
        },
        // 完成操作按钮—点击
        finishVindicate (row) {
            this.intStartForm('');
            this.finishInstallDialogVisible = true;
            this.rowFinishData = row;
        },
        // 校验车架号
        checkVin (val) {
            if (val.length == 17) {//车架号数量正确时
                if (val == this.rowFinishData.rpvehicleinfo.vin) {//车架号与派单信息一致
                    this.startForm.vin = val;
                    this.startForm.licenseplatenum = this.rowFinishData.rpvehicleinfo.licenseplatenum;
                    this.startForm.vehicletype = this.rowFinishData.rpvehicleinfo.vehicletype;
                    this.startForm.vehicletypename = this.rowFinishData.rpvehicleinfo.vehicletypename;
                    this.sameVin = true;//标识
                } else {
                    this.$message.error('车架号与派单信息不一致！请确认！');
                    this.startForm.licenseplatenum = '';
                    this.startForm.vehicletypename = '';
                    this.sameVin = false;//标识
                }
            } else if (val.length == 0) {
                this.intStartForm('');
            }
        },
        // 开始安装下一步
        nextStep (row) {
            let para = {
                declarationid: row.id,//报单id
                vin: this.startForm.vin,
                licenseplatenum: this.startForm.licenseplatenum,
                vehiclePic: this.startForm.vehiclePic,
                vehicletype: this.startForm.vehicletype,
                vehicletypename: this.startForm.vehicletypename,
            }
            if (this.sameVin) {
                this.$refs.startForm.validate(async valid => {
                    if (valid) {
                        nextInstall(para).then((res) => {
                            this.installStep = '2';
                            this.getModelspec(row.id);//获取当前订单的设备类别
                        })
                    }
                })
            } else {
                this.$message.error('车架号与派单信息不一致！请确认！');
            }
        },
        // 完成安装上一步
        previousStep () {
            this.installStep = '1';
        },
        // 开始安装-取消按钮
        cancelInstall () {
            this.finishInstallDialogVisible = false;
            this.intStartForm('');
        },
        // 完成安装-关闭弹窗
        closeFinish () {
            this.installStep = '1';
            this.intStartForm('');
        },
        // 开始
        startConfirm () {
            this.startVindicateDialogVisible = false;
            this.finishInstallDialogVisible = true;
        },
        // 选择维修情况
        chooseActionType (val, index) {
            if (this.ischange[index] && val != 'CHANGE' && val != 'LOST-INSTALL') {
                this.cancelChoose(index, val);
            }
        },
        // 点击取消选择设备按钮
        cancelChoose (index, val) {
            this.ischange[index] = false;
            getInstallProds({id: this.rowFinishData.id}).then((res) => {//重新获取之前数据
                res.data.data.busiImpdetails[index].actiontype = val;
                this.$set(this.endForm.prodCatagorys, index, res.data.data.busiImpdetails[index]);//触发视图更新
            });
        },
        // 双击选择设备
        deviceClickHandle (val) {
            this.$refs.popover[0].showPopper = false;
            this.ischange[this.prodIndex] = true;
            this.endForm.prodCatagorys[this.prodIndex].stoPackinfoDto.prodnum = val.prodnum;
            this.endForm.prodCatagorys[this.prodIndex].stoPackinfoDto.promodelname = val.modelname;
            this.endForm.prodCatagorys[this.prodIndex].stoPackinfoDto.simnum = val.simnum;
            this.endForm.prodCatagorys[this.prodIndex].stoPackinfoDto.simmodelname = val.simmodelname;
            this.endForm.prodCatagorys[this.prodIndex].oripackid = this.endForm.prodCatagorys[this.prodIndex].packid;//原有设备packid
            this.endForm.prodCatagorys[this.prodIndex].packid = val.packid;//更换设备的packid
            this.endForm.prodCatagorys[this.prodIndex].installpositioncode = '';
            this.endForm.prodCatagorys[this.prodIndex].busiPictures = [//设备安装图片
                {piccode: 19, piclink: '', picdesc: '安装位置照'},
                {piccode: 20, piclink: '', picdesc: '铭牌+设备照'}
            ]
            this.$set(this.endForm.prodCatagorys);//触发视图更新
        },

        // 完成安装
        confirmFinishInstall () {
            // 获取库房数组
            let storages = this.$store.getters.userInfo.employeeinfo.storages.map((item, index) => {
                return item.id;
            })
            this.$refs.endForm.validate(async valid => {
                if (valid) {
                    let para = {
                        id: this.rowFinishData.id,//报单id
                        taskid: this.rowFinishData.taskid,
                        busiImpdetails: this.endForm.prodCatagorys,
                        impremark: this.endForm.impremark,
                        storageids: storages
                    }
                    finishVindicate(para).then((res) => {
                        this.$message.success('您已完成维修！');
                        this.finishInstallDialogVisible = false;
                        this.getTodo();
                    })
                }
            })
        },


        //---------------------------------------------------------------------------废除订单   退回订单-----------------------------------------------------------------
        deleteOrder (index, row) {
            this.delorder.processInstanceId = row.id;
            this.delorder.title = '废除订单';
            this.delorder.taskid = row.taskid
            this.delorder.orderReasonDialogVisible = true;
            this.delorder.reson = '';
        },
        passConstructionOrder (index, row) {
            this.delorder.processInstanceId = row.id;
            this.delorder.title = '退回订单';
            this.delorder.taskid = row.taskid
            this.delorder.orderReasonDialogVisible = true;
            this.delorder.reson = '';
        },
        comfirDelOrder (title) {
            this.$refs.delorder.validate(async valid => {
                if (valid) {
                    if (title == '废除订单') {
                        let para = {
                            id: this.delorder.processInstanceId,
                            cancelremark: this.delorder.reson,
                            taskid: this.delorder.taskid
                        }
                        this.delorder.delOrderLoading = true;
                        deleteProcess(para).then((res) => {
                            this.delorder.delOrderLoading = false;
                            this.delorder.orderReasonDialogVisible = false;
                            this.$message.success('废除成功！')
                            this.getNodes();
                        });
                    } else if (title == '退回订单') {
                        let para = {
                            id: this.delorder.processInstanceId,
                            returnremark: this.delorder.reson,
                            taskid: this.delorder.taskid
                        }
                        this.delorder.delOrderLoading = true;
                        returnProccess(para).then((res) => {
                            this.delorder.delOrderLoading = false;
                            this.delorder.orderReasonDialogVisible = false;
                            this.$message.success('退回成功！')
                            this.getNodes();
                        });
                    }
                }
            })
        },


        //-----------------------------------------------------------------------列表数据展开查看详情---------------------------------------------------------
        expandHandle (row, expandeds) {
            if (!this.isExpandeds) {
                this.isExpandeds = true;
                return;
            }
            if (expandeds.length != 0) {//有数据时

                this.getOperation(row);
            }
            if (expandeds.length > 1) {
                this.isExpandeds = false;
                this.$refs.todeTable.toggleRowExpansion(expandeds[0], false);
            }
        },
        getOwnerVeh (row) {
            let para = {
                id: row.executionId
            }
            this.expandLoading = true;
            getOwnerInfo(para).then((res) => {
                this.expandLoading = false;
                this.opHistoryData = res.data.data;
            }).catch((err) => {
                this.expandLoading = false;
            });
        },

        // 操作记录
        getOperation (row) {
            let para = {
                id: row.executionId
            }
            this.expandLoading = true;
            getOperationRecord(para).then((res) => {
                this.expandLoading = false;
                this.opHistoryData = res.data.data;
            }).catch((err) => {
                this.expandLoading = false;
            });
        },


        // ---------------------------------------------操作-----------------------------------
        // 派单
        dispatchOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/orderProcess',
                    query: {id: row.id, taskid: row.taskid, flow: '1'}
                }
            )
        },
        // 转派
        transferOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/orderProcess',
                    query: {id: row.id, taskid: row.taskid, flow: '2'}
                }
            )
        },
        // 详情
        detailsOrder (row) {
            this.$router.push(
                {
                    path: '/orderManage/orderCompletion',
                    query: {id: row.id}
                }
            )
        },


        // -----------------------------------------------列表----------------------------------------
        //改变新装状态获取对应数据列表
        changeStateHandle (v) {
            if (v == 0) this.flowNodeId = 'all'; //全部
            if (v == 1) this.flowNodeId = this.curStateData.id1;//派单
            if (v == 2) this.flowNodeId = this.curStateData.id2;//接单
            if (v == 3) this.flowNodeId = this.curStateData.id3;//施工
            if (v == 4) this.flowNodeId = this.curStateData.id4;//保险退保
            if (v == 5) this.flowNodeId = this.curStateData.id5;//订单完成

            this.getTodo();
        },
        // 获取节点数量
        getNodes () {
            this.listLoading = true;
            getNodes().then((res) => {
                this.nodesList = res.data.data;
                this.nodesList.forEach((item, index) => {
                    if (item.name == '全部') {
                        this.fromNum.num0 = item.num;
                        this.curStateData.id0 = item.id;
                    }
                    if (item.name == '派单') {
                        this.fromNum.num1 = item.num;
                        this.curStateData.id1 = item.id;
                    }
                    if (item.name == '接单') {
                        this.fromNum.num2 = item.num;
                        this.curStateData.id2 = item.id;
                    }
                    if (item.name == '施工') {
                        this.fromNum.num3 = item.num;
                        this.curStateData.id3 = item.id;
                    }
                    if (item.name == '订单完成') {
                        this.fromNum.num4 = item.num;
                        this.curStateData.id4 = item.id;
                    }
                });
                this.getTodo();
            });
        },
        //获取列表
        getTodo () {
            this.listLoading = true;
            let para = {
                page: this.currentPage,
                limit: this.pageSize,
                type: 'repair',
                domSearch: this.filters.domSearch,
                startTime: this.filters.timeScope ? (this.filters.timeScope[0] ? util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd') : '') : '',
                endTime: this.filters.timeScope ? (this.filters.timeScope[1] ? util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd') : '') : '',
                flowNodeId: this.flowNodeId
            };
            para = Object.assign(para);
            getTodo(para).then((res) => {
                this.listLoading = false;
                this.total = res.data.data.total;
                this.todo = res.data.data.records;
                if (this.todo == null) this.todo = [];
            }).catch((error) => {
                this.listLoading = false;
            });
        },
        //切换当前页
        handleCurrentChange (val) {
            this.currentPage = val;
            this.getTodo();
        },
        //切换每页显示数量
        handleSizeChange (val) {
            this.pageSize = val;
            this.getTodo();
        },

        //清空查询表单
        resetForm (formName) {
            this.$refs[formName].resetFields();
        },

        // 添加查询条件
        addSelect () {
            this.filters.domSearch.push({
                select: [],
                content: ''
            });
        },
        // 移除查询条件
        removeSelect (index) {
            this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
        },
        //格式化后台传来的时间戳
        dateFormatter (row, col) {
            return row.impapplydate ? util.formatDate.format(new Date(row.impapplydate), 'yyyy-MM-dd hh:mm') : '--';
        },
        //格式化后台传来的时间戳
        dateFormatter2 (row, col) {
            return row.startDate ? util.formatDate.format(new Date(row.startDate), 'yyyy-MM-dd hh:mm') : '--';
        },
        //格式化后台传来的时间戳
        dateFormatter3 (row, col) {
            return row.endDate ? util.formatDate.format(new Date(row.endDate), 'yyyy-MM-dd hh:mm') : '--';
        },
        // ----------------------------------------------下拉框------------------------------
        /**
         * 获取车辆颜色
         * @param queryString
         * @param cb
         */
        handleColorChange (queryString, cb) {
            let para = {
                model: this.startForm.model,
                color: queryString,
                limit: 100
            }, colorArray = [];
            getAllColorList(para).then((res) => {
                if (res.data.data.records) {
                    res.data.data.records.forEach(function (item, index) {
                        if (item && item.color) {
                            colorArray.push({
                                value: item.color,
                                color_rgb: item.color_rgb,
                            });
                        }
                    });
                    cb(colorArray);
                }
            });
        },
        /**
         * 选择车辆颜色
         * @param v
         */
        changeCarColor (v) {
            if (typeof v != "object") return;
            this.startForm.colorname = v.value; //存colorname汉字
            this.startForm.color = v.color_rgb; //存color码
        },
        //选择车型查询颜色
        handleSelectColor (v) {
            this.startForm.model = v.value;
            this.startForm.color = '';
            this.startForm.colorname = '';
        },
        //车型选择
        handleItemChange (queryString, cb) {
            let para = {
                    model: queryString,
                    viewName: "VW_VAS_WEB_VAS_VEHICLE_MODEL",
                    limit: 30,
                },
                ownerArray = [];
            getCarModel(para).then((res) => {
                if (res.data.data != null) {
                    res.data.data.records.forEach(function (item, index) {
                        ownerArray.push({
                            value: item.model,
                            brand: item.brand,
                            serious: item.serious
                        });
                    });
                    cb(ownerArray);
                }
            });
        },
        // 获取车辆类型
        vehChange (r) {
            const params = {
                page: 1,
                limit: 10000,
                isactive: 1
            }
            getVehList(params).then((res) => {
                this.vehlist = res.data.data;
            });
        },

        // 获取设备列表
        getProds (data, index) {
            this.prodIndex = index;
            this.prodLoading = true;
            const params = {
                page: this.dcurrentPage,
                limit: this.dpageSize,
                prodnum: this.filters.prodnum,
                impby: this.rowFinishData.impby,
                modelid: data.prodmodelid,
            }
            getModelProds(params).then((res) => {
                this.prodLoading = false;
                this.prodData = res.data.data.records;
                this.dtotal = res.data.data.total;
            });
        },
        //设备切换当前页
        dhandleCurrentChange (val) {
            this.dcurrentPage = val;
            this.getProds(this.prodIndex);
        },
        //设备切换每页显示数量
        dhandleSizeChange (val) {
            this.dpageSize = val;
            this.getProds(this.prodIndex);
        },
        //安装位置初始化
        changeInstallDecode (r) {
            if (!r || this.InstallPositionArray.length > 0) return;
            this.codeloading = true;
            getInstallPositionCode().then((res) => {
                this.InstallPositionArray = res.data.data;
                this.codeloading = false;
            });
        },
        // 完成安装-获取安装设备
        getModelspec (dataId) {
            getInstallProds({id: dataId}).then((res) => {
                this.endForm.prodCatagorys = res.data.data.busiImpdetails;
            });
        },
        // 选择车辆分类
        chooseCategory (val) {
            this.startForm.vehiclecategory = val;
        },
        // 设备状态
        async getSignalInfo (productNum) {
            try {
                this.signalInfo = {
                    curonlinestatus: '',//设备实时状态
                    locationmode: '',//定位方式
                    gps_satellite_count: '',//卫星或基站数量
                    signalqulity: '',//卫星或基站信号强度
                    curaddress: '',//定位地址
                    onlineStatus: ''//上线质量
                }
                const params = {
                    id: productNum
                }
                const {data} = await cldeviceIsOnstate(params)
                const realdata = data.data.realdata
                let curonlinestatus = ''
                let signalqulity = ''
                let onlineStatus = ''
                switch (realdata.istate) {
                    case 0:
                        curonlinestatus = "行驶";
                        break;
                    case 1:
                        curonlinestatus = "离线";
                        break;
                    case 2:
                        curonlinestatus = "停车";
                        break;
                    case 3:
                        curonlinestatus = "报警";
                        break;
                    case 4:
                        curonlinestatus = "无效定位";
                        break;
                    case 5:
                        curonlinestatus = "未定位";
                        break;
                }

                switch (realdata.signalqulity) {
                    case 0:
                        signalqulity = "未知";
                        onlineStatus = '差'
                        break;
                    case 1:
                        signalqulity = "无信号";
                        onlineStatus = '差'
                        break;
                    case 2:
                        signalqulity = "信号较弱";
                        onlineStatus = '差'
                        break;
                    case 3:
                        signalqulity = "信号良好/中";
                        onlineStatus = '中'
                        break;
                    case 4:
                        signalqulity = "信号强";
                        onlineStatus = '优'
                        break;
                }
                this.signalInfo.curonlinestatus = curonlinestatus
                this.signalInfo.onlineStatus = onlineStatus
                this.signalInfo.locationmode = realdata.locationmode
                this.signalInfo.gps_satellite_count = realdata.gps_satellite_count
                this.signalInfo.signalqulity = signalqulity
                const geocoder = new AMap.Geocoder({
                    radius: 1000 //范围，默认：500
                });
                geocoder.getAddress([realdata.lng, realdata.lat], (status, result) => {
                    if (status === 'complete' && result.info === 'OK') {
                        //获得了有效的地址信息:
                        this.signalInfo.curaddress = result.regeocode.formattedAddress
                    } else {
                        //获取地址失败
                    }
                });
            } catch (e) {
                console.log(e)
            }
        },

        // 初始化安装信息
        intStartForm (vinVal) {
            this.ischange = [];
            this.prodIndex = 0;
            this.sameVin = true;
            this.filters.prodnum = '';
            this.startForm = {
                vin: vinVal,
                licenseplatenum: '',
                vehicletype: '',
                vehiclePic: ''
            }
            this.endForm = {//第二步
                impremark: '',//备注
                prodCatagorys: []
            }
        },
        initFn() {
            if (this.isSelf) {
                getTodo = getTodoInfoListByUser
                getNodes = getNodesCountByUser
            } else {
                getTodo = getTodoInfoList
                getNodes = getNodesCount
            }
            this.getNodes();
        }
    },
    //初始化数据
    created () {
        this.initFn();
    },
}