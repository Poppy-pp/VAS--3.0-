import util from 'utils/tools';

import { getProductInfoList, addProductInfo, modifyProductInfo, removeProductInfo, getMoNameList, getStoNameList, getSIMInfoList, getSortList, getProductOwnerList, getSelectListProd, getAllProSimInfoList, addUnbundleSIM, cancelUnbundleSIM, getCheckoutOfProdInfo, getNamebyUserid } from './service';

export default {
		name:'ProductInfo',
		props: ['windowOutHeight'],
		data() {
			return {
				fmtdata: util,
				filters: {
					domSearch: [{
						select: ['prodnum'],
						content: ''
					}], //查询框
					isdelete: '0'
				},
				statusOptions: [{
					value: 'INSTO',
					label: '在库'
				}, {
					value: 'INSTALL',
					label: '已安装'
				}, {
					value: 'LOST',
					label: '报失'
				}, {
					value: 'REPAIR',
					label: '维修'
				}, {
					value: 'DAMAGE',
					label: '报费'
				}, {
					value: 'ONWAY',
					label: '在途'
				}, {
					value: 'REMOVING',
					label: '拆除中'
				}],
				pickerOptions: { //日期
				},
				sels1: [],
				comfirLoading: false,
				radio: '',
				listData: [],
				moreData: [], //创建信息
				resID: [], //绑卡后返回的设备id和卡id
				checkData: [], //选择绑卡check
				deviceListData: [], //绑卡
				deviceFormVisible: false,
				devicelistLoading: false,
				dtotal: 0,
				dcurrentPage: 1,
				dpageSize: 15,
				prodList: [], //设备
				psData: [], //绑定设备SIM卡数据
				vehInfo: [], //绑定车辆信息
				formDialogTableVisible: false, //是否显示订单详情弹出
				fdtLoading: false,
				customers: [],
				moNamelist: [], //设备型号列表
				moNameLoading: false, //设备型号
				stoNamelist: [], //库房名称列表
				stoNameLoading: false, //库房名称
				createname: "",
				updatename: "",
				total: 0,
				currentPage: 1,
				pageSize: 15,
				showCount: '',
				listLoading: false,
				sels: [], //列表选中列
				checkoutDataT: true, //数据验证返回的布尔值true
				checkoutDataF: [], //数据验证组
				thisInput: '', //编辑时存入row验证的值
				editFormVisible: false, //编辑界面是否显示
				editLoading: false,
				editFormRules: {
					prodnum: [{
						required: true,
						message: "请输入设备编号",
						trigger: 'blur'
					}],
					productmodelname: [{
						required: true,
						message: "请选择设备型号",
						trigger: 'blur'
					}],
					// storagename:[{required:true,message:"请输入库房名",trigger: 'blur'}],
				},
				//编辑界面数据
				editForm: {
					id: '',
					prodnum: '',
					prodspec: '',
					prodcategory: '',
					productmodelname: '',
					storagename: '',
					status: '',
					suppliername: '',
					protocoltype: '',
					dictdatavalue: '',
					ispack: '',
					isold: '',
					expiredate: '',
					remark: '',
					isdelete: '',
				},
				editFormId: {
					storageid: '',
					prodmodelid: '',
				},

				addFormVisible: false, //新增界面是否显示
				addLoading: false,
				addFormRules: {

				},
				//新增界面数据
				addForm: {
					// act_id:'',
					// act_status:'',
					prodnum: '',
					prodspec: '',
					prodcategory: '',
					prodmodelid: '',
					productmodelname: '',
					storageid: '',
					storagename: '',
					protocoltype: '',
					dictdatavalue: '',
					status: '',
					suppliername: '',
					ispack: 1,
					isold: 1,
					expiredate: '',
					remark: '',
					isdelete: 0,
				},
			}
		},
		methods: {
			// 数据重复验证
			checkout(p, v, index) {
				if(v == "") return; //输入框没输数据
				if(this.thisInput == v) return; //编辑时 没改输入框值
				this.checkoutDataT = true; //初始化
				let paras = {
					para: p,
					value: v,
				}
				getCheckoutOfProdInfo(paras).then((res) => {
					let errorInput = res.data.data.param; //保存验证失败的字段
					if(!res.data.data.result) {
						this.$message({
							message: '信息输入重复！',
							type: 'warning'
						});
						this.$refs[errorInput].$el.className = "el-form-item is-error"; //输入框标红
						this.checkoutDataF[index] = false
					} else {
						this.$refs[errorInput].$el.className = "el-form-item"; //输入框恢复
						this.checkoutDataF[index] = true
					}
				});
			},
			selsChange(sels, row) {
				this.sels = sels;
				this.checkData = row;
			},
			// 确认解绑
			cancel() {
				if(this.vehInfo.length != 0) { //该设备已有绑定车辆
					this.$message({
						message: '该设备已绑定车辆，无法解绑！',
						type: 'warning'
					});
				} else { //该设备未绑定车辆
					let para = {
						packID: this.psData.packID
					};
					cancelUnbundleSIM(para).then((res) => {
						if(res.data.data) {
							this.$message({
								message: '解绑成功！',
								type: 'success'
							});
							this.psData.simID = undefined; //清空绑定的卡信息
							this.deviceFormVisibleSto = false;
						} else {
							this.$message({
								message: '解绑失败！只有在库设备可以解绑！',
								type: 'warning'
							});
						}
					});
				}
			},
			// 确认绑卡
			comlist(checkData, event) {
				this.deviceFormVisible = false;
				let para = {
					equipmentid: this.psData.prodID,
					simcardid: checkData.id,
					storageid: this.psData.storageid
				};
				this.comfirLoading = true;
				addUnbundleSIM(para).then((res) => {
					this.comfirLoading = false;
					this.$message({
						message: '该设备绑卡成功！',
						type: 'success'
					});
					this.resID = res.data.data;
					let paraTwo = {
						prodID: this.resID.equipmentid,
					};
					getAllProSimInfoList(paraTwo).then((res) => {
						this.psData = ''; //清空上条数据赋的值
						this.psData = res.data.data.records[0];
						console.log(res)
					});
				});

			},
			//切换当前页
			dhandleCurrentChange(val) {
				this.dcurrentPage = val;
				this.getDeciceListInfo();
			},
			//切换每页显示数量
			dhandleSizeChange(val) {
				this.dpageSize = val;
				this.getDeciceListInfo();
			},
			// 查询SIM卡信息
			addDeviceList() {
				this.clearAll(); //打开dialog清空查询框
				this.deviceFormVisible = true;
				this.filters = {
					isdelete: this.filters.isdelete,
					domSearch: this.filters.domSearch, //查询框
				};
				this.getDeciceListInfo();
			},
			//获取SIM信息
			getDeciceListInfo() {
				let para = {
					currentPage: this.dcurrentPage,
					showCount: this.dpageSize,
					// 搜索设置部分
					domSearch: this.filters.domSearch, //查询框
					ispack: 0,
					isdelete: 0,
					storageid: this.psData.storageid,
					prodcategory: 'C',
					status: 'INSTO'
				};
				this.devicelistLoading = true;
				getSelectListProd(para).then((res) => {
					if(res.data.result.code == 4001) {
						this.$message({
							message: res.data.result.desc,
							type: 'error'
						});
						this.devicelistLoading = false;
						return;
					}
					this.dtotal = res.data.data.totalResult;
					this.deviceListData = res.data.data.records;
					this.devicelistLoading = false;
				}).catch((error) => {
					this.devicelistLoading = false;
				});
			},
			//查询清空
			clearAll() {
				this.filters.domSearch = [{
					select: [],
					content: ''
				}] //清空查询框;
			},
			//详情查看
			formDetailHandle(prodid, data) {
				this.createname = "";
				this.updatename = "";
				this.moreData = data;
				this.formDialogTableVisible = true;
				this.fdtLoading = true;
				let para = {
					prodID: prodid,
				}
				nanobar.go(70);
				this.editLoading = true;
				//获取当前设备、SIM卡信息
				getAllProSimInfoList(para).then((res) => {
					this.psData = ''; //清空上条数据赋的值
					if(res.data.data.records.length == 0) {
						this.$message({
							message: '该设备暂未绑定SIM卡！',
							type: 'warning'
						});
					} else {
						this.psData = res.data.data.records[0];
					}

					let paraThree = {
						createby: this.moreData.createby == null ? 0 : this.moreData.createby,
						updateby: this.moreData.updateby == null ? 0 : this.moreData.updateby,
					}
					getNamebyUserid(paraThree).then((res) => {
						this.createname = res.data.data[0];
						this.updatename = res.data.data[1];
						let paraTwo = {
							PRODID: prodid,
						}
						// 获取设备绑定车辆信息
						getProductOwnerList(paraTwo).then((res) => {
							this.vehInfo = ''; //清空上条数据赋的值
							if(res.data.data.records.length != 0) {
								this.vehInfo = res.data.data.records[0];
							}
							nanobar.go(100);
							this.fdtLoading = false;
							this.editLoading = false;
						});
					});
				});
			},
			// 有效 鼠标移入
			mouseoverChange(e) {
				if($(e.target).hasClass('icon-duigou')) {
					$(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
				} else {
					$(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
				}
			},
			// 有效 鼠标移除
			mouseoutChange(e) {
				if($(e.target).hasClass('icon-cha')) {
					$(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
				} else {
					$(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
				}
			},

			// 有效无效开关
			showData(i) {
				this.filters.isdelete = i;
				this.handleQuery();
			},
			//设备状态显示转换
			statusFormat: function(row, col) {
				return row.status == 'INSTO' ? '在库' : row.status == 'INSTALL' ? '已安装' : row.status == 'LOST' ? '报失' : row.status == 'REPAIR' ? '维修' : row.status == 'DAMAGE' ? '报废' : row.status == 'ONWAY' ? '在途' : row.status == 'REMOVING' ? '拆除中'  : row.status == 'RETROFIT' ? '返厂' : row.status == 'BREAKGE' ? '报损' : row.status == 'DIRECTOUT' ? '直接出库' : '';
			},
			//有效无效转换
			isdeleteFomat(row, col) {
				return row.isdelete == 1 ? '否' : row.isdelete != undefined ? '是' : '未知';
			},
			// 有效无效颜色切换
			tableRowClassName(row, index) {
				if(row.isdelete == 1) {
					return 'warning-row';
				}
				return '';
			},
			// 有效按钮切换状态
			handleChange: function(index, row) {
				this.$confirm('确认设置该条记录的状态吗？', '提示', {
					type: 'warning'
				}).then(() => {
					if(row.status == 'INSTALL') { //该设备是已安装状态
						this.$message({
							message: '该设备已安装，无法修改状态！如需修改请先解绑！',
							type: 'warning'
						});
					} else { //该设备不是已安装状态时
						let para = {
							id: row.id,
							isdelete: row.isdelete == 0 ? 1 : 0,
						}
						modifyProductInfo(para).then((res) => {
							this.$message({
								message: '设置成功',
								type: 'success'
							});
							row.isdelete = para.isdelete;
						}).catch(() => {
							this.listLoading = false;
						});
					}
				});
			},
			/*设备型号——下拉*/
			moNameChange(r) {
				if(!r || this.moNamelist.length > 0) return;
				this.moNameLoading = true;
				getMoNameList().then((res) => {
					this.moNamelist = res.data.data.records;
					this.moNameLoading = false;
				});
			},
			//新增—— 设备型号选中时自动获取设备分类
			getNameAdd() {
				for(var i = 0; i < this.moNamelist.length; i++) {
					if(this.moNamelist[i].id == this.addForm.productmodelname) {
						this.addForm.prodspec = this.moNamelist[i].prodspec;
						this.addForm.prodcategory = this.moNamelist[i].prodcategory;
					}
				}
			},
			//编辑—— 设备型号选中时自动获取设备分类
			getNameEdit() {
				for(var i = 0; i < this.moNamelist.length; i++) {
					if(this.moNamelist[i].id == this.editForm.productmodelname) {
						this.editForm.prodspec = this.moNamelist[i].prodspec;
						this.editForm.prodcategory = this.moNamelist[i].prodcategory;
					}
				}
			},
			/*库房名称——下拉*/
			stoNameChange(r) {
				if(!r || this.stoNamelist.length > 0) return;
				this.stoNameLoading = true;
				getStoNameList().then((res) => {
					this.stoNamelist = res.data.data.records;
					this.stoNameLoading = false;
				});
			},
			/*库房名称——搜索下拉*/
			stoChangeSelect(query) {
				let para = {
					showCount: 30,
					storagename: query,
				}
				this.stoNameLoading = true;
				getStoNameList(para).then((res) => {
					this.stoNamelist = res.data.data.records;
					this.stoNameLoading = false;
				});
			},
			//时间转换1
			dateFormatter: function(row, col) {
				if(row.expiredate == "" || row.expiredate == undefined) return;
				return util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd');
			},
			//时间转换2
			dateFormatterSecond: function(row, col) {
				if(row.createdate == "" || row.createdate == undefined) return;
				return util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd');
			},
			//时间转换3
			dateFormatterThird: function(row, col) {
				if(row.updatedate == "" || row.updatedate == undefined) return;
				return util.formatDate.format(new Date(row.updatedate), 'yyyy-MM-dd');
			},
			//是否的转换
			isFormat: function(row, col) {
				return row.ispack == 1 ? '是' : '否';
			},
			isFormatTwo: function(row, col) {
				return row.isold == 1 ? '是' : '否';
			},
			isFormatThree: function(row, col) {
				return row.platid == null ? '否' : '是';
			},
			//切换当前页
			handleCurrentChange(val) {
				this.currentPage = val;
				this.handleQuerySelect();
				// this.handleQuery();
			},
			//切换每页显示数量
			handleSizeChange(val) {
				this.pageSize = val;
				this.handleQuery();
			},
			// 显示关联的SIM卡信息
			//            showRelateproductinfoTableData(id){
			//                let para = {
			//                    id:id,
			//                }
			//                //获取SIM信息
			// getSIMInfoList(para).then((res) => {
			//     this.psData = res.data.data.records;
			// });
			//            },
			// 添加查询条件
			addSelect() {
				this.filters.domSearch.push({
					select: [],
					content: ''
				});
			},
			// 移除查询条件
			removeSelect(index) {
				this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
			},
			//搜索按钮——模糊查询
			handleQuerySelect() {
				let para = {
					currentPage: this.currentPage,
					showCount: this.pageSize,
					prodcategory: "E",
					isdelete: this.filters.isdelete,
					domSearch: this.filters.domSearch,
				};
				this.listLoading = true;
				getSelectListProd(para).then((res) => {
					this.total = res.data.data.totalResult;
					this.listData = res.data.data.records;
					this.listLoading = false;
				}).catch((error) => {
					this.listLoading = false;
				});
			},
			//获取保单列表
			handleQuery() {
				let para = {
					currentPage: this.currentPage,
					showCount: this.pageSize,
					prodcategory: 'E',
					// 搜索设置部分
					isdelete: this.filters.isdelete,
				};
				this.listLoading = true;
				//获取设备
				getProductInfoList(para).then((res) => {
					this.total = res.data.data.totalResult;
					this.listData = res.data.data.records;
					this.listLoading = false;
					//NProgress.done();
				}).catch((error) => {
					this.listLoading = false;
				});
			},

			//删除
			handleDel(index, row) {
				this.$confirm(' 确认删除选中记录吗?', '提示', {
					type: 'warning'
				}).then(() => {
					this.listLoading = true;
					//NProgress.start();
					let para = {
						ids: row.id,
						method: "delete"
					};
					removeProductInfo(para).then((res) => {
						this.listLoading = false;
						//NProgress.done();
						this.$message({
							message: '删除成功',
							type: 'success'
						});
						this.handleQuerySelect();
					});
				}).catch(() => {

				});
			},
			//显示编辑界面
			handleEdit(index, row) {
				$(".is-error").removeClass('is-error'); //清空验证时的红框
				this.formDetailHandle(row.id, row); //调用详情，获取车辆信息
				this.formDialogTableVisible = false; //详情页面不显示

				this.editFormVisible = true;
				this.editForm = {
					id: row.id,
					prodnum: row.prodnum,
					prodspec: row.prodspec,
					prodcategory: row.prodcategory,
					productmodelname: row.productmodelname,
					storagename: row.storagename,
					status: row.status,
					suppliername: row.suppliername,
					protocoltype: row.protocoltype,
					dictdatavalue: row.dictdatavalue,
					ispack: parseInt(row.ispack),
					isold: parseInt(row.isold),
					expiredate: row.expiredate,
					remark: row.remark,
					isdelete: parseInt(row.isdelete),
				}
				this.editFormId = {
					prodmodelid: row.prodmodelid,
					storageid: row.storageid,
					productmodelname: row.productmodelname,
					storagename: row.storagename
				}
				this.thisInput = this.editForm.prodnum; //将当前验证的字段 已获得的值存入
			},
			//显示新增界面
			handleAdd() {
				this.addFormVisible = true;
				this.addForm = {
					// act_id:'',
					// act_status:'',
					prodnum: '',
					prodspec: '',
					prodcategory: '',
					prodmodelid: '',
					productmodelname: '',
					storageid: '',
					storagename: '',
					status: 1,
					suppliername: '',
					protocoltype: '',
					dictdatavalue: '',
					ispack: 1,
					isold: 1,
					expiredate: '',
					remark: '',
					isdelete: 0,
				};
			},
			//编辑
			editSubmit() {
				this.checkoutDataF.forEach((item, index) => {
					this.checkoutDataT = item && this.checkoutDataT;
				});
				this.$refs.editForm.validate((valid) => {
					if(valid) {
						this.editLoading = true;
						let para = {
							id: this.editForm.id,
							prodnum: this.editForm.prodnum,
							// prodspec:this.editForm.prodspec,
							productmodelname: this.editForm.productmodelname,
							storagename: this.editForm.storagename,
							status: this.editForm.status,
							suppliername: this.editForm.suppliername,
							protocoltype: this.editForm.protocoltype,
							dictdatavalue: this.editForm.dictdatavalue,
							ispack: parseInt(this.editForm.ispack),
							isold: parseInt(this.editForm.isold),
							expiredate: this.editForm.expiredate,
							remark: this.editForm.remark,
							isdelete: parseInt(this.editForm.isdelete),
							prodcategory: this.editForm.prodcategory
						}
						if(this.vehInfo.length != 0) { //该设备已有绑定车辆
							if(para.status == 'INSTO' || para.status == 'ONWAY') {
								this.$message({
									message: '该设备已绑定车辆，无法修改状态！如需修改请先解绑！',
									type: 'warning'
								});
								this.editLoading = false; //提交按钮不加载
								return; //终止执行
							}
						} else { //该设备未绑定车辆
							console.log('无绑定车辆')
						}
						if(this.editFormId.productmodelname == this.editForm.productmodelname) {
							para.prodmodelid = this.editFormId.prodmodelid;
						} else {
							para.prodmodelid = this.editForm.productmodelname;
						}
						if(this.editFormId.storagename == this.editForm.storagename) {
							para.storageid = this.editFormId.storageid;
						} else {
							para.storageid = this.editForm.storagename;
						}

						if(this.checkoutDataT) { //验证通过时(无重复时)
							modifyProductInfo(para).then((res) => {
								this.editLoading = false;
								this.$message({
									message: '编辑成功',
									type: 'success'
								});
								this.$refs['editForm'].resetFields();
								this.editFormVisible = false;
								this.handleQuery();
							});
						} else {
							this.editLoading = false;
							this.$message({
								message: '标红信息已存在！',
								type: 'warning'
							});
						}
					}
				});
			},
			//新增
			addSubmit() {
				this.checkoutDataF.forEach((item, index) => {
					this.checkoutDataT = item && this.checkoutDataT;
				});
				this.$refs.addForm.validate((valid) => {
					if(valid) {
						this.addLoading = true;
						//NProgress.start();
						// let para = Object.assign({}, this.addForm);
						let para = {
							prodnum: this.addForm.prodnum,
							prodspec: this.addForm.prodspec,
							prodcategory: this.addForm.prodcategory,
							productmodelname: this.addForm.productmodelname,
							storagename: this.addForm.storagename,
							status: this.addForm.status,
							suppliername: this.addForm.suppliername,
							protocoltype: this.addForm.protocoltype,
							dictdatavalue: this.addForm.dictdatavalue,
							ispack: parseInt(this.addForm.ispack),
							isold: parseInt(this.addForm.isold),
							expiredate: this.addForm.expiredate,
							remark: this.addForm.remark,
							isdelete: parseInt(this.addForm.isdelete),
							prodmodelid: this.addForm.productmodelname,
							storageid: this.addForm.storagename,
						}
						if(this.checkoutDataT) { //验证通过时(无重复时)
							addProductInfo(para).then((res) => {
								this.addLoading = false;
								//NProgress.done();
								this.$message({
									message: '新增成功',
									type: 'success'
								});
								this.$refs['addForm'].resetFields();
								this.addFormVisible = false;
								this.handleQuery();
								console.log(para);
							});
						} else {
							this.addLoading = false;
							this.$message({
								message: '标红信息已存在！',
								type: 'warning'
							});
						}

					}
				});
			},

			//批量删除
			batchRemove() {
				var ids = this.sels.map(item => item.id).toString();
				this.$confirm('确认删除选中记录吗？', '提示', {
					type: 'warning'
				}).then(() => {
					this.listLoading = true;
					//NProgress.start();
					let para = {
						ids: ids,
						method: "delete"
					};
					removeProductInfo(para).then((res) => {
						this.listLoading = false;
						//NProgress.done();
						this.$message({
							message: '删除成功',
							type: 'success'
						});
						this.handleQuery();
					});
				}).catch(() => {

				});
			}
		},
		activated() {
			this.handleQuery();
		}

	}