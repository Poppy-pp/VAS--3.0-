    import util from '../../../utils/tools.js'
    import { getOwnerInfoList,
             addOwnerInfo,
             modifyOwnerInfo,
             getVehicleSearchInfoList,
             getVehicleInfoList,
             getSelectListOwner,
             getVehInfoList,
             modifyVehicleInfo,
             getNamebyUserid,
             getCheckoutOfOwner,
             getMoreInfoList,
         	addVehicleInfo, 
         	removeVehicleInfo,
         	getVehList, 
         	getCorpList,
         	getProductsInfoListOfVehicle, 
         	getSelectListVeh, 
         	getVehicleProd, 
         	bandVehicleProd, 
         	unBandVehicleProd, 
         	getStoNameList, 
         	getModelListInfo, 
         	getModelListInfo1,
         	getCheckoutOfVehicleInfo, 
         	selectedType,
         	getCorporatelevel_level,
         	getCorpNameList 
           } from './service';
	export default {
		name:'ownerVehicleManage',
		props: ["windowOutHeight"],
		data() {
			// 验证手机
			var checkMobile = (rule, value, callback) => {
				var reg = /^1\d{10}$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('请输入11位的手机号码'));
				} else {
					callback();
				}
			};
			//验证中文名字(只能输入中文不能大于四个子)
			var checkName = (rule, value, callback) => {
				var reg = /^[a-zA-Z\u4e00-\u9fa5]{1,10}$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('只能输入10个以内的汉字和字母'));
				} else {
					callback();
				}
			};
			//验证邮箱
			var checkEmail = (rule, value, callback) => {
				var reg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('邮箱格式不正确'));
				} else {
					callback();
				}
			};
			//验证车主身份证号(只能输入11位数字)
			var checkIdcard = (rule, value, callback) => {
				var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/g,
					flag = reg.test(value);
				if($.trim(value) == '') {
					callback();
					return;
				}
				if(!flag) {
					return callback(new Error('身份证格式不合法'));
				} else {
					callback();
				}
			};
			//验证车架号(只能输入数字和字母)
			var checkVin = (rule, value, callback) => {
				var reg = /^[0-9a-zA-Z]*$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('车架号必须为数字和字母组成'));
				} else {
					callback();
				}
			};
			//验证车价(只能输入数字)
			var checkPrice = (rule, value, callback) => {
				var reg = /^\d+(\.\d{1,2})?$/g,
					flag = reg.test(value);
				if(!flag) {
					return callback(new Error('车价必须为数字,小数最多保留两位'));
				} else {
					callback();
				}
			};
			return {
				fmtdata: util,
				filters: {
					domSearch: [{
						select: ['name'],
						content: ''
					}], //查询框
					isdelete: '0'
				},
				pickerOptions0: { //贷款到期日
					disabledDate(time) {
						return time.getTime() < Date.now() - 8.64e7;
					}
				},
				pickerOptions: { //车辆初始登记日期
				},
				carModelList: [], //车型信息
				props: { //显示车型
					value: 'value',
					label: 'label',
					children: 'children'
				},
				vehlist: [], //车类型列表
				vehLoading: false, //车类型
				corplist: [], //所属客户
				corpLoading: false, //
				corptwolist: [], //受理银行
				corptwoLoading: false, //
				modelArr: [], //车型数组
				owners: [],
				ownerList: [],
				vehDataInfo: [], //当前详情车主所持的车辆信息
				vehDataID: [], //洗澡能 存放已选择的车辆ID
				activeNamesVeh: ['0', '1'],
				prOptions: util.initProvince(),
				formDialogTableVisible: false,
				total: 0,
				currentPage: 1,
				pageSize: 15,
				listLoading: false,
				carslist: [],
				carsLoading: false,
				radio: '1',
				sels: [], //列表选中列
				prodData: [], //详情设备数据
				insData: [], //详情保险数据
				deviceListData: [], //车辆列表
				dtotal: 0,
				dcurrentPage: 1,
				dpageSize: 15,
				deviceFormVisible: false,
				devicelistLoading: false,
				prodDataInfo: [], //车主所有车辆绑定设备信息
				checkData: [], //选择绑定check
				checkoutDataT: true, //数据验证返回的布尔值true
				checkoutDataF: [], //
				thisInput: [], //编辑时存入row验证的值
				productsdatas:[],//绑定设备
				editFormVisible: false, //编辑界面是否显示
				editLoading: false,
				createname: "",
				updatename: "",
				editFormRules: {
					name: [{
							required: true,
							message: "请输入车主姓名",
							trigger: 'blur'
						},
						{
							validator: checkName,
							trigger: 'blur'
						}
					],
					mobile: [{
							required: true,
							message: "请输入车主手机号码",
							trigger: 'blur'
						},
						{
							validator: checkMobile,
							trigger: 'blur'
						}
					],
					idcard: [{
							required: true,
							message: "请输入身份证号码",
							trigger: 'blur'
						},
						{
							validator: checkIdcard,
							trigger: 'blur'
						}
					],
					vin: [{
							required: true,
							message: "请输入车架号",
							trigger: 'blur'
						},
						{
							validator: checkVin,
							trigger: 'blur'
						}
					],
					price: [{
							required: true,
							message: "请输入车价",
							trigger: 'blur'
						},
						{
							validator: checkPrice,
							trigger: 'blur'
						}
					],
				},
				//编辑界面数据
				editForm: {
					id: '',
					ownerid: '',
					name: '',
					gender: '',
					idcard: '',
					mobile: '',
					email: '',
					installaddress: '',
					postcodeoffice: '',
					maritalstatus: '',
					addressHome: '',
					addresshome: '',
					licenseplatenum: '',
					vin: '',
					enginenum: '',
					price: '',
					model: '',
					color: '',
					colorname: '',
					firstregisterdate: '',
					vehicletype: '',
					corpname: '',
					bankname: '',
					hastheftinsurance: '0',
					generalproductcount: '',
					yearsofservice: '',
					loanenddate: '',
					ownerid: '',
					isdelete: 0,
					productsNum: '',
					vehicleuse: '',
					vehiclecategory: '',
					licenseplatecolor: '',
				},

				addFormVisible: false, //新增界面是否显示
				addLoading: false,
				addFormRules: {
					name: [{
							required: true,
							message: "请输入车主姓名",
							trigger: 'blur'
						},
						{
							validator: checkName,
							trigger: 'blur'
						}
					],
					mobile: [{
							required: true,
							message: "请输入车主手机号码",
							trigger: 'blur'
						},
						{
							validator: checkMobile,
							trigger: 'blur'
						}
					],
					idcard: [{
							required: true,
							message: "请输入身份证号码",
							trigger: 'blur'
						},
						{
							validator: checkIdcard,
							trigger: 'blur'
						}
					],
					vin: [{
							required: true,
							message: "请输入车架号",
							trigger: 'blur'
						},
						{
							validator: checkVin,
							trigger: 'blur'
						}
					],
					price: [{
							required: true,
							message: "请输入车价",
							trigger: 'blur'
						},
						{
							validator: checkPrice,
							trigger: 'blur'
						}
					],
					licenseplatenum: [{
						required: true,
						message: "请输入车牌号",
						trigger: 'blur'
					}],
					model: [{
						required: true,
						message: "请输入车型",
						trigger: 'change'
					}],
					vehicletype: [{
						required: true,
						message: "请选择车类型",
						trigger: 'blur'
					}],
					corpname: [{
						required: true,
						message: "请选择所属客户",
						trigger: 'blur'
					}],
				},
				//新增界面数据
				addForm: {
					name: '',
					gender: '',
					idcard: '',
					mobile: '',
					email: '',
					installaddress: '',
					postcodeoffice: '',
					maritalstatus: '',
					addressHome: ["四川", "成都", "高新区"],
					addresshome: '',
					isdelete: 0,
					vehicleinfo: [{
						ID: ''
					}],
					licenseplatenum: '',
					vin: '',
					enginenum: '',
					price: '',
					model: '',
					color: '',
					colorname: '',
					firstregisterdate: '',
					vehicletype: '',
					corpname: '',
					bankname: '',
					hastheftinsurance: '0',
					generalproductcount: '',
					yearsofservice: '',
					loanenddate: '',
					ownerid: '',
					isdelete: 0,
					productsNum: '',
					vehicleuse: '',
					vehiclecategory: '',
					licenseplatecolor: '',
				},
				carColor: [],
				tempModel: '',
			}
		},
		methods: {
			// 数据重复验证
			checkout(p, v, index) {
				if(v == "") return;
				if(this.thisInput[index] == v) return; //编辑时 没改输入框值
				this.checkoutDataT = true; //初始化
				let paras = {
					para: p,
					value: v,
				}
				getCheckoutOfOwner(paras).then((res) => {
					let errorInput = res.data.data.param; //保存验证失败的字段
					if(!res.data.data.result) {
						this.$message({
							message: '信息输入重复！',
							type: 'warning'
						});
						this.$refs[errorInput].$el.className = "el-form-item is-error"; //输入框标红
						this.checkoutDataF[index] = false
					} else {
						this.$refs[errorInput].$el.className = "el-form-item"; //输入框恢复
						this.checkoutDataF[index] = true
					}
				});
			},
			//车型选择
			handleItemChange(queryString, cb) {
				let para = {
						_viewName: "VW_VAS_WEB_VAS_VEHICLE_MODEL",
						showCount: 10000,
						model: queryString
					},
					ownerArray = [];
				getModelListInfo1(para).then((res) => {
					if(res.data.data != null) {
						res.data.data.records.forEach(function(item, index) {
							ownerArray.push({
								value: item.model,
								brand: item.brand,
								serious: item.serious,
								subSeriesId: item.subSeriesId,
								letter: item.letter
							});
						});
						cb(ownerArray);
					}
				});
			},
			//选择车型查询颜色
			handleSelectModel(v) {
				this.tempModel = v.value;
				this.editForm.model = v.value;
				this.editForm.color = '';
				this.addForm.model = v.value;
				this.addForm.color = '';
				let para = {
					_viewName: "VW_VAS_WEB_VAS_VEHICLE_COLOR",
					showCount: 1000,
					brand: v.brand,
					serious: v.serious,
					model: v.value
				};
				getModelListInfo(para).then((res) => {
					let carModelList = [];
					res.data.data.records.forEach((res, index) => {
						if(res.color) {
							res.color.split(";").forEach((color, index) => {
								carModelList.push({
									color: color,
									color_rgb: res.color_rgb.split(";")[index]
								});
							});
						}
					});
					this.carColor = carModelList;
					if(v.subSeriesId != null && v.letter != null) {
						let pram = {
							"subseriesid": v.subSeriesId,
							"letter": v.letter
						}
						selectedType(pram);
					}
				});
			},
			/*车类型——下拉*/
			vehChange(r) {
				if(!r || this.vehlist.length > 0) return;
				this.vehLoading = true;
				getVehList().then((res) => {
					this.vehlist = res.data.data;
					this.vehLoading = false;
				});
			},
			/*客户——下拉*/
			corpChange(r) {
				this.corplist = [];
				if(!r || this.corplist.length > 0) return;
				this.corpLoading = true;
				let para = {
					showCount: 1000,
				}
				getCorpNameList(para).then((res) => {
					this.corplist = res.data.data.records;
					this.corpLoading = false;
				});
			},
			// 客户，模糊查询
			corpChangeSelect(query) {
				this.corplist = [];
				let para = {
					showCount: 30,
					corpname: query,
				}
				this.corpLoading = true;
				getCorpList(para).then((res) => {
					this.corplist = res.data.data.records;
					this.corpLoading = false;
				});
			},
			/*银行——下拉*/
			corpChangeTwo(r) {
				if(!r || this.corptwolist.length > 0) return;
				this.corptwoLoading = true;

				let para = {
					corptype: 'BANK',
				}
				getCorpList(para).then((res) => {
					this.corptwolist = res.data.data.records;
					this.corptwoLoading = false;
				});
			},
			// 银行，模糊查询
			corpChangeTwoSelect(query) {
				let para = {
					showCount: 30,
					corptype: 'BANK',
					corpname: query
				}
				this.corptwoLoading = true;
				getCorpList(para).then((res) => {
					this.corptwoLoading = false;
					if(res.data.result.code == 0) {
						this.corptwolist = res.data.data.records;
					}
				});
			},
			//选择车辆颜色
			changeCarColor(v) {
				if(typeof v != "object") return;
				if(this.editFormVisible) {
					this.editForm.colorname = v.color; //存colorname汉字
					this.editForm.color = v.color_rgb; //存color码
				}
				if(this.addFormVisible) {
					this.addForm.colorname = v.color; //存colorname汉字
					this.addForm.color = v.color_rgb; //存color码
				}
			},
			// 选择绑定列表中 确认绑定按钮事件
			choseEvent() {
				if(this.addFormVisible) { //新增页面时
					this.comlistAdd();
				} else if(this.editFormVisible) { //编辑页面时
					this.comlist();
				}
			},
			// 多选框 选择车辆时
			selsChange(sels, row) {
				this.sels = sels;
				this.checkData = row;
			},
			// 新增——绑车辆时删除
			deleteRow(index, rows) {
				rows.splice(index, 1); //删除一行
			},
			// 新增——绑车辆时确认选择
			comlistAdd() {
				this.deviceFormVisible = false;
				this.$refs.deviceListData.clearSelection();

				this.vehDataInfo = this.sels; //已选择存入列表

				// 遍历已选择的车辆 存id
				this.sels.forEach((item, index) => {
					this.vehDataID.push({
						id: item.ID
					});
				});
			},
			// 编辑——确认解绑
			cancel(index, rows) {
				let row = rows[index];
				this.$confirm('确认解除该车辆的绑定关系吗？', '提示', {
					type: 'warning'
				}).then(() => {
					let para = {
						id: row.ID,
						unBandOwner: 'y'
					};
					modifyVehicleInfo(para).then((res) => {
						rows.splice(index, 1); //删除一行
					});
				}).catch(() => {});
			},
			//编辑—— 确认绑定
			comlist() {
				this.deviceFormVisible = false;
				this.$refs.deviceListData.clearSelection();

				let para = {
					id: this.checkData.ID,
					ownerid: this.editForm.ownerid,
				};
				modifyVehicleInfo(para).then((res) => {
					if(this.vehDataInfo.length == 0) {
						this.vehDataInfo = this.sels;
					} else {
						this.vehDataInfo = this.vehDataInfo.concat(this.sels); //合并数组 = 之前原有+ 现在选择
					}
				});

			},
			//切换当前页
			dhandleCurrentChange(val) {
				this.dcurrentPage = val;
				this.getDeciceListInfo();
			},
			//切换每页显示数量
			dhandleSizeChange(val) {
				this.dpageSize = val;
				this.getDeciceListInfo();
			},
			// 获取车辆信息
			addDeviceList() {
				this.deviceFormVisible = true;
				this.filters.domSearch = [{
					select: ['licenseplatenum'],
					content: ''
				}];
				this.getDeciceListInfo();
			},
			//获取车辆信息
			getDeciceListInfo() {
				let para = {
					currentPage: this.dcurrentPage,
					showCount: this.dpageSize,
					domSearch: this.filters.domSearch,
					forBandOwner: 'y',
					isdelete: 0,
				};
				this.devicelistLoading = true;
				getVehInfoList(para).then((res) => {
					if(res.data.result.code == 4001) {
						this.$message({
							message: res.data.result.desc,
							type: 'error'
						});
						this.devicelistLoading = false;
						return;
					}
					this.dtotal = res.data.data.totalResult;
					this.deviceListData = res.data.data.records;
					this.devicelistLoading = false;
				}).catch((error) => {
					this.devicelistLoading = false;
				});
			},
			//绑定车辆数统计
			getSummaries(param) {
				const {
					columns,
					data
				} = param;
				const sums = [];
				sums[0] = "总共";
				sums[5] = data.length + "辆 车";
				return sums;
			},
			// 清空当前模糊查询
			clearAllThis() {
				this.filters.domSearch = [{
					select: ['name'],
					content: ''
				}] //显示页面的默认查询条件;
			},
			//查询清空
			clearAll() {
				this.filters.domSearch = [{
					select: [],
					content: ''
				}] //清空查询框;
			},
			//详情查看
			formDetailHandle(ownerid) {
				this.formDialogTableVisible = true;
				this.vehDataInfo = []; //清空上条数据
				this.ownerList = [];
				this.createname = "";
				this.updatename = "";
				// 获取当前车主信息
				let paraTwo = {
					id: ownerid
				}

				getOwnerInfoList(paraTwo).then((res) => {
					this.ownerList = res.data.data.records[0];

					let paraThree = {
						createby: this.ownerList.createby == null ? 0 : this.ownerList.createby,
						updateby: this.ownerList.updateby == null ? 0 : this.ownerList.updateby,
					}
					getNamebyUserid(paraThree).then((res) => {
						this.createname = res.data.data[0];
						this.updatename = res.data.data[1];
					});
				});
				//获取当前车辆信息
				let para = {
					ownerid: ownerid,
				}
				//获取车辆
				getVehicleInfoList(para).then((res) => {
					if(res.data.data.records.length == 0) {
						// this.$message({
						//                     message: '该车主暂未拥有车辆！',
						//                     type: 'warning'
						//                    });
					} else {
						this.vehDataInfo = res.data.data.records;
						this.vehID = this.vehDataInfo.ID;
					}
				});
				// 全部详情信息
				let paraThree = {
					ownerid: ownerid,
				}
				getMoreInfoList(paraThree).then((res) => {
					if(res.data.data.records[0] == undefined) { //当没有保单信息时
						return;
					} else if(res.data.data.records[0].products == undefined) { //当没有设备信息时
						return;
					} else {
						this.insData = res.data.data.records[0]; //全部详情--保单信息
						this.prodData = res.data.data.records[0].products; //设备信息
					}
				});
			},

			// 有效 鼠标移入
			mouseoverChange(e) {
				if($(e.target).hasClass('icon-duigou')) {
					$(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
				} else {
					$(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
				}
			},
			// 有效 鼠标移除
			mouseoutChange(e) {
				if($(e.target).hasClass('icon-cha')) {
					$(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
				} else {
					$(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
				}
			},
			// 排序
			sortChange(col, prop, order) {
				let para = {
					prop: col.prop,
					order: col.order.substring(0, col.order.length - 6),
				}
				console.log(para);
				// getSortList(para).then((res) => {});
			},
			// 有效无效开关
			showData(i) {
				this.filters.isdelete = i;
				this.getOwner();
			},
			// 匹配车牌号列表
			carsChange(r) {
				if(!r || this.carslist.length > 0) return;
				this.carsLoading = true;
				getVehicleSearchInfoList().then((res) => {
					this.carslist = res.data.data.records;
					this.carsLoading = false;
				});
			},
			// 有效无效颜色切换
			tableRowClassName(row, index) {
				if(row.isdelete == 1) {
					return 'warning-row';
				}
				return '';
			},
			//设备状态显示转换
			statusFormats: function(row, col) {
				return row.STATUS || row.status == 'INSTO' ? '在库' : row.STATUS || row.status == 'INSTALL' ? '已安装' : row.STATUS || row.status == 'LOST' ? '报失' : row.STATUS || row.status == 'REPAIR' ? '维修' : row.STATUS || row.status == 'DAMAGE' ? '报废' : row.STATUS || row.status == 'ONWAY' ? '在途' : '';
			},
			//婚姻显示转换
			maritalstatusFormat(row, column) {
				return row.maritalstatus == 'M' ? '已婚' : row.maritalstatus == 'S' ? '未婚' : '';
			},
			//切换当前页
			handleCurrentChange(val) {
				this.currentPage = val;
				// this.getOwner();
				this.handleQuerySelect();
			},
			//切换每页显示数量
			handleSizeChange(val) {
				this.pageSize = val;
				this.getOwner();
			},
			// 添加查询条件
			addSelect() {
				this.filters.domSearch.push({
					select: [],
					content: ''
				});
			},
			// 移除查询条件
			removeSelect(index) {
				this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
			},
			//搜索按钮——模糊查询
			handleQuerySelect() {
				let para = {
					currentPage: this.currentPage,
					showCount: this.pageSize,
					isdelete: this.filters.isdelete,
					domSearch: this.filters.domSearch,
				};
				this.listLoading = true;
				getSelectListOwner(para).then((res) => {
					this.total = res.data.data.totalResult;
					this.owners = res.data.data.records;
					this.listLoading = false;
				}).catch((error) => {
					this.listLoading = false;
				});
			},
			//获取列表
			getOwner() {
				let para = {
					currentPage: this.currentPage,
					showCount: this.pageSize,
					isdelete: this.filters.isdelete,
				};
				this.listLoading = true;
				getOwnerInfoList(para).then((res) => {
					this.total = res.data.data.totalResult;
					this.owners = res.data.data.records;
					this.listLoading = false;
				}).catch((error) => {
					this.listLoading = false;
				});
			},
			//删除
			handleDel(index, row) {
				this.$confirm('确认删除该记录吗?', '提示', {
					type: 'warning'
				}).then(() => {
					this.listLoading = true;
					let para = {
						id: row.ID,
						isdelete: 1,
					};
					modifyOwnerInfo(para).then((res) => {
						this.listLoading = false;
						if(res.data.result.desc != 'success') {
							this.$message({
								message: '当前车主绑定了有效车辆！请先解绑！',
								type: 'warning'
							});
						} else {
							this.$message({
								message: '删除成功',
								type: 'success'
							});
						}
						this.handleQuerySelect();
					});
				}).catch(() => {
					this.listLoading = false;
				});
			},
			// 有效按钮切换状态
			handleChange: function(index, row) {
				this.$confirm('确认设置该条记录的状态吗？', '提示', {
					type: 'warning'
				}).then(() => {
					let para = {
						id: row.ID,
						isdelete: row.isdelete == 0 ? 1 : 0,
					}
					modifyOwnerInfo(para).then((res) => {
						this.$message({
							message: '设置成功',
							type: 'success'
						});
						row.isdelete = para.isdelete;
					}).catch(() => {
						this.listLoading = false;
					});
				});
			},
			//显示编辑界面
			handleEdit(index, row) {
				$(".is-error").removeClass('is-error'); //清空验证时的红框
				this.formDetailHandle(row.ID); //调用详情方法，查出当前车辆所绑定设备信息
				this.formDialogTableVisible = false; //关闭详情页面
				this.editFormVisible = true;

				// 地址
				var addrVal = row.addresshome,
					addrArr, detailAdress;
				if(addrVal != null) {
					if(addrVal.split(" ").length > 0) {
						addrArr = addrVal.split(" ")[0].split(",");
						detailAdress = addrVal.split(" ")[1];
					} else {
						addrArr = addrVal.split(",");
					}
				} else {
					addrArr = ["四川", "成都", "高新区"];
				}

				this.editForm = {
					id: row.id || row.ID,
					ownerid: row.ID,
					name: row.name,
					installaddress: detailAdress,
					gender: row.gender,
					idcard: row.idcard,
					mobile: row.mobile,
					email: row.email,
					postcodeoffice: row.postcodeoffice,
					maritalstatus: row.maritalstatus,
					addressHome: addrArr,
				}

				this.thisInput.push(this.editForm.idcard, this.editForm.mobile); //将当前验证的字段 已获得的值存入
			},
			//显示新增界面
			handleAdd() {
				$(".is-error").removeClass('is-error'); //清空验证时的红框
				this.vehDataInfo = [];
				this.addFormVisible = true;
				this.addForm = {
					name: '',
					gender: 'M',
					idcard: '',
					mobile: '',
					email: '',
					postcodeoffice: '',
					maritalstatus: 'M',
					addressHome: ["四川", "成都", "高新区"],
					isdelete: 0,
				};
			},
			//编辑
			editSubmit() {
				this.$refs['editForm'].validate((valid) => {
					if(valid) {
						this.editLoading = true;
						let para = {
							id: this.editForm.id,
							name: this.editForm.name,
							gender: this.editForm.gender,
							idcard: this.editForm.idcard,
							mobile: this.editForm.mobile,
							email: this.editForm.email,
							postcodeoffice: this.editForm.postcodeoffice,
							maritalstatus: this.editForm.maritalstatus,
							addresshome: this.editForm.addressHome.toString() + ' ' + this.editForm.installaddress,
						}
						modifyOwnerInfo(para).then((res) => {
							this.editLoading = false;
							this.$message({
								message: '编辑成功',
								type: 'success'
							});
							this.$refs['editForm'].resetFields();
							this.editFormVisible = false;
							this.handleQuerySelect();
						}).catch((error) => {
							this.editLoading = false;
						});
					}
				});
			},
			//新增
			addSubmit() {
				this.checkoutDataF.forEach((item, index) => {
					this.checkoutDataT = item && this.checkoutDataT;
				});
				this.$refs['addForm'].validate((valid) => {
					if(valid) {
						this.addLoading = true;
						// let para = Object.assign({}, this.addForm);
						let para = {
							name: this.addForm.name,
							gender: this.addForm.gender,
							idcard: this.addForm.idcard,
							mobile: this.addForm.mobile,
							email: this.addForm.email,
							postcodeoffice: this.addForm.postcodeoffice,
							maritalstatus: this.addForm.maritalstatus,
							isdelete: this.addForm.isdelete,
							addresshome: this.addForm.addressHome.toString() + ' ' + (this.addForm.installaddress == undefined ? '' : this.addForm.installaddress),
							vehicleinfo: this.vehDataID
						}
						if(this.checkoutDataT) { //验证通过时(无重复时)
							addOwnerInfo(para).then((res) => {
								this.addLoading = false;
								if (res.data.result.code == 0) {
									this.addFormVisible = false;
									this.$message({
										message: '新增成功！',
										type: 'success'
									});
									this.$refs['addForm'].resetFields();
									this.handleQuerySelect();
								}
							}).catch((error) => {
								this.addLoading = false;
							});
						} else {
							this.addLoading = false;
							this.$message({
								message: '标红信息已存在！',
								type: 'warning'
							});
						}
					}
				});
			},
		},
		created() {
			this.getOwner();
		}
	}