import util from 'utils/tools';

import { getProductInfoList, getProdInfoDetails, getSIMInfoList, getBinding, unBinding ,getProdModelList,addProdModel, modifyProdModel, removeProdModel,repairProd, getSupplierList, getProtocolList, 

 getMoNameList, getStoNameList } from './service';

export default {
		name:'ProductInfo',
		props: ['windowOutHeight'],
		data() {
			return {
				fmtdata: util,
				filters: {
					domSearch: [{
						select: ['prodnum'],
						content: ''
					}], //查询框
				},
				filtersSIM: {
					domSearch: [{
						select: ['simnum'],
						content: ''
					}], //查询框
				},
				filtersYishi: {
			                    timeScope: '',
			            },
				specOptions:[{value:'有线',label:'有线',},{value:'无线',label:'无线',}],
				insuOptions:[{value:'Y',label:'是',},{value:'N',label:'否',}],
				pickerOptions: { },
				comfirLoading: false,
				listData: [],
				listLoading: false,
				total: 0,
				currentPage: 1,
				pageSize: 15,
				resID: [], //绑卡后返回的设备id和卡id
				checkData: [], //选择绑卡check
				deviceListData: [], //SIM列表
				deviceFormVisible: false,
				devicelistLoading: false,
				dtotal: 0,
				dcurrentPage: 1,
				dpageSize: 15,
				psData: [], //设备详情
				simData:[],//卡详情
				vehData:[],// 绑定车辆详情
				rowData:[],//点击详情，存储当前行数据
				formDialogTableVisible: false, //是否显示订单详情弹出

				moNamelist: [], //设备型号列表
				moNameLoading: false, //设备型号
				stoNamelist: [], //库房名称列表
				stoNameLoading: false, //库房名称
				sels: [], //列表多选选中列
				editFormVisible: false, //编辑界面是否显示
				editLoading: false,
				editFormRules: {
					prodnum: [{
						required: true,
						message: "请输入设备编号",
						trigger: 'blur'
					}],
					productmodelname: [{
						required: true,
						message: "请选择设备型号",
						trigger: 'blur'
					}],
					// storagename:[{required:true,message:"请输入库房名",trigger: 'blur'}],
				},
				//编辑界面数据
				editForm: {
					id: '',
					prodnum: '',
					prodspec: '',
					prodcategory: '',
					productmodelname: '',
					storagename: '',
					status: '',
					suppliername: '',
					protocoltype: '',
					dictdatavalue: '',
					ispack: '',
					isold: '',
					expiredate: '',
					remark: '',
					isdelete: '',
				},
				editFormId: {
					storageid: '',
					prodmodelid: '',
				},

				addFormVisible: false, //新增界面是否显示
				addLoading: false,
				addFormRules: {

				},
				//新增界面数据
				addForm: {
					// act_id:'',
					// act_status:'',
					prodnum: '',
					prodspec: '',
					prodcategory: '',
					prodmodelid: '',
					productmodelname: '',
					storageid: '',
					storagename: '',
					protocoltype: '',
					dictdatavalue: '',
					status: '',
					suppliername: '',
					ispack: 1,
					isold: 1,
					expiredate: '',
					remark: '',
					isdelete: 0,
				},
				// 类型设置
				typeFormVisible:false,//设备型号设置
				typeListData:[],//设备型号数据
				typeListLoading:false,
				typetotal:0,//设备类型分页
				typepageSize:15,
				typecurrentPage: 1,
				editable:false,//是否可编辑
				typeForm:{
					modelspec:'',
					modelname:'',
					protocolid:'',
					supplierid:'',
					modelunit:'',
					insuranceflag:'Y',
					isactive:'1'
				},
				supplierOptions:[],//供应商
				supplierLoading:false,
				protocolOptions:[],//通讯协议
				protocolLoading:false,
				activeName:'first',
				operationData:[],//设备档案数据
				repairForm:{      //维修
					repairStatus:'',
					rowProdid:'',
					remark:'',
				},
				repairFormVisible:false,//维修状态
				// moreData:[],//遗失列表数据
				// loseEmplist:[],//遗失人列表
				// loseEmpLoading:false,
				// loseFormVisible:false,
				// chooseLoseProdData:[],//已选择遗失设备组
				// loseForm:{      //遗失

				// },
				// ytotal: 0,
				// ycurrentPage: 1,
				// ypageSize: 15,
			}
		},
		methods: {
			// 打开卡类型弹窗，查询卡类型数据
			showType(){
				this.typeFormVisible = true;
				this.getProdModel();
			},
			// 查询卡类型
			getProdModel(){
				let para = {
					page: this.typecurrentPage,
					limit: this.typepageSize,
				};
				this.typeListLoading = true;
				getProdModelList(para).then((res) => {
					this.typetotal = res.data.data.total;
					this.typeListData = res.data.data.records;
					this.typeListLoading = false;
				}).catch((error) => {
					this.typeListLoading = false;
				});
			},
			// 卡型号点击新增
			typeAddClick(){
				this.typeForm = {
					modelcategory:'',
					modelname:'',
					protocolid:'',
					supplierid:'',
					modelunit:'',
					insuranceflag:'Y',
					isactive:'1'
				},//清空输入框，初始化
				this.typeListData.push(this.typeForm);
				this.editable = true;
			},
			// 确定新增
			typeAddConfirm(){
				this.typeListLoading = true;
				let para = Object.assign({}, this.typeForm);
				addProdModel(para).then((res) => {
					this.typeListLoading = false;
					this.$message.success('新增成功！');
					this.getProdModel();
					this.typeAddCancel();
				});
			},
			// 取消新增
			typeAddCancel(){
				this.editable = false;//取消编辑
				this.typeListData.splice(this.typeListData.length-1, 1); //从当前index位置开始，删除一项
			},
			// 卡类型停用和启用
			typeHandleChange(index,row){
				if (row.id === '' || row.id === undefined) return;//当新增时
				let para = {
					id:row.id,
					isactive : row.isactive,
				}
				modifyProdModel(para).then((res) => {
					this.typeListLoading = false;
					this.$message.success('修改成功！');
					this.getProdModel();
					this.typeAddCancel();
				});
			},
			// 删除卡类型
			handleDel(index,row){
				this.$confirm(' 确认删除该条设备型号记录吗?', '提示', {
					type: 'warning'
				}).then(() => {
					let para = { id:row.id  }
					removeProdModel(para).then((res) => {
						this.typeListLoading = false;
						this.$message.success('删除成功！');
						this.getProdModel();
						this.typeAddCancel();
					});
				})
			},
			// 供应商下拉
			supplierChange(r) {
				if(!r || this.supplierOptions.length > 0) return;
				this.supplierLoading = true;
				getSupplierList({limit:1000}).then((res) => {
					this.supplierOptions = res.data.data.records;
					this.supplierLoading = false;
				});
			},
			// 通讯协议
			protocolChange(r) {
				if(!r || this.protocolOptions.length > 0) return;
				this.protocolLoading = true;
				getProtocolList({limit:1000}).then((res) => {
					this.protocolOptions = res.data.data;
					this.protocolLoading = false;
				});
			},
			// 卡类型分页
			handleCurrentChangeType(val) {
				this.typecurrentPage = val;
				this.getProdModel();
				this.typeAddCancel();
			},
			//切换每页显示数量
			handleSizeChangeType(val) {
				this.typepageSize = val;
				this.getProdModel();
				this.typeAddCancel();
			},

		
			
			// -----------------------------------------------绑卡、解绑------------------------------------------------
			//点击绑卡按钮
			addDeviceList() {
				this.deviceFormVisible = true;
				this.filtersSIM.domSearch = [{select: ['simnum'],content: ''}];//初始化查询框
				this.getDeciceListInfo();
			},
			//获取SIM列表信息
			getDeciceListInfo() {
				let para = {
					page: this.dcurrentPage,
					limit: this.dpageSize,
					domSearch: this.filtersSIM.domSearch, //查询框
				};
				this.devicelistLoading = true;
				getSIMInfoList(para).then((res) => {
					this.dtotal = res.data.data.total;
					this.deviceListData = res.data.data.records;
					this.devicelistLoading = false;
				}).catch((error) => {
					this.devicelistLoading = false;
				});
			},
			// 确认绑卡
			comlist(checkData, event) {
				this.deviceFormVisible = false;
				let para = {
					prodid: this.rowData.prodid,//设备id
					simid: checkData.id,//sim卡id
				};
				this.comfirLoading = true;
				getBinding(para).then((res) => {
					if (res.data) {
						this.comfirLoading = false;
						this.$message.success( '当前设备绑卡成功！');
						this.simData = checkData;
						this.handleQuery();
					}
				});
			},
			// 点击解绑
			cancel() {
				this.$confirm('确认将当前设备和SIM解绑吗？', '提示', {
				          confirmButtonText: '确定',
				          cancelButtonText: '取消',
				          type: 'warning'
				}).then(() => {
					let para = [{
						prodid: this.rowData.prodid,//设备id
						simid: this.rowData.simid,//sim卡id
					}];
					unBinding(para).then((res) => {
						if(res.data) {
							this.$message.success('当前设备解绑成功！');
							this.simData = null;//初始化
							this.handleQuery();
						}
					});
				});
			},
			//切换当前页
			dhandleCurrentChange(val) {
				this.dcurrentPage = val;
				this.getDeciceListInfo();
			},
			//切换每页显示数量
			dhandleSizeChange(val) {
				this.dpageSize = val;
				this.getDeciceListInfo();
			},
			// 操作栏 —— 绑卡、解绑
			handleBind(index,row){
				this.rowData = row;
				if (row.bindstatus == '未绑定') {//调用绑定
					this.addDeviceList();
				}else if (row.bindstatus == '已绑定') {//调用解绑
					this.cancel();
				}
			},

			// -----------------------------------------------维修------------------------------------------------
			// 点击按钮
			handleRepair(index,row){
				if (index === 0) {//开始维修
					this.$confirm('您确定要将当前设备状态切换成【 维修中 】吗？', '提示', {
					          confirmButtonText: '确定',
					          cancelButtonText: '取消',
					          type: 'warning'
					}).then(() => {
						let para = {
							ids:[row.prodid],
							status:1
						}
						repairProd(para).then((res) => {
							this.$message.success('当前设备状态已切换维修中！');
							this.handleQuery();
						});
					});
				}else {//维修结果
					this.repairFormVisible = true;
					this.repairForm.rowProdid = row.prodid;//存储当前行 设备id
				}
			},
			// 维修结果弹窗提交
			repairSubmit(){
				let para = {
					ids:[this.repairForm.rowProdid],
					status:this.repairForm.repairStatus,
					remark:this.repairForm.remark,
				}
				repairProd(para).then((res) => {
					this.$message.success('当前设备状态已切换！');
					this.repairFormVisible = false;
					this.handleQuery();
				});
			},


			// -----------------------------------------------遗失------------------------------------------------
			// // 点击遗失
			// handleLose(row){
			// 	this.loseFormVisible = true;
			// 	this.chooseLoseProdData = [];//初始化
			// 	this.chooseLoseProdData.push(row)
			// },
			// // 确认遗失提交
			// loseSubmit(){
			// },
			// // 遗失人下拉
			// loseEmpChange(){
			// },
			// yhandleCurrentChange(val) {
			// 	this.ycurrentPage = val;
			// 	this.getDeciceListInfo();
			// },
			// //切换每页显示数量
			// yhandleSizeChange(val) {
			// 	this.ypageSize = val;
			// 	this.getDeciceListInfo();
			// },



			// -----------------------------------------------批量操作------------------------------------------------
			// 多选
			selsChange(sels) {
				this.sels = sels;
			},
			// 批量解绑
			batchUnbind(){
				const h = this.$createElement;
				let chooseProd = this.sels.map(item => h('p',null,item.prodnum));//弹窗显示设备编号组
				this.$msgbox({
				          title: '您确定要将以下关联设备进行解绑操作吗？',
				          message: h('p', { style: 'color: teal' }, chooseProd),
				          showCancelButton: true,
				          confirmButtonText: '确定',
				          cancelButtonText: '取消',
				        }).then(action => {
				          	let ids = [];
					this.sels.forEach((item,index) => {
						ids.push({prodid:item.prodid,simid:item.simid})
					})
					unBinding(ids).then((res) => {
						if(res.data) {
							this.$message.success('当前设备解绑成功！');
							this.handleQuery();
						}
					});
				});
			},
			
			
			
			/*设备型号——下拉*/
			moNameChange(r) {
				if(!r || this.moNamelist.length > 0) return;
				this.moNameLoading = true;
				getMoNameList().then((res) => {
					this.moNamelist = res.data.data.records;
					this.moNameLoading = false;
				});
			},
			//新增—— 设备型号选中时自动获取设备分类
			getNameAdd() {
				for(var i = 0; i < this.moNamelist.length; i++) {
					if(this.moNamelist[i].id == this.addForm.productmodelname) {
						this.addForm.prodspec = this.moNamelist[i].prodspec;
						this.addForm.prodcategory = this.moNamelist[i].prodcategory;
					}
				}
			},
			//编辑—— 设备型号选中时自动获取设备分类
			getNameEdit() {
				for(var i = 0; i < this.moNamelist.length; i++) {
					if(this.moNamelist[i].id == this.editForm.productmodelname) {
						this.editForm.prodspec = this.moNamelist[i].prodspec;
						this.editForm.prodcategory = this.moNamelist[i].prodcategory;
					}
				}
			},
			/*库房名称——下拉*/
			stoNameChange(r) {
				if(!r || this.stoNamelist.length > 0) return;
				this.stoNameLoading = true;
				getStoNameList().then((res) => {
					this.stoNamelist = res.data.data.records;
					this.stoNameLoading = false;
				});
			},
			/*库房名称——搜索下拉*/
			stoChangeSelect(query) {
				let para = {
					showCount: 30,
					storagename: query,
				}
				this.stoNameLoading = true;
				getStoNameList(para).then((res) => {
					this.stoNamelist = res.data.data.records;
					this.stoNameLoading = false;
				});
			},
			//详情查看
			formDetailHandle(prodid, rowdata) {
				this.formDialogTableVisible = true;
				this.psData = null;//初始化
				this.simData = null;
				this.vehData = null;
				this.rowData = rowdata;//存储当前点击行数据
				let para = { id: prodid }
				getProdInfoDetails(para).then((res) => {
					this.psData = res.data.data.product;
					this.simData = res.data.data.sim;
					this.vehData = res.data.data.vehicleInfo;
				});
			},
			
			//切换当前页
			handleCurrentChange(val) {
				this.currentPage = val;
				this.handleQuery();
			},
			//切换每页显示数量
			handleSizeChange(val) {
				this.pageSize = val;
				this.handleQuery();
			},
			// 添加查询条件
			addSelect() {
				this.filters.domSearch.push({
					select: [],
					content: ''
				});
			},
			// 移除查询条件
			removeSelect(index) {
				this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
			},
			
			//获取列表
			handleQuery() {
				let para = {
					page: this.currentPage,
					limit: this.pageSize,
					domSearch: this.filters.domSearch,
				};
				this.listLoading = true;
				getProductInfoList(para).then((res) => {
					this.total = res.data.data.total;
					this.listData = res.data.data.records;
					this.listLoading = false;
				}).catch((error) => {
					this.listLoading = false;
				});
			},

			//显示编辑界面
			handleEdit(index, row) {
				$(".is-error").removeClass('is-error'); //清空验证时的红框
				this.formDetailHandle(row.id, row); //调用详情，获取车辆信息
				this.formDialogTableVisible = false; //详情页面不显示

				this.editFormVisible = true;
				this.editForm = {
					id: row.id,
					prodnum: row.prodnum,
					prodspec: row.prodspec,
					prodcategory: row.prodcategory,
					productmodelname: row.productmodelname,
					storagename: row.storagename,
					status: row.status,
					suppliername: row.suppliername,
					protocoltype: row.protocoltype,
					dictdatavalue: row.dictdatavalue,
					ispack: parseInt(row.ispack),
					isold: parseInt(row.isold),
					expiredate: row.expiredate,
					remark: row.remark,
					isdelete: parseInt(row.isdelete),
				}
				this.editFormId = {
					prodmodelid: row.prodmodelid,
					storageid: row.storageid,
					productmodelname: row.productmodelname,
					storagename: row.storagename
				}
				this.thisInput = this.editForm.prodnum; //将当前验证的字段 已获得的值存入
			},
			//显示新增界面
			handleAdd() {
				this.addFormVisible = true;
				this.addForm = {
					// act_id:'',
					// act_status:'',
					prodnum: '',
					prodspec: '',
					prodcategory: '',
					prodmodelid: '',
					productmodelname: '',
					storageid: '',
					storagename: '',
					status: 1,
					suppliername: '',
					protocoltype: '',
					dictdatavalue: '',
					ispack: 1,
					isold: 1,
					expiredate: '',
					remark: '',
					isdelete: 0,
				};
			},
			//编辑
			editSubmit() {
				this.checkoutDataF.forEach((item, index) => {
					this.checkoutDataT = item && this.checkoutDataT;
				});
				this.$refs.editForm.validate((valid) => {
					if(valid) {
						this.editLoading = true;
						let para = {
							id: this.editForm.id,
							prodnum: this.editForm.prodnum,
							// prodspec:this.editForm.prodspec,
							productmodelname: this.editForm.productmodelname,
							storagename: this.editForm.storagename,
							status: this.editForm.status,
							suppliername: this.editForm.suppliername,
							protocoltype: this.editForm.protocoltype,
							dictdatavalue: this.editForm.dictdatavalue,
							ispack: parseInt(this.editForm.ispack),
							isold: parseInt(this.editForm.isold),
							expiredate: this.editForm.expiredate,
							remark: this.editForm.remark,
							isdelete: parseInt(this.editForm.isdelete),
							prodcategory: this.editForm.prodcategory
						}
						if(this.vehData.length != 0) { //该设备已有绑定车辆
							if(para.status == 'INSTO' || para.status == 'ONWAY') {
								this.$message({
									message: '该设备已绑定车辆，无法修改状态！如需修改请先解绑！',
									type: 'warning'
								});
								this.editLoading = false; //提交按钮不加载
								return; //终止执行
							}
						} else { //该设备未绑定车辆
							console.log('无绑定车辆')
						}
						if(this.editFormId.productmodelname == this.editForm.productmodelname) {
							para.prodmodelid = this.editFormId.prodmodelid;
						} else {
							para.prodmodelid = this.editForm.productmodelname;
						}
						if(this.editFormId.storagename == this.editForm.storagename) {
							para.storageid = this.editFormId.storageid;
						} else {
							para.storageid = this.editForm.storagename;
						}

						if(this.checkoutDataT) { //验证通过时(无重复时)
							modifyProductInfo(para).then((res) => {
								this.editLoading = false;
								this.$message({
									message: '编辑成功',
									type: 'success'
								});
								this.$refs['editForm'].resetFields();
								this.editFormVisible = false;
								this.handleQuery();
							});
						} else {
							this.editLoading = false;
							this.$message({
								message: '标红信息已存在！',
								type: 'warning'
							});
						}
					}
				});
			},
			//新增
			addSubmit() {
				this.checkoutDataF.forEach((item, index) => {
					this.checkoutDataT = item && this.checkoutDataT;
				});
				this.$refs.addForm.validate((valid) => {
					if(valid) {
						this.addLoading = true;
						//NProgress.start();
						// let para = Object.assign({}, this.addForm);
						let para = {
							prodnum: this.addForm.prodnum,
							prodspec: this.addForm.prodspec,
							prodcategory: this.addForm.prodcategory,
							productmodelname: this.addForm.productmodelname,
							storagename: this.addForm.storagename,
							status: this.addForm.status,
							suppliername: this.addForm.suppliername,
							protocoltype: this.addForm.protocoltype,
							dictdatavalue: this.addForm.dictdatavalue,
							ispack: parseInt(this.addForm.ispack),
							isold: parseInt(this.addForm.isold),
							expiredate: this.addForm.expiredate,
							remark: this.addForm.remark,
							isdelete: parseInt(this.addForm.isdelete),
							prodmodelid: this.addForm.productmodelname,
							storageid: this.addForm.storagename,
						}
						if(this.checkoutDataT) { //验证通过时(无重复时)
							addProductInfo(para).then((res) => {
								this.addLoading = false;
								//NProgress.done();
								this.$message({
									message: '新增成功',
									type: 'success'
								});
								this.$refs['addForm'].resetFields();
								this.addFormVisible = false;
								this.handleQuery();
								console.log(para);
							});
						} else {
							this.addLoading = false;
							this.$message({
								message: '标红信息已存在！',
								type: 'warning'
							});
						}

					}
				});
			},

			//时间转换1
			dateFormatter: function(row, col) {
				if(row.expiredate == "" || row.expiredate == undefined) return;
				return util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd');
			},
			//时间转换2
			dateFormatterSecond: function(row, col) {
				if(row.createdate == "" || row.createdate == undefined) return;
				return util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd');
			},
			//时间转换3
			dateFormatterThird: function(row, col) {
				if(row.updatedate == "" || row.updatedate == undefined) return;
				return util.formatDate.format(new Date(row.updatedate), 'yyyy-MM-dd');
			},
			//状态显示转换
			statusFormat: function(row, col) {
				return row.simcategory == 'ON' ? '开机' : row.simcategory == 'OFF' ? '关机' : '--';
			},
			repairFormat: function(row, col) {
				return row.isrepairing == '0' ? '正常' : row.isrepairing == '1' ? '维修中' : row.isrepairing == '2' ? '未修好' : '--';
			},
			//是否的转换
			isFormat: function(row, col) {
				return row.ispack == 1 ? '是' : '否';
			},
			isFormatTwo: function(row, col) {
				return row.isold == 1 ? '是' : '否';
			},
			isFormatThree: function(row, col) {
				return row.platid == null ? '否' : '是';
			},
		},
		created() {
			this.handleQuery();
		}

	}