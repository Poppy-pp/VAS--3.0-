    import util from 'utils/tools.js'
    import { getInsuranceInfoList, addInsuranceInfo, modifyInsuranceInfo, exportInsurance,handleInsurance,getRecordsInfo,getMoreInfo, removeInsuranceInfo, getProdInfoList, getVehicleSearchInfoList, getMoNameList, getSortList, getInCorpInfoList, getSelectListInsu, getCheckoutOfIns,getCorpList,delInsuranceInfoList,againInsuranceInfo,printInsuranceInfo } from './service';
    //组件引入
    import chinaLife from '../insuranceTemplate/board/chinaLife.vue';
    import chinaPeopleIns from '../insuranceTemplate/board/chinaPeopleIns';
    export default {
        name:'InsuranceInfo',
        props: ["windowOutHeight"],
        components:{
                    chinaLife,
                    chinaPeopleIns
        },
        data() {
            //验证车价、赔偿限额(只能输入数字)
            var checkPrice = (rule, value, callback) => {
                var reg = /^\d+(\.\d{2})?$/g,
                    flag = reg.test(value);
                if(!flag) {
                    return callback(new Error('必须为数字,小数最多保留两位'));
                } else {
                    callback();
                }
            };
            //验证特殊字符
            var checkWord = (rule, value, callback) => {
                var reg = /^[a-zA-Z\d]+$/g,
                    flag = reg.test(value);
                if(!flag) {
                    return callback(new Error('格式为数字或字母'));
                } else {
                    callback();
                }
            };
            
            return {
                fmtdata: util,
                filters: {
                    Formate(value) {
                        return new Date(value).toLocaleDateString().replace(/\//g, "-");
                    },
                    domSearch: [{
                        select: ['isactive'],
                        content: ''
                    }], //查询框
                },
                bxDialogVisible:false,//打印保单
                editFormdialogActiveName:'1',
                // flowData:{
                //  flowData:'',
                // },//保单信息
                flowData:'',
                moNamelist: [], //设备型号列表
                moNameLoading: false, //设备型号
                pickerOptions: { //日期
                },
                prOptions: util.initProvince(),
                activeNames: '',
                insurancestatusOptions: [{
                    value: 1,
                    label: '预投保'
                }, {
                    value: 2,
                    label: '已出单'
                }, {
                    value: 3,
                    label: '已拒绝'
                }],
                insurances: [],
                moreDetailsData: [], //其他详情
                somedata: [],
                customers: [],
                insurancelist: [{
                    label: '盗抢险',
                    value: 'THEFT',
                }], //保险类型列表
                insuranceLoading: false, //保险类型
                total: 0,
                currentPage: 1,
                pageSize: 15,
                listLoading: false,
                corptwolist: [], //受理银行
                corptwoLoading: false, //
                // inStatuslist:[],//保单类型列表
                // inStatusLoading:false,
                // bcorplist:[],//报单公司列表
                // bcorpLoading:false,
                incorplist: [], //保单公司列表
                incorpLoading: false,
                checkoutDataT: true, //数据验证返回的布尔值true
                checkoutDataF: [], //
                thisInput: [], //编辑时存入row验证的值
                sels: [], //列表选中列
                editFormVisible: false, //编辑界面是否显示
                editFormVisibleAgain:false,
                formDialogTableVisible: false, //是否显示订单详情弹出
                editLoading: false,
                editFormRules: {
                    policyno: [{required: true,message: "请输入保险函编号",trigger: 'blur'},{validator: checkWord,trigger: 'blur'}],
                    price:[
                        {required:true,message:"请输入车价",trigger: 'blur'},
                                {validator: checkPrice,trigger: 'blur'}
                    ],
                    indemnitylimit:[
                             {required:true,message:"请输入赔偿限额",trigger: 'blur'},
                             {validator: checkPrice,trigger: 'blur'}
                    ],
                },
                //编辑界面数据
                editForm: {
                    id: '',
                    policyno: '',
                    insurancecorpid: '',
                    vehicleid: '',
                    itype: '',
                    insurancetype: '',
                    insurancestatus: '',
                    licenseplatenum: '',
                    issuedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    expiredate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    price: '',
                    indemnitylimit: '',
                    receivingbankname: '',
                    isactive: '',
                    vin: '',
                    model: '',
                    color: '',
                    name: '',
                    gender: '',
                    mobile: '',
                    addresshome: '',
                    idcard: '',
                    prodspec: '',
                    prodmodel: '',
                    prodnum: '',
                    prodsnnum: '',
                    indemnitylimit: '',
                },
                editFormId: {
                    insurancecorpid: '',
                    insucorpname: '',
                    itype: 'THEFT',
                    insurancetype: '',
                },
                //重新出单界面数据
                editFormAgain: {
                    id: '',
                    ownerid:'',
                    policyno: '',
                    insurancecorpid: '',
                    vehicleid: '',
                    itype: '',
                    insurancetype: '',
                    insurancestatus: '',
                    licenseplatenum: '',
                    issuedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    expiredate: util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    price: '',
                    indemnitylimit: '',
                    receivingbankname: '',
                    isactive: '',
                    vin: '',
                    model: '',
                    color: '',
                    name: '',
                    gender: '',
                    mobile: '',
                    addresshome: '',
                    idcard: '',
                    prodspec: '',
                    prodmodel: '',
                    prodnum: '',
                    prodsnnum: '',
                    vehicleenginenum:'',
                    createdate:util.formatDate.format(new Date(), 'yyyy-MM-dd'),
                    remark:'',
                    serialnum:'',
                },
                editFormAgainId: {
                    insurancecorpid: '',
                    insucorpname: '',
                    itype: 'THEFT',
                    insurancetype: '',
                },

                addFormVisible: false, //新增界面是否显示
                addLoading: false,
                addFormRules: {

                },
                //新增界面数据
                addForm: {
                    policyno: '',
                    // insurancecorpid:'',
                    vehicleid: '',
                    insurancetype: '',
                    issuedate: '',
                    effectivedate: '',
                    expiredate: '',
                    price: '',
                    indemnitylimit: '',
                    receivingbankname: '',
                    isactive: 1,
                    vin: '',
                    model: '',
                    color: '',
                    name: '',
                    gender: '',
                    mobile: '',
                    addresshome: '',
                    idcard: '',
                    prodspec: '',
                    prodmodel: '',
                    prodnum: '',
                    prodsnnum: '',
                },
                pickerOptions0: {
                    disabledDate(time) {
                        return time.getTime() < Date.now() - 8.64e7;
                    }
                },
                noteTitle:'',//操作弹窗标题
                noteDialogVisible:false,
                noteForm:{
                    remark:'',
                    words:0
                },
                checkWordsStatus:true,
                activeName: 'first',
                operationData:[],//操作记录
            }
        },
        methods: {
            // 数据重复验证
            checkout(p, v, index) {
                if(v == "") return;
                if(this.thisInput == v) return; //编辑时 没改输入框值
                this.checkoutDataT = true; //初始化
                let paras = {
                    para: p,
                    value: v,
                }
                getCheckoutOfIns(paras).then((res) => {
                    let errorInput = res.data.data.param; //保存验证失败的字段
                    if(!res.data.data.result) {
                        this.$message({
                            message: '信息输入重复！',
                            type: 'warning'
                        });
                        this.$refs[errorInput].$el.className = "el-form-item is-error"; //输入框标红
                        this.checkoutDataF[index] = false;
                    } else {
                        this.$refs[errorInput].$el.className = "el-form-item"; //输入框恢复
                        this.checkoutDataF[index] = true
                    }
                });
            },
            // 验证备注字数
            checkWords(){
                this.noteForm.words = this.noteForm.remark.length;
                if (this.noteForm.remark.length > 500) {
                    this.$refs.remark.$el.className = "el-form-item el-form-item--medium is-error"; //输入框标红
                    this.checkWordsStatus = false;
                }else{
                    this.$refs.remark.$el.className = "el-form-item el-form-item--medium"; //输入框恢复
                    this.checkWordsStatus = true;
                }
            },
            // 备注提交
            remarkConfirm(){
                if (this.checkWordsStatus) {
                    
                }else {
                    this.$message({
                        message: '字数超限制！',
                        type: 'error'
                    });
                }
            },
            //查询清空
            clearAll() {
                this.filters.domSearch = [{
                    select: [],
                    content: ''
                }] //清空查询框;
            },
            // 银行，模糊查询
            corpChangeTwoSelect(query) {
                let para = {
                    showCount: 30,
                    corptype: 'BANK',
                    corpname: query
                }
                this.corptwoLoading = true;
                getCorpList(para).then((res) => {
                    this.corptwoLoading = false;
                    if(res.data.result.code == 0) {
                        this.corptwolist = res.data.data.records;
                    }
                });
            },
            //改变出单日期 联动 生效日期、失效日期 
            issuedateChange(val) {
                this.editForm.effectivedate = util.addReduceDate(new Date(val), +1);//生效日期
                var dayjian = util.addReduceDate(new Date(val),0);
                this.editForm.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期

                this.editFormAgain.effectivedate = util.addReduceDate(new Date(val), +1);//生效日期
                this.editFormAgain.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期
            },
            //改变生效日期 同步 失效日期 有效期3年
            matchDate(val) {
                var dayjian = util.addReduceDate(new Date(val), -1);
                this.editForm.issuedate = dayjian;//出单日期
                this.editForm.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期

                this.editFormAgain.issuedate = dayjian;//出单日期
                this.editFormAgain.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期
            },
            // 选择到期日自动匹配生效日
            matchDateTwo(val) {
                var dayjian = util.addReduceDate(new Date(val), +1);
                this.editForm.effectivedate = util.getDateThreeYers(dayjian, -3);
                this.editFormAgain.effectivedate = util.getDateThreeYers(dayjian, -3);
            },

            // 保单公司（出单单位）——搜索下拉
            incorpChange(r) {
                if(!r || this.incorplist.length > 0) return;
                this.incorpLoading = true;
                getInCorpInfoList().then((res) => {
                    this.incorplist = res.data.data.records;
                    this.incorpLoading = false;
                });
            },
            // 有效 鼠标移入
            mouseoverChange(e) {
                if($(e.target).hasClass('icon-duigou')) {
                    $(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
                } else {
                    $(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
                }
            },
            // 有效 鼠标移除
            mouseoutChange(e) {
                if($(e.target).hasClass('icon-cha')) {
                    $(e.target).addClass('operate-duigou icon-duigou').removeClass('operate-cha icon-cha');
                } else {
                    $(e.target).addClass('operate-cha icon-cha').removeClass('operate-duigou icon-duigou');
                }
            },
            // 排序
            sortChange(col, prop, order) {
                let para = {
                    prop: col.prop,
                    order: col.order.substring(0, col.order.length - 6),
                }
                console.log(para);
                getSortList(para).then((res) => {});
            },
            /*设备型号——下拉*/
            moNameChange(r) {
                if(!r || this.moNamelist.length > 0) return;
                this.moNameLoading = true;
                getMoNameList().then((res) => {
                    this.moNamelist = res.data.data.records;
                    this.moNameLoading = false;
                });
            },
            //编辑—— 设备型号选中时自动获取设备分类
            getNameEdit() {
                for(var i = 0; i < this.moNamelist.length; i++) {
                    if(this.moNamelist[i].id == this.editForm.prodmodel) {
                        this.editForm.prodspec = this.moNamelist[i].prodspec;
                        this.editForm.prodcategory = this.moNamelist[i].prodcategory;
                    }
                }
            },
           
            /*保险类型——下拉*/
            insuranceChange(r) {
                if(!r || this.insurancelist.length > 0) return;
                this.insuranceLoading = true;
                getInsuranceInfoList().then((res) => {
                    this.insurancelist = res.data.data.records;
                    this.insuranceLoading = false;
                });
            },

            //关闭当前页面弹窗
            closeDialog(){
                this.bxDialogVisible = false;
            },
            // 电子保单
            electronicPrint(index,row){
                this.bxDialogVisible = true;
                this.$nextTick(function(){//向子级传参
                    this.$refs.chinaLife.flowData = row;
                    this.$refs.chinaPeopleIns.flowData = row;
                })
            },
            //显示 保险模板打印
            print(data){
                    // this.flowData.flowData = '';
                    if ($(".is-error").hasClass('is-error')) return;//如果保单号重复
                    this.$refs.editForm.validate((valid) => {
                    if(valid) {
                        this.editLoading = true;
                        let para = {
                            id: data.id,
                            policyno: this.editForm.policyno,
                            vehicleid: this.editForm.vehicleid,
                            licenseplatenum: this.editForm.licenseplatenum,
                            issuedate: util.formatDate.format(new Date(this.editForm.issuedate), 'yyyy-MM-dd'),
                            effectivedate: util.formatDate.format(new Date(this.editForm.effectivedate), 'yyyy-MM-dd'),
                            expiredate: this.editForm.expiredate,
                            price: this.editForm.price,
                            indemnitylimit: this.editForm.indemnitylimit,
                            beneficiary: this.editForm.beneficiary,
                            receivingbankid:this.editForm.receivingbankname,
                            vin: this.editForm.vin,
                            model: this.editForm.model,
                            color: this.editForm.color,
                            name: this.editForm.name,
                            gender: this.editForm.gender,
                            mobile: this.editForm.mobile,
                            addressHome: this.editForm.addresshome,
                            idcard: this.editForm.idcard,
                            prodspec: this.editForm.prodspec,
                            prodmodel: this.editForm.prodmodel,
                            prodnum: this.editForm.prodnum,
                            prodsnnum: this.editForm.prodsnnum,
                            insurancestatus: this.editForm.insurancestatus,
                            indemnitylimit: this.editForm.indemnitylimit,
                            insurancecorpid: this.editForm.insucorpname,
                            itype: this.editForm.itype,
                            insurancetype: this.editForm.insurancetype,
                        }
                        if(this.editFormId.insucorpname == this.editForm.insucorpname) {
                            para.insurancecorpid = this.editFormId.insurancecorpid;
                        } else {
                            para.insurancecorpid = this.editForm.insucorpname;
                        }
                        if(this.editFormId.receivingbankname == this.editForm.receivingbankname) {
                            para.receivingbankid = this.editFormId.receivingbankid;
                        } else {
                            para.receivingbankid = this.editForm.receivingbankname;
                        }
                        if(this.editFormId.insurancetype == this.editForm.insurancetype) {
                            para.insurancetype = this.editFormId.itype;
                        } else {
                            para.itype = this.editForm.insurancetype;
                        }
                        printInsuranceInfo(para).then((res) => {
                            this.editLoading = false;
                            if(res.data.result.code == 0){
                                // this.flowData.flowData = res.data.data.flowData;
                                this.$message({
                                    message: '提交成功',
                                    type: 'success'
                                });
                                // 请求成功跳转打印页面，传参
                                this.bxDialogVisible = true;
                                         this.$nextTick(function(){//向子级传参
                                                this.$refs.chinaLife.flowData = res.data.data;
                                                this.$refs.chinaPeopleIns.flowData = res.data.data;
                                         })
                                         console.log(res.data.data)
                            }
                            this.$refs['editForm'].resetFields();
                            this.editFormVisible = false;
                            this.GetInsurances();
                        });
                    }
                });
            },
            //详情查看
            formDetailHandle(message, idinfo) {
                this.formDialogTableVisible = true;
                let para = {
                    id: idinfo,
                }
                getMoreInfo(para).then((res) => {
                        this.moreDetailsData = res.data.data;
                });
                let paraTwo = {
                    insuranceid: idinfo,
                }
                getRecordsInfo(paraTwo).then((res) => {
                        this.operationData = res.data.records;
                });
                
            },
            // 导出
            handleExport(){
                // let para = {
                //     domSearch: this.filters.domSearch,
                // }
                // exportInsurance(para).then((res) => {

                // })
                window.location.href = 'insurance/insuranceinfo/query/export?' + 'domSearch=' + this.filters.domSearch;
                // /vasms-web/api/v1/bi/biAfterSale/exportProd?_viewName=VW_BI_AFTERSALE_ALL&token=' + this.$store.getters.userInfo.token + '&month=' + this.filters.recMonth + '&corpname=' + this.filters.corpname + '&searchKey=' + this.filters.searchKey + '&showCount=' + 20000
            },
            // 车架号关联
            querySearchVin(queryString, cb) {
                let para = {
                        VIN: queryString,
                    },
                    vinNameArray = [];
                getVehicleSearchInfoList(para).then((res) => {
                    res.data.data.records.forEach(function(item, index) {
                        vinNameArray.push({
                            value: item.VIN,
                        });
                    });
                    cb(vinNameArray);
                });
            },
            handleSelectVin(item) {
                this.editForm.VIN = item.value;
                this.addForm.VIN = item.value;
            },
            //有效无效转换
            isactiveFomat(row, col) {
                return row.isactive == 1 ? '是' : row.isactive != undefined ? '否' : '未知';
            },
            // 有效无效颜色切换
            tableRowClassName(row, index) {
                if(row.isactive == 0) {
                    return 'warning-row';
                }
                return '';
            },
            // 操作备注弹窗
            handleNote: function(index, row) {
                this.noteDialogVisible = true;
                // 操作标题
                switch (index) {
                    case 0:
                        this.noteTitle = '报案登记情况'
                        break;
                    case 1:
                        this.noteTitle = '退保完成情况'
                        break;
                    case 2:
                        this.noteTitle = '理赔完成情况'
                        break;
                    case 3:
                        this.noteTitle = '理赔失败情况'
                        break;
                    case 4:
                        this.noteTitle = '撤销报案情况'
                        break;
                }

            },
            // 有效按钮切换状态
            handleChange: function(index, row) {
                this.$confirm('确认设置该条记录的状态吗？', '提示', {
                    type: 'warning'
                }).then(() => {
                    let para = {
                        id: row.id,
                        isactive: row.isactive == 0 ? 1 : 0,
                    }
                    modifyInsuranceInfo(para).then((res) => {
                        if (res.data.result.code ==0 ) {
                            this.$message({
                                message: '设置成功',
                                type: 'success'
                            });
                        }
                        row.isactive = para.isactive;
                    }).catch(() => {
                        this.listLoading = false;
                    });
                });
            },
            // 废除保单
            handleAbate: function(index, row) {
                this.$prompt('请输入废除保单备注', '提示', {
                              confirmButtonText: '确定',
                              cancelButtonText: '取消',
                        }).then(({ value }) => {
                                let para = {
                                    id: row.id,
                                    remark:value,
                                }
                                delInsuranceInfoList(para).then((res) => {
                                if (res.data.result.code ==0 ) {
                                this.$message({
                                    message: '废除成功',
                                    type: 'success'
                                });
                                this.GetInsurances();
                            }
                        }).catch(() => {
                            this.listLoading = false;
                        });
                        }).catch(() => {
                              this.$message({
                                type: 'info',
                                message: '取消输入'
                              });       
                        });
            },
            //时间转换1
            dateFormatter: function(row, col) {
                if(row.issuedate == "" || row.issuedate == undefined) return;
                return util.formatDate.format(new Date(row.issuedate), 'yyyy-MM-dd');
            },
            //时间转换2
            dateFormatterSecond: function(row, col) {
                if(row.effectivedate == "" || row.effectivedate == undefined) return;
                return util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd');
            },
            //时间转换3
            dateFormatterThird: function(row, col) {
                if(row.createdate == "" || row.createdate == undefined) return;
                return util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd hh:mm:ss');
            },
            //时间转换4
            dateFormatterForth: function(row, col) {
                if(row.updatedate == "" || row.updatedate == undefined) return;
                return util.formatDate.format(new Date(row.updatedate), 'yyyy-MM-dd hh:mm:ss');
            },
            // 保险状态转换
            statusFormatter: function(row, col) {
                return row.status == 'INVALID' ? '作废' : row.status == 'NORMAL' ? '正常' : '暂无';
            },
            //切换当前页
            handleCurrentChange(val) {
                this.currentPage = val;
                this.handleQuerySelect();
                // this.GetInsurances();
            },
            //切换每页显示数量
            handleSizeChange(val) {
                this.pageSize = val;
                this.GetInsurances();
            },
            // 添加查询条件
            addSelect() {
                this.filters.domSearch.push({
                    select: [],
                    content: ''
                });
            },
            // 移除查询条件
            removeSelect(index) {
                this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
            },
            //搜索按钮——模糊查询
            handleQuerySelect() {
                let para = {
                    page: this.currentPage,
                    limit: this.pageSize,
                    domSearch: this.filters.domSearch,
                };
                this.listLoading = true;
                getInsuranceInfoList(para).then((res) => {
                    this.total = res.data.data.total;
                    this.insurances = res.data.data.records;
                    this.listLoading = false;
                }).catch((error) => {
                    this.listLoading = false;
                });
            },
            //获取保单列表
            GetInsurances() {
                let para = {
                    page: this.currentPage,
                    limit: this.pageSize,
                    domSearch: this.filters.domSearch,
                };
                this.listLoading = true;
                getInsuranceInfoList(para).then((res) => {
                    this.total = res.data.data.total;
                    this.insurances = res.data.data.records;
                    this.insurances.dateString = '';
                    this.listLoading = false;
                }).catch((error) => {
                    this.listLoading = false;
                });
            },

            //删除
            handleDel(index, row) {
                this.$confirm('确认删除该记录吗?', '提示', {
                    type: 'warning'
                }).then(() => {
                    this.listLoading = true;
                    //NProgress.start();
                    let para = {
                        ids: row.ID,
                        method: "delete"
                    };
                    removeInsuranceInfo(para).then((res) => {
                        this.listLoading = false;
                        //NProgress.done();
                        if (res.data.result.code ==0 ) {
                            this.$message({
                                message: '删除成功',
                                type: 'success'
                            });
                            this.GetInsurances();
                        }
                    });
                }).catch(() => {

                });
            },

            // 重新出单
            handleAgain: function(index, row) {
                $(".is-error").removeClass('is-error'); //清空验证时的红框
                this.editFormVisibleAgain = true;
                this.editFormAgain = {
                    id: row.id,
                    ownerid:row.ownerid,
                    policyno: '',
                    vehicleid: row.vehicleid,
                    licenseplatenum: row.licenseplatenum,
                    itype: 'theft',
                    insurancetype: row.insurancetype,
                    issuedate: util.formatDate.format(new Date(row.issuedate), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd'),
                    expiredate: row.expiredate == undefined ? null : util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd'),
                    price: row.price,
                    indemnitylimit: row.indemnitylimit,
                    receivingbankname: row.receivingbankname,
                    vin: row.vin,
                    model: row.model,
                    color: row.color,
                    name: row.name,
                    gender: row.gender,
                    mobile: row.mobile,
                    addresshome: row.addresshome,
                    idcard: row.idcard,
                    prodspec: row.prodspec,
                    prodmodel: row.prodmodel,
                    prodnum: row.prodnum,
                    prodsnnum: row.prodsnnum,
                    insucorpname: row.insucorpname,
                    insurancestatus: row.insurancestatus,
                    insurancecorpid: row.insurancecorpid,
                    receivingbankid: row.receivingbankid,
                    indemnitylimit: row.indemnitylimit,
                    vehicleenginenum:row.vehicleenginenum,
                    createdate:util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd'),
                    remark:row.remark,
                    serialnum:row.serialnum,
                }
                this.editFormAgainId = {
                    insurancecorpid: row.insurancecorpid,
                    insucorpname: row.insucorpname,
                    receivingbankid: row.receivingbankid,
                    receivingbankname: row.receivingbankname,
                    itype: 'THEFT',
                    insurancetype: '盗抢险',
                }
                this.thisInput = this.editFormAgain.policyno; //将当前验证的字段 已获得的值存入
            },
            editSubmitAgain() {
                if ($(".is-error").hasClass('is-error')) return;//如果保单号重复
                this.$refs.editFormAgain.validate((valid) => {
                    if(valid) {
                        this.editLoading = true;
                        let para = {
                            linkid: this.editFormAgain.id,
                            ownerid:this.editFormAgain.ownerid,
                            policyno: this.editFormAgain.policyno,
                            vehicleid: this.editFormAgain.vehicleid,
                            licenseplatenum: this.editFormAgain.licenseplatenum,
                            issuedate: util.formatDate.format(new Date(this.editFormAgain.issuedate), 'yyyy-MM-dd'),
                            effectivedate: util.formatDate.format(new Date(this.editFormAgain.effectivedate), 'yyyy-MM-dd'),
                            expiredate: this.editFormAgain.expiredate,
                            price: this.editFormAgain.price,
                            indemnitylimit: this.editFormAgain.indemnitylimit,
                            beneficiary: this.editFormAgain.beneficiary,
                            receivingbankid:this.editFormAgain.receivingbankname,
                            vin: this.editFormAgain.vin,
                            model: this.editFormAgain.model,
                            color: this.editFormAgain.color,
                            name: this.editFormAgain.name,
                            gender: this.editFormAgain.gender,
                            mobile: this.editFormAgain.mobile,
                            addressHome: this.editFormAgain.addresshome,
                            idcard: this.editFormAgain.idcard,
                            prodspec: this.editFormAgain.prodspec,
                            prodmodel: this.editFormAgain.prodmodel,
                            prodnum: this.editFormAgain.prodnum,
                            prodsnnum: this.editFormAgain.prodsnnum,
                            insurancestatus: this.editFormAgain.insurancestatus,
                            indemnitylimit: this.editFormAgain.indemnitylimit,
                            insurancecorpid: this.editFormAgain.insucorpname,
                            itype: this.editFormAgain.itype,
                            insurancetype: this.editFormAgain.insurancetype,
                            vehicleenginenum:this.editFormAgain.vehicleenginenum,
                            createdate:util.formatDate.format(new Date(this.editFormAgain.createdate), 'yyyy-MM-dd'),
                            remark:this.editFormAgain.remark,
                            serialnum:this.editFormAgain.serialnum,
                        }
                        if(this.editFormAgainId.insucorpname == this.editFormAgain.insucorpname) {
                            para.insurancecorpid = this.editFormAgainId.insurancecorpid;
                        } else {
                            para.insurancecorpid = this.editFormAgain.insucorpname;
                        }
                        if(this.editFormAgainId.receivingbankname == this.editFormAgain.receivingbankname) {
                            para.receivingbankid = this.editFormAgainId.receivingbankid;
                        } else {
                            para.receivingbankid = this.editFormAgain.receivingbankname;
                        }
                        if(this.editFormAgainId.insurancetype == this.editFormAgain.insurancetype) {
                            para.insurancetype = this.editFormAgainId.itype;
                        } else {
                            para.itype = this.editFormAgain.insurancetype;
                        }
                        againInsuranceInfo(para).then((res) => {
                            this.editLoading = false;
                            if (res.data.result.code ==0 ) {
                                this.$message({
                                    message: '重新出单成功',
                                    type: 'success'
                                });
                            }
                            this.$refs['editFormAgain'].resetFields();
                            this.editFormVisibleAgain = false;
                            this.GetInsurances();
                        });
                    }
                });
            },
            //显示编辑界面
            handleEdit(index, row) {
                $(".is-error").removeClass('is-error'); //清空验证时的红框
                this.editFormVisible = true;
                this.editForm = {
                    id: row.id,
                    policyno: row.policyno,
                    vehicleid: row.vehicleid,
                    licenseplatenum: row.licenseplatenum,
                    itype: 'THEFT',
                    insurancetype: row.insurancetype,
                    issuedate: util.formatDate.format(new Date(row.issuedate), 'yyyy-MM-dd'),
                    effectivedate: util.formatDate.format(new Date(row.effectivedate), 'yyyy-MM-dd'),
                    expiredate: row.expiredate == undefined ? null : util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd'),
                    price: row.price,
                    indemnitylimit: row.indemnitylimit,
                    receivingbankname: row.receivingbankname,
                    vin: row.vin,
                    model: row.model,
                    color: row.color,
                    name: row.name,
                    gender: row.gender,
                    mobile: row.mobile,
                    addresshome: row.addresshome,
                    idcard: row.idcard,
                    prodspec: row.prodspec,
                    prodmodel: row.prodmodel,
                    prodnum: row.prodnum,
                    prodsnnum: row.prodsnnum,
                    insucorpname: row.insucorpname,
                    insurancestatus: row.insurancestatus,
                    insurancecorpid: row.insurancecorpid,
                    receivingbankid: row.receivingbankid,
                    indemnitylimit: row.indemnitylimit,
                }
                this.editFormId = {
                    insurancecorpid: row.insurancecorpid,
                    insucorpname: row.insucorpname,
                    receivingbankid: row.receivingbankid,
                    receivingbankname: row.receivingbankname,
                    itype: 'THEFT',
                    insurancetype: '盗抢险',
                }
                this.thisInput = this.editForm.policyno; //将当前验证的字段 已获得的值存入
            },
            //显示新增界面
            handleAdd() {
                this.addFormVisible = true;
                this.addForm = {
                    policyno: '',
                    // insurancecorpid:'',
                    vehicleid: '',
                    vin: '',
                    insurancetype: '',
                    issuedate: '',
                    effectivedate: '',
                    expiredate: '',
                    price: '',
                    indemnitylimit: '',
                    beneficiary: '',
                    isactive: 1,
                    receivingbankname:'',
                };

            },
            //编辑
            editSubmit() {
                if ($(".is-error").hasClass('is-error')) return;//如果保单号重复
                this.$refs.editForm.validate((valid) => {
                    if(valid) {
                        this.editLoading = true;
                        let para = {
                            id: this.editForm.id,
                            policyno: this.editForm.policyno,
                            vehicleid: this.editForm.vehicleid,
                            licenseplatenum: this.editForm.licenseplatenum,
                            issuedate: util.formatDate.format(new Date(this.editForm.issuedate), 'yyyy-MM-dd'),
                            effectivedate: util.formatDate.format(new Date(this.editForm.effectivedate), 'yyyy-MM-dd'),
                            expiredate: this.editForm.expiredate,
                            price: this.editForm.price,
                            indemnitylimit: this.editForm.indemnitylimit,
                            beneficiary: this.editForm.beneficiary,
                            receivingbankid:this.editForm.receivingbankname,
                            vin: this.editForm.vin,
                            model: this.editForm.model,
                            color: this.editForm.color,
                            name: this.editForm.name,
                            gender: this.editForm.gender,
                            mobile: this.editForm.mobile,
                            addressHome: this.editForm.addresshome,
                            idcard: this.editForm.idcard,
                            prodspec: this.editForm.prodspec,
                            prodmodel: this.editForm.prodmodel,
                            prodnum: this.editForm.prodnum,
                            prodsnnum: this.editForm.prodsnnum,
                            insurancestatus: this.editForm.insurancestatus,
                            indemnitylimit: this.editForm.indemnitylimit,
                            insurancecorpid: this.editForm.insucorpname,
                            itype: this.editForm.itype,
                            insurancetype: this.editForm.insurancetype,
                        }
                        if(this.editFormId.insucorpname == this.editForm.insucorpname) {
                            para.insurancecorpid = this.editFormId.insurancecorpid;
                        } else {
                            para.insurancecorpid = this.editForm.insucorpname;
                        }
                        if(this.editFormId.receivingbankname == this.editForm.receivingbankname) {
                            para.receivingbankid = this.editFormId.receivingbankid;
                        } else {
                            para.receivingbankid = this.editForm.receivingbankname;
                        }
                        if(this.editFormId.insurancetype == this.editForm.insurancetype) {
                            para.insurancetype = this.editFormId.itype;
                        } else {
                            para.itype = this.editForm.insurancetype;
                        }
                        modifyInsuranceInfo(para).then((res) => {
                            this.editLoading = false;
                            if (res.data.result.code ==0 ) {
                                this.$message({
                                    message: '编辑成功',
                                    type: 'success'
                                });
                            }
                            this.$refs['editForm'].resetFields();
                            this.editFormVisible = false;
                            this.GetInsurances();
                        });
                    }
                });
            },
            //新增
            addSubmit() {
                this.$refs.addForm.validate((valid) => {
                    if(valid) {
                        this.$confirm('确认提交吗？', '提示', {}).then(() => {
                            this.addLoading = true;
                            let para = {
                                id: this.addForm.id,
                                policyno: this.addForm.policyno,
                                vehicleid: this.addForm.vehicleid,
                                vin: this.addForm.vin,
                                insurancetype: this.addForm.insurancetype,
                                issuedate: this.addForm.issuedate,
                                effectivedate: this.addForm.effectivedate,
                                expiredate: this.addForm.expiredate,
                                price: this.addForm.price,
                                indemnitylimit: this.addForm.indemnitylimit,
                                beneficiary: this.addForm.beneficiary,
                                receivingbankname:this.addForm.receivingbankname,
                                isactive: this.addForm.isactive,
                            }
                            addInsuranceInfo(para).then((res) => {
                                this.addLoading = false;
                                if (res.data.result.code ==0 ) {
                                    this.$message({
                                        message: '新增成功',
                                        type: 'success'
                                    });
                                }
                                this.$refs['addForm'].resetFields();
                                this.addFormVisible = false;
                                this.GetInsurances();
                            });
                        });
                    }
                });
            },
            selsChange(sels) {
                this.sels = sels;
            },
        },
        created() {
            this.GetInsurances();
        }

    }