import { loginbyUser, logout, getUserInfo } from '@/api/login'
import { getFormCounts } from '@/api/api.js'
import { setToken, removeToken,getToken } from '@/utils/auth'
import Cookies from 'js-cookie'
import * as types from '../mutaion-types'
import storage from '@/utils/storage'

const user = {
  state: {
    token: '',
    roles: [],
    name: '',
    avatar: '',
    employeeinfo: '',
    userid:'',
    amountcount:0
  },
  mutations: {
    [types.SET_TOKEN]: (state, token) => {
      state.token = token
    },
    [types.SET_ROLES]: (state, roles) => {
      state.roles = roles
    },
    [types.SET_EMPLOYEEINFO]: (state, employeeinfo) => {
      state.employeeinfo = employeeinfo
    },
    [types.SET_NAME]: (state, name) => {
      state.name = name
    },
    [types.SET_AVATAR]: (state, avatar) => {
      state.avatar = avatar
    },
    [types.SET_USERID]: (state, userid) => {
      state.userid = userid
    },
    [types.SET_AMOUNTCOUNT]: (state, amountcount) => {
      state.amountcount = amountcount
    },
  },
  actions: {
    loginbyUser({ commit }, { username, password, remember_me }) {
      return new Promise(async (resolve, reject) => {
        try {
          const response = await loginbyUser(username, password, remember_me)
          if (response.data) {
            commit(types.SET_TOKEN, response.data.token)
            setToken(response.data.token)
            Cookies.set('user', username)
          }
          resolve(response)
        } catch (error) {
          reject(error)
        }
      })
    },
    logout({ commit, state }) {
      return new Promise(async (resolve, reject) => {
        try {
          await logout(state.token)
          commit(types.SET_ROLES, '')
          commit(types.SET_ROLES, [])
          Cookies.remove('user')
          removeToken()
          resolve()
        } catch (error) {
          reject(error)
        }
      })
    },
    felogout({ commit }) {
      return new Promise(resolve => {
        commit(types.SET_TOKEN, '')
        removeToken()
        resolve()
      })
    },
    getUserInfo({ commit }) {
      return new Promise(async (resolve, reject) => {
        try {
          const response = await getUserInfo(getToken())
          const roles = response.data
          const name = storage.get('user').employeeInfo.employeename
          const avatar = storage.get('user').employeeInfo.headiconpath
          const employeeinfo = storage.get('user').employeeInfo
          const userid = storage.get('user').id
          

          commit(types.SET_ROLES, roles)
          commit(types.SET_NAME, name)
          commit(types.SET_AVATAR, avatar)
          commit(types.SET_EMPLOYEEINFO, employeeinfo)
          commit(types.SET_USERID, userid)
          

          resolve(response)
        } catch (error) {
          reject(error)
        }
      })
    },
    getAmountCount({ commit }) {
        return new Promise(async (resolve, reject) => {
          try {
            const response = await getFormCounts()
            const amountCount = response.data.data
            commit(types.SET_AMOUNTCOUNT, amountCount)
            resolve(response)
          } catch (error) {
            reject(error)
          }
        })
      }
  }
}

export default user
