import util from 'utils/tools';
import async from 'async';
import { getTodoInfoList,  } from './service';
 export default {
        props:['windowOutHeight'],
        data() {
            return {
                util:util, 
                //搜索 筛选信息
                filters: {
                    domSearch: [{
                        select: ['orderno'],
                        content: ''
                    }], //查询框
                    timeScope: '',
                },
                
                // 完成安装弹窗
                finishInstallDialogVisible:false,
                installStep:'1',//第一步第二步，步骤状态
                picLargedialogVisible:false,//图片放大
                picLargeImageUrl:'',//图片路径
                startForm:{//第一步
                    reson:'',
                },
                startFormRules:{},
                tableData:[],
                codeloading:false,
                InstallPositionArray: [],//设备安装位置
                endForm:{//第二步
                    value:'',
                },
                endFormRules:{},
                prodData: [{
                  date: '2016-05-02',
                  name: '王小虎',
                  address: '上海市普陀区金沙江路 1518 弄'
                }, {
                  date: '2016-05-04',
                  name: '王小虎',
                  address: '上海市普陀区金沙江路 1518 弄'
                }],
                activities: [{
                  content: '上线质量',
                }, {
                  content: '定位方式',
                }, {
                  content: '卫星或基站数量',
                }, {
                  content: '卫星或基站型号强度',
                }, {
                  content: '定位地址',
                }],

                todo:[],//列表数据
                total: 0,
                pageSize:15,
                currentPage: 0,
                listLoading: false,
                stepState: 0,//当前tab页状态
                curStateData:{},//当前新装节点状态值
                realTimeRefreshLoading:false,
                //新装数量
                fromNum:{
                    num0:0,
                    num1:0,
                    num2:0,
                    num3:0,
                    num4:0,
                    num5:0,
                },
                delorder:{//废单、退单
                    orderReasonDialogVisible:false,
                    reson:'',
                    delOrderLoading:false,
                },
                expandLoading:false,//表格详情
                opHistoryData:[],//操作记录
                historyListLoading:false,

                copName:[],//公司下拉
                copLoading:false,
                isExpandeds:true,
                indDe:0,
                curTaskId:'',//当前流程任务id
                accept:"jpg,png,jpeg",
                
                //静态数据详情展现
                ruleFormStatic:{
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    },
                    pictures:[]
                },
                expandRuleFormStatic:{
                    vehicleInfo:{
                        model:'',
                        color:'',
                        licenseplatenum:'',
                        vin:'',
                        price:'',
                        yearsofservice:'',
                        receivingbank:{}
                    },
                    ownerInfo:{
                        name:'',
                        idcard:'',
                        mobile:''
                    },
                    flowData:{
                        verify_result:'',
                        apply_remark:''
                    },
                    installEmployee:{
                        employeename:''
                    },
                    installGroupInfo:{
                        groupname:''
                    },
                    pictures:[]
                },


            }    
        },
        methods: {
            // -------------------------------------------------------------------施工节点---------------------------------------------------------------------------------
            // 放大图片
            handlePictureCardPreview(file) {
                $(".v-modal").css('height','0');//隐藏图片的dialog遮罩层
                this.picLargeImageUrl = file.url;
                this.picLargedialogVisible = true;
            },
            // 关闭放大图片
            closeLargePic(){
                $(".v-modal").css('height','100%');//显示外部dialog遮罩层
            },
            handleRemove(file, fileList) {
                console.log(file, fileList);
            },
            // 开始安装—确认消息
            startInstall(){
                this.$confirm('确定是否开始安装？', '提示', {
                  confirmButtonText: '确定',
                  cancelButtonText: '取消',
                  type: 'warning'
                }).then(() => {
                  
                }).catch(() => {});
            },
            // 开始安装下一步
            nextStep(){
                this.installStep = '2';
            },
            // 完成安装上一步
            previousStep(){
                this.installStep = '1';
            },
            // 开始安装-取消按钮
            cancelInstall(){
                this.finishInstallDialogVisible = false;
            },
            // 完成安装-关闭弹窗
            closeFinish(){
                this.installStep = '1';
            },
            //安装位置初始化
            changeInstallDecode(r) {
                if(!r || this.InstallPositionArray.length > 0) return;
                this.codeloading = true;
                getInstallPositionCode().then((res) => {
                    this.InstallPositionArray = res.data.data.records;
                    this.codeloading = false;
                });
            },
            // 开始
            startConfirm(){
                this.startInstallDialogVisible = false;
                this.finishInstallDialogVisible = true;
            },
            // 双击设备添加设备
            deviceClickHandle(row, event) {
                
            },
            // 完成
            confirmFinishInstall(){

            },







            //---------------------------------------------------------------------------废除订单-----------------------------------------------------------------
            deleteOrder(index,row){
                this.delorder.processInstanceId = row.processInstanceId;
                this.delorder.orderReasonDialogVisible = true;
            },
            // 确认废单
            comfirDelOrder(){
                let para = {
                    id:this.delorder.processInstanceId,
                    reson:this.delorder.reson
                }
                this.delorder.delOrderLoading = true;
                deleteProcess(para).then((res) => {
                    this.delorder.delOrderLoading = false;
                    this.delorder.orderReasonDialogVisible = false;
                    this.getTodo();
                });
            },



            //-----------------------------------------------------------------------列表数据展开查看详情---------------------------------------------------------
            expandHandle(row, expandeds){
                if(!this.isExpandeds){
                    this.isExpandeds = true;
                    return;
                }
                if(expandeds.length != 0 && this.curTaskId != row.id){
                    this.clickState = 5;
                    this.expandLoading = true;
                    this.getOperationRecord(row);
                    this.getFormData(row);
                };
                if(expandeds.length > 1) {
                    this.isExpandeds = false;
                    this.$refs.todeTable.toggleRowExpansion(expandeds[0],false);
                };
            },
            // 操作记录
            getOperationRecord(row){
                let para = {
                    id:row.executionId
                }
                this.historyListLoading = true;
                getOperationRecord(para).then((res) => {
                    this.historyListLoading = false;
                    if(res.data.result.code == 0){
                        this.opHistoryData = res.data.data;
                    }
                });
            },



            
            
            
            
            
          
            
            //实时获取设备位置 和 在线情况
            realTimeRefreshPro(gmapname){
                let _this = this,
                pro = _this.ruleFormStatic,
                len = pro.installDetails.length;
                console.log(pro)
                if(_this.$refs[gmapname]) _this.$refs[gmapname].clearMap();
                if(len > 0){
                    let i = _this.indDe,
                    para = {id:pro.installDetails[i].packInfo.E_PRODUNUM};
                    _this.realTimeRefreshLoading = true;
                    async.waterfall([
                        function(callback) {
                            cldeviceIsOnstate(para).then((res) => {
                                let data = res.data.data.realdata;
                               
                                callback(null, data);
                            });
                            
                        },
                        function(data, callback) {
                            if(data){
                                if(data.lng == 0 || data.lat == 0){
                                    _this.ruleFormStatic.installDetails[i].curaddress = "无定位";
                                    callback(null, data);
                                }else{
                                    _this.$refs[gmapname].getAddress(util.transformWGStoGCJ(data.lng,data.lat),para.id,(res)=>{
                                        _this.ruleFormStatic.installDetails[i].curaddress = res;
                                        callback(null, data);
                                    });
                                }
                            }else{
                                _this.ruleFormStatic.installDetails[i].curaddress = "无定位";
                                callback(null, data);
                            }
                        },
                    ], function (err, data) {
                        console.log(data)
                        if(data){
                            switch(data.istate){
                                case 0:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "行驶";
                                break;
                                case 1:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "离线";
                                break;
                                case 2:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "停车";
                                break;
                                case 3:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "报警";
                                break;
                                case 4:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "无效定位";
                                break;
                                case 5:
                                    _this.ruleFormStatic.installDetails[i].curonlinestatus = "未定位";
                                break;
                            }
                            _this.ruleFormStatic.installDetails[i].recvtime = data.recvtime;
                        }else{
                            _this.ruleFormStatic.installDetails[i].curaddress = "无定位";
                            _this.ruleFormStatic.installDetails[i].curonlinestatus ="未在线";
                        }
                         _this.realTimeRefreshLoading = false;
                        _this.indDe++;
                        if(_this.indDe < len) _this.realTimeRefreshPro(gmapname);
                        if(_this.indDe == len) _this.indDe = 0;
                    });
                }
            },
           
        
            //改变新装状态获取对应数据列表
            changeStateHandle(v){
                if(v == 0){
                    this.curStateData = {};
                }
                if(v == 1){
                    this.curStateData = {
                        taskDefinitionKey:"node_apply"
                    };
                }
                if(v == 2){
                    this.curStateData = {
                        taskDefinitionKey:"node_send"
                    };
                }
                if(v == 3){
                    this.curStateData = {
                        taskDefinitionKey:"node_work"
                    };
                }
                if(v == 4){
                    this.curStateData = {
                        taskDefinitionKey:"node_service_verify"
                    };
                }
                if(v == 5){
                    this.curStateData = {
                        taskDefinitionKey:"node_insurance"
                    };
                }
                if(v == 6){
                    this.curStateData = {
                        taskDefinitionKey:"node_work_receive"
                    };
                }
                this.getTodo();
            },
            
            //获取列表
            getTodo() {
                let para = {
                    page   : this.currentPage,
                    limit   : this.pageSize,
                    domSearch   : this.filters.domSearch,
                    startTime     : this.filters.timeScope?(this.filters.timeScope[0]?util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd hh:mm:ss'):''):'',
                    endTime        : this.filters.timeScope?(this.filters.timeScope[1]?util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd hh:mm:ss'):''):'',
                };
                para = Object.assign(para,this.curStateData);
                this.listLoading = true;
                getTodoInfoList(para).then((res) => {
                    this.listLoading = false;
                        this.total       = res.data.data.total;
                        this.todo        = res.data.data.records;
                        if (para.taskDefinitionKey == '' || para.taskDefinitionKey == undefined) {
                                this.fromNum.num0 = res.data.data.totalResult;
                        }
                        // this.initFormNum();
                    }).catch((error) => {
                        this.listLoading = false;
                    });
            },
            //切换当前页
            handleCurrentChange(val) {
                this.currentPage = val;
                this.getTodo();
            },
            //切换每页显示数量
            handleSizeChange(val) {
                this.pageSize = val;
                this.getTodo();
            },
           
            //清空查询表单
            resetForm(formName) {
                this.$refs[formName].resetFields();
            },
            //初始化新装各个状态总数  待优化
            initFormNum(){
                var user = sessionStorage.getItem('user');
                user = JSON.parse(user);
                let para = {
                    type:1
                };
                getFormCount(para).then((res) => {
                    let node = res.data.data;
                    if(node == null) return;
                    this.fromNum.num1 = (node.proc_new_build_node_apply + node.node_apply) ? (node.proc_new_build_node_apply + node.node_apply) : 
                        node.proc_new_build_node_apply ? node.proc_new_build_node_apply : 
                        node.node_apply ? node.node_apply : 0;
                    this.fromNum.num2 =  (node.proc_new_build_node_send + node.node_send) ? (node.proc_new_build_node_send + node.node_send) : 
                        node.proc_new_build_node_send ? node.proc_new_build_node_send : 
                        node.node_send ? node.node_send : 0;
                    this.fromNum.num3 = (node.proc_new_build_node_work + node.node_work) ? (node.proc_new_build_node_work + node.node_work) :
                        node.proc_new_build_node_work ? node.proc_new_build_node_work : 
                        node.node_work ? node.node_work : 0;
                    this.fromNum.num4 = (node.proc_new_build_node_service_verify + node.node_service_verify) ? (node.proc_new_build_node_service_verify + node.node_service_verify) : 
                        node.proc_new_build_node_service_verify ? node.proc_new_build_node_service_verify : 
                        node.node_service_verify ? node.node_service_verify : 0;
                    this.fromNum.num5 = (node.proc_new_build_node_insurance + node.node_insurance) ? (node.proc_new_build_node_insurance + node.node_insurance) :
                        node.proc_new_build_node_insurance ? node.proc_new_build_node_insurance : 
                        node.node_insurance ? node.node_insurance : 0;
                   this.fromNum.num6 = (node.proc_new_build_node_work_receive + node.node_work_receive) ? (node.proc_new_build_node_work_receive + node.node_work_receive) :
                        node.proc_new_build_node_work_receive ? node.proc_new_build_node_work_receive : 
                        node.node_work_receive ? node.node_work_receive : 0;

                    // this.fromNum.num1 = (node.proc_new_build_node_apply + node.node_apply)?(node.proc_new_build_node_apply + node.node_apply):0;
                    // this.fromNum.num2 = (node.proc_new_build_node_send  + node.node_send)?(node.proc_new_build_node_send +  node.node_send):0;
                    // this.fromNum.num3 = (node.proc_new_build_node_work +  node.node_work)?(node.proc_new_build_node_work + node.node_work):0;
                    // this.fromNum.num4 = (node.proc_new_build_node_service_verify + node.node_service_verify)?(node.proc_new_build_node_service_verify + node.node_service_verify):0;
                    // this.fromNum.num5 = (node.proc_new_build_node_insurance + node.node_insurance)?(node.proc_new_build_node_insurance + node.node_insurance):0;
                    // this.fromNum.num0 = (this.fromNum.num1+this.fromNum.num2+this.fromNum.num3+this.fromNum.num4+this.fromNum.num5)?(this.fromNum.num1+this.fromNum.num2+this.fromNum.num3+this.fromNum.num4+this.fromNum.num5):0;
                });
            },
           
            // 添加查询条件
            addSelect () {
                this.filters.domSearch.push({
                    select: [],
                    content: ''
                });
            },
            // 移除查询条件
            removeSelect (index) {
                this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
            },
            //格式化后台传来的时间戳
            dateFormatter(row,col){
                return util.formatDate.format(new Date(row.createTime), 'yyyy-MM-dd hh:mm:ss');
            },
        },
        //初始化数据
        created(){
            this.getTodo();
        }
    }