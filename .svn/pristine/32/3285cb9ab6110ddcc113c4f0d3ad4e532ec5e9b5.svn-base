import util from 'utils/tools';
import {
    cldeviceIsOnstate,
    addInsuranceIssue,
    get,
    getInsurancePolicyno,
    initForm
} from './service';
import { getVehList } from "@/views/basicManage/ownerVehicleManage/service";
import { getParentInfoList } from '@/views/sysManage/organizationManage/service'
import { getToken } from '@/utils/auth'
import { getMoreInfo, modifyInsuranceInfo } from '@/views/insuranceManage/insuranceList/service'
import { checkAllMobile, checkVin, checkPolicyName, checkVehicleNumber, checkMobile, checkFloatNum } from '@/utils/formValidation'
import { getAllColorList, getAllInfoList } from "../../basicManage/carmodelManage/service";
import { getOrderById } from '../addOrder/service'

export default {
    name: 'addInsurance',
    data () {
        return {
            loading: false,
            ruleFormStatic: {
                vehicleInfo: {
                    model: '',
                    color: '',
                    licenseplatenum: '',
                    vin: '',
                    price: '',
                    yearsofservice: '',
                    receivingbank: {
                        corpname: ''
                    }
                },
                corporateInfo: {
                    corpname: ''
                },
                insuranceInfo: {
                    insurancecorpid: ''
                },
                ownerInfo: {
                    name: '',
                    idcard: '',
                    mobile: ''
                },
                flowData: {
                    verify_result: '',
                    apply_remark: ''
                },
                declarEmployee: {},
                installEmployee: {
                    employeename: ''
                },
                installGroupInfo: {
                    groupname: ''
                },
                declaretype: '',
                handlename: ''
            },
            //启动报单提交表单信息
            ruleForm: initForm(),
            ruleFormrules: {
                insurancecorpid: [{required: true, message: '请选择保险公司', trigger: 'change'}],
                policyno: [{required: true, message: '请输入保单编号', trigger: 'blur'}],
                issuedate: [{required: true, message: '请选择出单日期', trigger: 'change'}],
                effectivedate: [{required: true, message: '请选择保险生效日期', trigger: 'change'}],
                expiredate: [{required: true, message: '请选择失效日期', trigger: 'change'}],
                indemnitylimit: [{required: true, message: '请输入保单赔偿限额', trigger: 'blur'}, {validator: checkFloatNum, trigger: 'blur'},
                    {
                        validator: (rule, value, callback) => {
                            if (value > this.form.price) {
                                this.ruleForm.priceInsucorp = 0
                                callback(new Error('赔偿限额不能超过车辆购置价'))
                            } else {
                                callback()
                            }
                        }, trigger: 'blur'
                    }
                ],
                price: [{required: true, message: '请输入万网盗抢保障服务费', trigger: 'blur'}, {validator: checkFloatNum, trigger: 'blur'}],
                vehicleowner: [{required: true, message: '请输入车主姓名', trigger: 'blur'}],
                vehicleowneridcard: [{required: true, message: '请输入身份证号', trigger: 'blur'}],
                vehicleownercontact: [{required: true, message: '请输入手机号', trigger: 'blur'}, {validator: checkAllMobile, trigger: 'blur'}],
                vehicleenginenum: [{required: true, message: '请输入发动机号', trigger: 'blur'}],
                vehiclemodel: [{required: true, message: '请输入厂牌型号', trigger: 'blur'}],
                beneficiary: [{required: true, message: '请选择第一受益人', trigger: 'change'}],
            },
            form: {},
            //启动报单表单验证信息
            activeNames: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '10086'],
            addLoading: false,
            accept: '.jpg,.png',
            util: util,
            currentVehicleVin: '',
            insuranceId: '',
            vehlist: [],
            carColor: [],
            // corplist: [],
            token: getToken(),
            isEdit: false,
            insuranceCompany: [],   //保险公司
            sendBackVisible: false,
            sendBackRemark: '',
            insuranceAlertVisible: false,
            tableData: [{
                date: '20160502',
                name: '王小虎',
                address: '上海市普陀区金沙江路 1518 弄'
            }],
            // busiPictures: []
        };
    },
    watch: {
        $route () {
            this.init()
        }
    },
    methods: {
        /* 提交表单数据 */
        submitForm () {
            this.$confirm('确定保险出单？', '提示', {
                type: 'warning '
            }).then(() => {
                this.$refs.ruleForm.validate(async (valid) => {
                    if (valid) {
                        const params = Object.assign({taskid: this.$route.query.taskid}, this.ruleForm)
                        await addInsuranceIssue(params)
                        this.$message.success('出单成功!')
                        this.$router.push('/orderManage/declarationManage')
                    } else {
                        this.$message.warning('请完善信息')
                        return false;
                    }
                })
            })
        },
        getCustoHistoryInfo (defaultData, flowData) {
            _.forEach(defaultData.installDetails, item => {
                item.curonlinestatus = ''
                item.recvtime = ''
                item.curaddress = ''
            })

            this.ruleFormStatic.installDetails = defaultData.installDetails;

            _.forEach(this.ruleFormStatic.installDetails, item => {
                this.cldeviceIsOnstateItem(item)
            })

            if (!defaultData.installGroupInfo)
                this.ruleFormStatic.installGroupInfo = {}
            this.initViewer()
        },
        countPremium (vehicleprice) {
            let priceInsucorp = '0.00';
            if (!vehicleprice)
                return 0
            if (this.ruleForm.insurancecorpid) {
                const insucorpid = this.ruleForm.insurancecorpid
                const insucorp = _.find(this.insuranceCompany, {insucorpid})
                const subnoPrefix = insucorp.subnoPrefix;
                const yearNum = ((new Date(this.ruleForm.expiredate) - new Date(this.ruleForm.effectivedate)) / 1000 / 60 / 60 / 24 / 365).toFixed(1) //几年社保
                if (subnoPrefix.includes('RS')) {
                    if (yearNum > 2) {
                        if (vehicleprice >= 300000) {
                            priceInsucorp = (vehicleprice * 0.0002).toFixed(2)
                        } else {
                            priceInsucorp = '60.00'
                        }
                    } else {
                        if (vehicleprice >= 250000) {
                            priceInsucorp = (vehicleprice * 0.0002).toFixed(2)
                        } else {
                            priceInsucorp = '50.00'
                        }
                    }
                } else if (subnoPrefix.includes('RB')) {
                    if (vehicleprice >= 200000) {
                        priceInsucorp = vehicleprice * 0.0002 > 50 ? (vehicleprice * 0.0002).toFixed(2) : '50.00'
                    } else {
                        priceInsucorp = '50.00'
                    }
                }
            }
            return priceInsucorp
        },
        getAddress (lnglatXY, proname, callback) {
            var geocoder = new AMap.Geocoder({
                radius: 1000 //范围，默认：500
            });
            geocoder.getAddress(lnglatXY, (status, result) => {
                if (status === 'complete' && result.info === 'OK') {
                    //获得了有效的地址信息:
                    callback(result.regeocode.formattedAddress, 2);
                } else {
                    //获取地址失败
                }
            });
        },
        // 设备状态
        async cldeviceIsOnstateItem (item) {
            const para = {
                id: item.packInfo.E_PRODUNUM
            };
            const {data} = await cldeviceIsOnstate(para)
            switch (data.data.realdata && data.data.realdata.istate) {
                case 0:
                    item.curonlinestatus = "行驶";
                    break;
                case 1:
                    item.curonlinestatus = "离线";
                    break;
                case 2:
                    item.curonlinestatus = "停车";
                    break;
                case 3:
                    item.curonlinestatus = "报警";
                    break;
                case 4:
                    item.curonlinestatus = "无效定位";
                    break;
                default:
                    item.curonlinestatus = "未定位";
            }

            item.pass = data.data.realdata && data.data.realdata.signalqulity >= 3

            if (data.data.realdata) {
                item.recvtime = data.data.realdata.recvtime
                item.curaddress = '无定位';
                this.getAddress([data.data.realdata.lng, data.data.realdata.lat], para.id, (res) => {
                    item.curaddress = res
                })
            }
        },
        changeCorp (corpid) {
            this.form.corpid = corpid
        },
        async init () {
            if (!this.$route.query.id || !this.$route.query.taskid) {
                this.$message.error('没有找到该流程')
                this.$router.push('/orderManage/declarationManage')
                return
            }
            this.insuranceId = 69622
            try {
                let insurance = await getMoreInfo({id: this.insuranceId})
                this.currentVehicleVin = insurance.data.data.vehicleid
                const params = {
                    vehicleId: this.currentVehicleVin
                }
                const {data} = await get(params)
                this.getCustoHistoryInfo(data.data, insurance.data.data)
                this.getOrderById()
            } catch (e) {
            }
        },
        vehChange (r) {
            if (!r || this.vehlist.length > 0) return;
            this.vehLoading = true;
            const params = {
                page: 1,
                limit: 10000,
                isactive: 1
            }
            getVehList(params).then((res) => {
                this.vehlist = res.data.data;
                this.vehLoading = false;
            });
        },
        initViewer () {
            if (this.viewer)
                this.viewer.destroy()
            const el = this.$refs['rpShowimgDialog'].$el
            this.$nextTick(() => {
                this.viewer = new Viewer(el)
            });
        },
        insuranceCompanyList (show) { //每次请求以免新添加保险公司 刷新表单
            if (!show) return
            this.getInsurancePolicyno();
        },
        chooseInsCorp (insucorpid) {
            if (insucorpid) {
                const insucorp = _.find(this.insuranceCompany, {insucorpid})
                this.ruleForm.isPremiumBalance = insucorp.isPremiumBalance;
                this.ruleForm.premiumBalance = insucorp.premiumBalance;
                this.ruleForm.isPolicynoExpire = insucorp.isPolicynoExpire;
                this.ruleForm.policynoExpireTodday = insucorp.policynoExpireTodday;
                this.ruleForm.policyno = insucorp.policyno;
                this.ruleForm.insurancecorpname = insucorp.insucorpname;
                this.$refs.policyno.clearValidate();
                if (!insucorp.isPolicynoExpire || !insucorp.isPremiumBalance) {
                    this.insuranceAlertVisible = true
                }
            }
            this.ruleForm.indemnitylimit = this.form.price + '.00'
            this.$refs.indemnitylimit.clearValidate();
            this.ruleForm.priceInsucorp = this.countPremium(this.ruleForm.indemnitylimit)
        },
        effectivedateChange (val) {
            const dayjian = util.addReduceDate(new Date(val), -1);
            this.ruleForm.issuedate = new Date(dayjian).format('yyyy-MM-dd');//出单日期
            this.ruleForm.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期
            this.ruleForm.priceInsucorp = this.countPremium(this.ruleForm.indemnitylimit)
        },
        expiredateChange (val) {
            if (new Date(this.ruleForm.effectivedate) >= new Date(val)) {
                this.$message.warning('保险失效日期不能小于等于生效日期')
                const dayjian = util.addReduceDate(new Date(this.ruleForm.effectivedate), -1);
                this.ruleForm.expiredate = util.getDateThreeYers(dayjian, 3);
            }
            this.ruleForm.priceInsucorp = this.countPremium(this.ruleForm.indemnitylimit)
        },
        async getCorpList (parm, cb) {
            // if (!show) return
            let param = {
                page: 1,
                limit: 10000,
                corpcategory: 'BANK',
                corpname: parm
            }
            try {
                const {data} = await getParentInfoList(param)
                cb(data.data.records)
                // this.corplist = data.data.records;
            } catch (e) {

            }
        },
        issuedateChange (val) {
            const dayjian = util.addReduceDate(new Date(val), 0);
            this.ruleForm.effectivedate = new Date(util.addReduceDate(new Date(val), +1)).format('yyyy-MM-dd');//生效日期
            this.ruleForm.expiredate = util.getDateThreeYers(dayjian, 3);//失效日期
        },
        // 弃保
        giveUpInsurance () {
            this.$confirm('弃保后，想为车主出单，请通过新建保单操作。', '确定车主放弃购买保险？', {
                type: 'warning '
            }).then(async () => {
                let params = {
                    isdelete: '1',
                    id: this.form.id
                };
                await modifyInsuranceInfo(params);
                this.$message({
                    message: '弃保成功！',
                    type: 'success'
                });
                this.$router.push('/insuranceManage/insuranceBacklog')
            }).catch(() => {

            })
        },
        // 保存基本信息
        modifyInsuranceInfo () {
            this.$refs.form.validate(async (valid) => {
                if (valid) {
                    try {
                        const params = {
                            vehiclevin: this.form.vehiclevin.toLocaleUpperCase(),
                            id: this.form.id,
                            vehicleowner: this.form.vehicleowner,
                            vehicleplate: this.form.vehicleplate,
                            vehicleownercontact: this.form.vehicleownercontact,
                            vehicleowneridcard: this.form.vehicleowneridcard,
                            vehiclemodel: this.form.vehiclemodel,
                            vehiclecategory: this.form.vehiclecategory,
                            vehiclecolor: this.form.vehiclecolor,
                            vehicleprice: this.form.vehicleprice
                        };
                        await modifyInsuranceInfo(params)
                        this.isEdit = false
                        this.$refs.indemnitylimit.clearValidate();
                        this.init();
                        this.$message.success('保存保单信息成功!')
                    } catch (e) {

                    }
                }
            })
        },
        sendBack () {
            this.$message.success('退回成功!')
            this.$router.push('/insuranceManage/insuranceBacklog')
        },
        async getInsurancePolicyno () {
            const params = {
                page: 1,
                limit: 10000,
                isactive: 1
            }
            try {
                const {data} = await getInsurancePolicyno(params)
                this.insuranceCompany = data.data.records
            } catch (e) {

            }
        },
        // 车型——搜索下拉
        querySearchModel (queryString, cb) {
            let para = {
                    brand: queryString,
                    field: 'model',
                    limit: 30
                },
                modelArray = [];
            getAllInfoList(para).then((res) => {
                res.data.data.records.forEach(function (item, index) {
                    modelArray.push({
                        value: item
                    });
                });
                cb(modelArray);
            });
        },
        // 选择车型时，匹配颜色
        sendColorIdData (val) {
            let para = {
                model: val,
            }
            getAllColorList(para).then((res) => {
                let carModelList = [];
                res.data.data.forEach((res, index) => {
                    if (res.color) {
                        res.color.split(";").forEach((color, index) => {
                            carModelList.push({
                                color: color,
                                color_rgb: res.color_rgb.split(";")[index]
                            });
                        });
                    }
                });
                this.carColor = carModelList;
            });
        },
        checkNum (value, obj, property) {
            if (/^\d+$/.test(value)) {
                obj[property] = value + '.00'
            } else {
                obj[property] = value
            }
        },
        checkIndemnitylimit (value, obj, property) {
            this.ruleForm.priceInsucorp = 0
            if (value > this.form.vehicleprice) {
                return
            }
            if (/^\d+$/.test(value) || /(?!0\.00)(\d+\.\d{2}$)/.test(value)) {
                this.ruleForm.priceInsucorp = this.countPremium(value)
            }
            this.checkNum(value, obj, property);
        },
        async getOrderById () {
            const id = this.$route.query.id
            try {
                const {data} = await getOrderById({id})
                this.initForm(data.data.busiVehicleinfo)
                const arr = _.filter(data.data.busiPictures, item => item.pictype === "INSU")
                if (arr.length) {
                    this.initFormImageList(arr)
                }
            } catch (e) {
                console.log(e)
            }
        },
        initForm (flowData) {
            this.form = flowData
            // 保险信息赋值
            let dayjia = util.addReduceDate(new Date(), 1);
            this.ruleForm.declarationid = this.$route.query.id
            this.ruleForm.vehicleowneridcard = flowData.idcard; //身份证号码
            this.ruleForm.vehicleowner = flowData.ownername; //车主姓名
            this.ruleForm.vehicleownercontact = flowData.mobile; //车主电话
            this.ruleForm.vehiclemodel = flowData.model; //厂牌型号
            this.ruleForm.vehicleplate = flowData.licenseplatenum; //车牌号
            this.ruleForm.beneficiary = flowData.beneficiary; //第一受益人
            this.ruleForm.indemnitylimit = flowData.price + '.00'; //赔偿限额
            this.ruleForm.priceInsucorp = this.countPremium(flowData.price); //保费
            this.ruleForm.price = flowData.priceInsucorp + '.00'; //万网盗抢保障服务费
            this.ruleForm.insurancecorpid = flowData.insurancecorpid || '';
            this.ruleForm.policyno = flowData.policyno || ''; //保单编号
            this.ruleForm.effectivedate = util.formatDate.format(dayjia, 'yyyy-MM-dd');
            this.ruleForm.expiredate = util.getDateThreeYers(util.addReduceDate(new Date(dayjia), -1), 3);
        },
        initFormImageList (arr) {
            _.forEach(arr, item => {
                switch (+item.piccode) {
                    case 10:
                        this.ruleForm.picregistration = item.piclink
                        break;
                    case 11:
                        this.ruleForm.picvehiclelicense = item.piclink
                        break;
                    case 21:
                        this.ruleForm.picidcard = item.piclink
                        break;
                    case 22:
                        this.ruleForm.picinvoice = item.piclink
                        break;
                    case 23:
                        this.ruleForm.piccertificate = item.piclink
                        break;
                    case 24:
                        this.ruleForm.picimport = item.piclink
                        break;
                }
            })
        },
        uploadSuccessInvoice (res, file) {
            this.ruleForm.picinvoice = res.data
            this.initViewer()
        },
        uploadSuccessVehiclelicense (res, file) {
            this.ruleForm.picvehiclelicense = res.data
            this.initViewer()
        },
        uploadSuccessIdcard (res, file) {
            this.ruleForm.picidcard = res.data
            this.initViewer()
        },
        uploadRegistration (res, file) {
            this.ruleForm.picregistration = res.data
            this.initViewer()
        },
        uploadSuccessCertificate (res, file) {
            this.ruleForm.piccertificate = res.data
            this.initViewer()
        },
        uploadSuccessImport (res, file) {
            this.ruleForm.picimport = res.data
            this.initViewer()
        },
        removePic (item) {
            this.$confirm('确定删除图片？', '提示', {
                type: 'warning '
            }).then(() => {
                this.form[picName] = ''
                this.initViewer()
            }).catch(() => {

            })
        },
    },
    /*初始化页面数据*/
    mounted () {
        this.init();
        // this.getOrderById()
        this.insuranceCompanyList(true);
    }
}
