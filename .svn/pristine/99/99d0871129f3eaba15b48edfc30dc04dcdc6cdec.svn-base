import { getToken } from '@/utils/auth'
import { getStoPurchaseList } from '../purchaseContract/service'
import { commitPutIn, getPutIn, getPutInById } from './service'
import { mapActions } from 'vuex'

export default {
    name: "putInStorage",
    data () {
        return {
            filters: {
                domSearch: [{
                    select: ['oddNumbers'],
                    content: ''
                }], //查询框
            },
            putInList: [],
            loading: false,
            visible: false,
            isExcel: false,
            pagination: {
                limit: 15,
                total: 0,
                page: 1
            },
            putInForm: {
                inType: '',
                contractNo: '',
                filePath: ''
            },
            fileList: [],
            accept: '.xlsx, .excel',
            token: getToken(),
            inTypes: [{
                value: 'IN_PURCHASE',
                label: '采购入库'
            }, {
                value: 'IN_RETURN',
                label: '返厂入库'
            }],
            purchaseList: [],
            putInRules: {
                inType: [{required: true, message: '请选择入库类型', trigger: 'change'}],
                contractNo: [{required: true, message: '请选择采购合同', trigger: 'change'}],
                filePath: [{required: true, message: '请上传采购文件', trigger: 'blur'}]
            }
        }
    },
    props: ['windowOutHeight'],
    methods: {
        ...mapActions(['setPutInData']),
        search () {

        },
        resetForm () {
            this.filters = {
                domSearch: [{
                    select: ['oddNumbers'],
                    content: ''
                }]
            }
        },
        handleSizeChange (limit) {
            this.pagination.limit = limit
            this.getPutIn()
        },
        handleCurrentChange (page) {
            this.pagination.page = page
            this.getPutIn()
        },
        addSelect () {
            this.filters.domSearch.push({
                select: [],
                content: ''
            });
        },
        removeSelect (index) {
            this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
        },
        async getPutIn () {
            const params = {
                page: this.pagination.page,
                limit: this.pagination.limit
            }
            this.loading = true
            try {
                const {data} = await getPutIn(params)
                this.putInList = data.data.records
                this.pagination.total = data.data.total
                this.loading = false
            } catch (e) {
                this.loading = false
            }
        },
        // 选择入库方式
        addPutInStorage (command) {
            this.visible = true
            this.fileList = []
            this.isExcel = command
        },
        // 选择改变文件
        changeFile (file, fileList) {
            if (fileList.length > 1) {
                this.fileList = fileList.slice(1)
            } else {
                this.fileList = fileList
            }
        },
        removeFile () {

        },
        // 文件上传成功
        uploadSuccess (response, file, fileList) {
            if (response.code === 1) {
                this.$message.warning(response.msg)
                this.$refs.upload.clearFiles()
                return
            }
            this.$message.success('上传成功')
            this.$refs.putInFilePath.clearValidate();
            this.putInForm.filePath = response.data;
        },
        uploadError (err) {
            const data = JSON.parse(err.message)
            this.$message.error(data.message)
        },
        // 提交新增入库单
        submit () {
            this.$refs.putInForm.validate(async valid => {
                    if (valid) {
                        try {
                            let url = ''
                            let beanData = {
                                isExcel: this.isExcel
                            }
                            if (this.isExcel) {
                                url = 'sto/stoUpload/commitUploadFile'
                                beanData.attachurl = this.putInForm.filePath
                            } else {
                                url = 'sto/stoAction/createByManual'
                            }
                            const {data} = await commitPutIn(url, this.putInForm)
                            if (data.data) {
                                this.setPutInData(Object.assign(beanData, data.data))
                                this.$router.push({name: 'putInStorageInvoices'})
                            } else {
                                this.$message.error('读取文件失败，请重试')
                            }
                        } catch (e) {

                        }
                    }
                }
            )
        },
        // 手动上传文件
        submitUpload () {
            this.$refs.upload.submit();
        },
        // 获取采购合同
        async getStoPurchaseList () {
            try {
                const params = {
                    limit: 10000,
                    page: 1
                }
                const {data} = await getStoPurchaseList(params)
                this.purchaseList = data.data.records
            } catch (e) {

            }
        },
        download () {
            if (this.putInForm.inType) {
                window.location.href = `/sto/stoUpload/getExcelTemplate?inType=${this.putInForm.inType}`;
            } else {
                this.$refs.putInForm.validateField('inType')
            }
        },
        // 查看详情
        async viewDetails (storage) {
            try {
                const {data} = await getPutInById(storage.id)
                console.log(data)
                this.setPutInData(Object.assign({
                    isView: true
                }, data.data))
                this.$router.push({name: 'putInStorageInvoices'})
            } catch (e) {

            }
        },
        dateFormatter (row) {
            return new Date(row.purchasedate).format('yyyy-MM-dd')
        },
        typeFormatter (row) {
            const data = _.find(this.inTypes, {value: row.actiontype})

            return data.label || '未知'
        }
    },
    mounted () {
        this.getPutIn()
    }
}