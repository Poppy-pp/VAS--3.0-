import { mapState } from 'vuex'
import { addReturnFactory, facilityFormRules, getDeliveryCorps, getDeliveryaddress, getReceiptno } from './service'
import { getEmployeeInfoList } from "@/views/basicManage/employeeManage/service";
import { getSupplierList } from '../basicSetting/supplierList/service'
import { getChooseProductDetails, getChooseProductDetailsAdd, getProductInfoList, getPurchaseCascader } from "../equipmentAllocation/service";

export default {
    name: "invoice-detail",
    data () {
        return {
            facilityForm: null, // 返厂表单
            facilityFormRules: facilityFormRules, // 返厂表单规则
            employeeInfoLis: [],//经办人列表
            deliveryCorps: [],//物流公司
            supplierList: [],//供应商列表
            // linkman: '',//联系人
            // contactno: '',//联系方式
            deliveryaddress: [],//地址列表
            selectLoading: false,
            submitLoading: false,
            storageAreaVisible: false,
            // activeStorage: '',
            productInfoList: [],
            listLoading: false,
            pagination: {
                page: 1,
                limit: 15,
                total: 0
            },
            multipleSelection: [], //选中设备
            selectMap: {}, // 验证重复
            modelOptions: [],
            editable: false,
            chooseProdDetail: []
        }
    },
    computed: {
        ...mapState({
            user: state => {
                return state.user
            },
            storages: state => {
                return state.user.employeeinfo.storages
            },
        }),
        isView () {
            return Boolean(this.$route.query.id)
        },
        // 返厂数量总数
        productNum () {
            return _.chain(this.facilityForm.listUpload)
                .partition({modelcategory: 'A'})
                .map(item => {
                    return _.sumBy(item, itemBean => {
                        return +itemBean.qty || itemBean.list.length || 0
                    })
                })
                .sum()
                .value()
        }
    },
    methods: {
        async init () {
            this.facilityForm = Object.assign({}, {
                username: this.user.name,
                createbyname: this.user.name,
                userid: this.user.userid,
                actiondate: new Date().format('yyyy-MM-dd'),
                createDate: new Date().format('yyyy-MM-dd'),
                batchno: '',
                storageid: this.storages[0] && this.storages[0].id,
                storagename: this.storages[0] && this.storages[0].storagename,
                suppliername: '', //供应商
                supplierid: '', //供应商Id
                delivery: {
                    deliverytype: '1',
                    deliverycorp: ''
                },
                listUpload: []
            })

            if (this.$route.query.id) {
                const query = this.$route.query
                _.forEach(query.groupCounts, item => {
                    item.storagename = query.storagename
                })
                this.facilityForm.createDate = new Date(query.createdate).format('yyyy-MM-dd')
                this.facilityForm.batchno = query.batchno
                this.facilityForm.createbyname = query.createbyname
                this.facilityForm.storageid = query.storageid
                this.facilityForm.storagename = query.storagename
                this.facilityForm.suppliername = query.suppliername
                this.facilityForm.supplierid = query.supplierid
                this.facilityForm.delivery = query.delivery
                this.facilityForm.delivery.deliverycorp = query.delivery.deliverycorpname
                this.facilityForm.listUpload = query.groupCounts

                JsBarcode(this.$refs['invoice-bar-code'], query.batchno, {
                    height: 30,
                    fontSize: 12,
                });
            } else {
                try {
                    const {data} = await getReceiptno()
                    this.facilityForm.batchno = data.data
                    JsBarcode(this.$refs['invoice-bar-code'], data.data, {
                        height: 30,
                        fontSize: 12,
                    });
                } catch (e) {
                    console.log(e)
                }
            }


        },
        // 选择经办人
        changeUser (item) {
            if (!item.userid) {
                this.$message.warning('该用户userid为空!请重新选择')
                this.facilityForm.username = ''
                this.facilityForm.userid = ''
                return
            }
            this.facilityForm.username = item.employeename
            this.facilityForm.userid = item.userid
        },
        // 删除设备
        remove (index) {
            this.facilityForm.listUpload.splice(index, 1)
            this.initSelectMap()
        },
        // 提交数据
        submit () {
            this.$refs.facilityForm.validate(async valid => {
                if (valid) {
                    if (!this.facilityForm.listUpload.length) {
                        this.$message.warning('返厂设备列表不能为空')
                        return
                    }
                    this.submitLoading = true
                    try {
                        const params = _.cloneDeep(this.facilityForm)
                        params.listUpload = _.chain(this.facilityForm.listUpload)
                            .map(item => {
                                if (item.list) {
                                    return item.list
                                } else {
                                    return item
                                }
                            })
                            .flattenDepth(1)
                            .value()
                        await addReturnFactory(params)
                        this.submitLoading = false
                        this.$message.success('提交成功')
                        this.$router.push('/stockManage/returnFactory')
                    } catch (e) {
                        this.submitLoading = false
                    }
                    return
                }
                this.$message.warning('请检查表单完善信息')
            })
        },
        // 搜索员工
        remoteMethod (query) {
            let para = {
                page: this.currentPage,
                limit: this.pageSize,
                isactive: '1',
                domSearch: [{
                    select: ['employeename'],
                    content: query
                }],
            };
            this.selectLoading = true;
            getEmployeeInfoList(para).then(({data}) => {
                this.selectLoading = false
                this.employeeInfoLis = data.data.records
            })
        },
        // 经办人下拉
        userChange (r) {
            this.selectLoading = true;
            getEmployeeInfoList({limit: 1000, isactive: 1}).then((res) => {
                this.employeeInfoLis = res.data.data.records;
                this.selectLoading = false;
            });
        },
        // 获取物流公司列表
        async getDeliveryCorps () {
            try {
                const params = {
                    dictvalue: 'ExpressCompany',
                    limit: 1000,
                    page: 1
                }
                const {data} = await getDeliveryCorps(params)
                this.deliveryCorps = data.data.records
            } catch (e) {

            }
        },
        // 获取供应商列表
        async getSupplierList () {
            try {
                const params = {
                    limit: 1000,
                    page: 1
                }
                const {data} = await getSupplierList(params)
                this.supplierList = data.data.records
            } catch (e) {
                console.log(e)
            }
        },
        // 选择供应商显示联系人和地址
        changeSupplier (supplier) {
            if (supplier.addresslist.length) {
                this.deliveryaddress = supplier.addresslist
                this.changeAddress(supplier.addresslist[0])
            }
            this.facilityForm.supplierid = supplier.id
        },
        changeAddress (value) {
            this.facilityForm.delivery.toAddress = value.addressdetail
            this.facilityForm.delivery.toContactPerson = value.contactperson
            this.facilityForm.delivery.toContactNo = value.mobile
            this.facilityForm.delivery.toaddressid = value.id
        },
        // 获取地址列表
        // async getDeliveryAddress () {
        //     try {
        //         const params = {
        //             supplierid: this.facilityForm.supplierid
        //         }
        //         const {data} = await getDeliveryaddress(params)
        //         this.deliveryaddress = data.data.records
        //     } catch (e) {
        //         console.log(e)
        //     }
        // },
        // 添加设备
        addFacility () {
            this.storageAreaVisible = true
            this.pagination.page = 1
            // this.activeStorage = this.storages[0] && this.storages[0].id.toString()
            this.productInfoList = []
            this.getProductInfoList()
        },
        // 获取设备列表
        async getProductInfoList () {
            this.listLoading = true
            try {
                const params = {
                    storageid: this.facilityForm.storageid,
                    limit: this.pagination.limit,
                    page: this.pagination.page
                }
                const {data} = await getProductInfoList(params)
                this.productInfoList = data.data.records
                this.pagination.total = data.data.total
                this.listLoading = false
            } catch (e) {
                this.listLoading = false
                console.log(e)
            }
        },
        // 切换仓库
        // handleClick () {
        //     this.productInfoList = []
        //     this.pagination.page = 1
        //     this.getProductInfoList()
        // },
        handleSizeChange (size) {
            this.pagination.limit = size
            this.getProductInfoList()
        },
        handleCurrentChange (page) {
            this.pagination.page = page
            this.getProductInfoList()
        },
        // 选择设备
        handleSelectionChange (val) {
            this.multipleSelection = val
        },
        // 合并设备数量
        initSelectMap () {
            this.selectMap = {}
            _.forEach(this.facilityForm.listUpload, item => {
                _.forEach(item.list, itemBean => {
                    this.selectMap[itemBean.prodnum] = 1
                })
            })
        },
        confirmSelect () {
            let flag = false
            const arr = []
            this.initSelectMap()
            // 组装设备返厂信息列表，以设备型号分类
            const list = _.chain(this.multipleSelection)
                .map(item => {
                    return Object.assign(item, {
                        modelname: item.modelname || item.simmodelname,
                        modelspecname: item.modelspecname || item.simmodelspec,
                        prodnum: item.prodnum || item.simnum,
                        prodid: item.id
                    })
                })
                .groupBy(item => item.modelname)
                .map((value, key) => {
                    _.forEach(value, item => {
                        if (this.selectMap[item.prodnum]) {
                            flag = true
                            arr.push(item.prodnum)
                        }
                    })
                    return Object.assign({
                        // storageid: this.activeStorage,
                        list: value
                    }, value[0])
                })
                .value()

            if (flag) {
                this.$message.warning(`以下 ${arr.join(',')} 设备型号重复添加!`)
                return
            }
            _.forEach(list, item => {
                let flagBean = true
                _.forEach(this.facilityForm.listUpload, itemBean => {
                    if (item.storageid === itemBean.storageid && item.modelname === itemBean.modelname) {
                        itemBean.list = item.list.concat(itemBean.list)
                        flagBean = false
                    }
                })
                if (flagBean) {
                    this.facilityForm.listUpload.push(item)
                }
            })
            // this.facilityForm.listUpload = this.facilityForm.listUpload.concat(list)
            this.storageAreaVisible = false
        },
        // 删除设备详情中设备
        removeFacility (list, index, indexBean) {
            list.splice(index, 1)
            if (!list.length) {
                this.facilityForm.listUpload.splice(indexBean, 1)
            }
            this.initSelectMap()
        },
        // 添加配件
        addPart () {
            this.editable = true
            this.facilityForm.listUpload.push({
                modelcategory: "A",
                modelcategoryname: "配件",
                modelspecname: "",
                modelnameArr: [],
                storagename: this.facilityForm.storagename,
                storageid: this.facilityForm.storageid,
                prodid: '',
                qty: 1
            })
        },
        // 获取配件下拉信息
        async modelCascader (storageid) {
            if (!storageid) {
                this.$message.warning('请选择配件仓库!')
                this.modelOptions = []
                return
            }
            try {
                const {data} = await getPurchaseCascader({storageid})
                this.modelOptions = data.data;
            } catch (e) {
                console.log(e)
            }
        },
        // 确定添加配件
        confirm (item, index) {
            let flag = false
            _.forEach(this.facilityForm.listUpload, (itemBean, indexBean) => {
                if (item.modelcategory === 'A' && index !== indexBean && item.storageid === itemBean.storageid && item.modelname === itemBean.modelname) {
                    itemBean.qty = Number(itemBean.qty) + Number(item.qty)
                    flag = true
                }
            })
            this.editable = false
            if (flag)
                this.facilityForm.listUpload.splice(index, 1)
        },
        // 取消添加配件
        cancel (index) {
            this.editable = false
            this.facilityForm.listUpload.splice(index, 1)
        },
        // 选择仓库
        // changeStorage (storage, row) {
        //     row.storagename = storage.storagename
        //     row.storageid = storage.id
        // },
        // 选择调出仓库时
        chooseStorage (val) {
            this.facilityForm.storageid = val.id;
            this.facilityForm.storagename = val.storagename;
            this.facilityForm.listUpload = []
            this.editable = false
            this.initSelectMap()
        },
        // 选择配件类型
        changeModelName (val, row) {
            row.prodid = val[val.length - 1] || '';
            this.$nextTick(() => {
                row.modelname = this.$refs['cascader'].currentLabels[1];//传参-汉字
                row.modelnameSpan = this.$refs['cascader'].currentLabels.toString();//选择时显示
            })
        },
        modelspecFormatter (row) {
            if (!row.modelspecname) return '-'
            else return row.modelspecname
        },
        // 查看当前设备数量详情
        getDetails (row) {
            this.chooseProdDetail = [];//初始化
            if (this.isView) {
                let para = {
                    actionid: row.actionid,
                    modelcategory: row.modelcategory,
                    modelname: row.modelname,
                }
                getChooseProductDetails(para).then((res) => {
                    this.chooseProdDetail = res.data.data;
                })
            } else {
                this.chooseProdDetail = row.list
            }
        },
    },
    mounted () {
        this.init()
    }
}