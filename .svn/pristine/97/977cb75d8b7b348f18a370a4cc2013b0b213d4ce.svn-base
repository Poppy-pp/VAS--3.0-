import util from 'utils/tools';

import { getSIMInfoList, getSIMInfoDetails,setHandleOff,getSIMModelList, addSIMModel, addSIMInfo, modifySIMModel, removeSIMModel, modifySIMInfo, removeSIMInfo } from './service';

export default {
		name:'SIMInfo',
		props: ['windowOutHeight'],
		data() {
			return {
				fmtdata: util,
				filters: {
					domSearch: [{
						select: ['simnum'],
						content: ''
					}], //查询框
					timeScope: '',
				},
				pickerOptions: { //日期
				},
				resID: [], //绑卡后返回的设备id和卡id
				checkData: [], //选择绑定check
				deviceListData: [], //绑定
				deviceFormVisible: false,
				devicelistLoading: false,
				dtotal: 0,
				dcurrentPage: 1,
				dpageSize: 15,
				listData: [],
				comfirLoading: false,
				psData: [], //绑定设备SIM卡数据
				vehInfo: [], //卡绑定的设备所绑定的车辆
				SIMdata: [],
				Proddata:[],
				customers: [],
				simNamelist: [], //设备型号列表
				simNamelist2: [],
				simNameLoading: false, //设备型号
				stoNamelist: [], //库房名称列表
				stoNameLoading: false, //库房名称
				formDialogTableVisible: false,
				total: 0,
				currentPage: 1,
				pageSize: 15,
				showCount: '',
				listLoading: false,
				sels: [], //列表选中列
				checkoutDataT: true, //数据验证返回的布尔值true
				checkoutDataF: [], //数据验证组
				thisInput: '', //编辑时存入row验证的值
				addFormVisible: false, //新增界面是否显示
				addLoading: false,
				addFormRules: {

				},
				//新增界面数据
				addForm: {
					prodnum: '',
					prodsnnum: '',
					prodspec: '',
					prodcategory: '',
					prodmodelid: '',
					productmodelname: '',
					storageid: '',
					storagename: '',
					status: '',
					ispack: '',
					isold: '',
					expiredate: '',
					remark: '',
					isdelete: 0,
					suppliername: '',
				},
				// 类型设置
				typeFormVisible:false,//设备型号设置
				typeListData:[],//设备型号数据
				typeListLoading:false,
				typetotal:0,//设备类型分页
				typepageSize:15,
				typecurrentPage: 1,
				editable:false,//是否可编辑
				typeForm:{
					modelname:'',
					modelspec:'',
					suppliername:'',
					modelunit:'',
					isactive:'1'
				},
			}
		},
		methods: {
			// 打开卡类型弹窗，查询卡类型数据
			showType(){
				this.typeFormVisible = true;
				this.getSIMModel();
			},
			// 查询卡类型
			getSIMModel(){
				let para = {
					page: this.typecurrentPage,
					limit: this.typepageSize,
				};
				this.typeListLoading = true;
				getSIMModelList(para).then((res) => {
					this.typetotal = res.data.data.total;
					this.typeListData = res.data.data.records;
					this.typeListLoading = false;
				}).catch((error) => {
					this.typeListLoading = false;
				});
			},
			// 卡型号点击新增
			typeAddClick(){
				this.typeForm = {
					modelname:'',
					modelspec:'',
					suppliername:'',
					modelunit:'',
					isactive:'1'
				},//清空输入框，初始化
				this.typeListData.push(this.typeForm);
				this.editable = true;
			},
			// 确定新增
			typeAddConfirm(){
				this.typeListLoading = true;
				let para = Object.assign({}, this.typeForm);
				// para.isactive = para.isactive === true ? '1' : para.isactive === false ? '0' : '1';
				addSIMModel(para).then((res) => {
					this.typeListLoading = false;
					this.$message.success('新增成功！');
					this.getSIMModel();
					this.typeAddCancel();
					this.$refs['typeForm'].resetFields();//清空表单
				});
			},
			// 取消新增
			typeAddCancel(){
				this.editable = false;//取消编辑
				this.typeListData.splice(this.typeListData.length-1, 1); //从当前index位置开始，删除一项
			},
			// 卡类型停用和启用
			typeHandleChange(index,row){
				if (row.id === '' || row.id === undefined) return;//当新增时
				let para = {
					id:row.id,
					isactive : row.isactive,
				}
				modifySIMModel(para).then((res) => {
					this.typeListLoading = false;
					this.$message.success('修改成功！');
					this.getSIMModel();
					this.typeAddCancel();
				});
			},
			// 删除卡类型
			handleDel(index,row){
				this.$confirm(' 确认删除该条卡类型记录吗?', '提示', {
					type: 'warning'
				}).then(() => {
					let para = { id:row.id  }
					removeSIMModel(para).then((res) => {
						this.typeListLoading = false;
						this.$message.success('删除成功！');
						this.getSIMModel();
						this.typeAddCancel();
					});
				})
			},
			// 卡类型分页
			handleCurrentChangeType(val) {
				this.typecurrentPage = val;
				this.getSIMModel();
				this.typeAddCancel();
			},
			//切换每页显示数量
			handleSizeChangeType(val) {
				this.typepageSize = val;
				this.getSIMModel();
				this.typeAddCancel();
			},

			selsChange(sels, row) {
				this.sels = sels;
				this.checkData = row;
			},
			// 确认解绑
			cancel() {
				this.deviceFormVisible = false;
				if(this.vehInfo.length != 0) { //该卡绑定的设备已有绑定车辆
					this.$message({
						message: '该卡所绑定的设备已绑定车辆，无法解绑！',
						type: 'warning'
					});
				} else { //该卡绑定的设备未绑定车辆
					let para = {
						packID: this.psData.packID
					};
					// cancelUnbundleSIM(para).then((res) => {
					// 	if(res.data.data) {
					// 		this.$message({
					// 			message: '该卡解绑成功！',
					// 			type: 'success'
					// 		});
					// 		this.psData = '';
					// 		this.deviceFormVisible = false;
					// 	} else {
					// 		this.$message({
					// 			message: '解绑失败！只有在库状态才可以解绑！',
					// 			type: 'warning'
					// 		});
					// 	}
					// });
				}
			},
			// 确认绑卡
			comlist(checkData, event) {
				this.deviceFormVisible = false;
				this.$refs.deviceListData.clearSelection();

				let para = {
					simcardid: this.SIMdata.id,
					equipmentid: checkData.id,
					storageid: this.checkData.storageid,
				};
				this.comfirLoading = true;
				// addUnbundleSIM(para).then((res) => {
				// 	this.comfirLoading = false;
				// 	this.$message({
				// 		message: '该卡绑设备成功！',
				// 		type: 'success'
				// 	});
				// 	this.resID = res.data.data;

				// 	let paraTwo = {
				// 		prodID: this.resID.equipmentid,
				// 	};
				// 	getAllProSimInfoList(paraTwo).then((res) => {
				// 		this.psData = ''; //清空上条数据赋的值
				// 		this.psData = res.data.data.records[0];
				// 	});
				// });

			},
			//切换当前页
			dhandleCurrentChange(val) {
				this.dcurrentPage = val;
				this.getDeciceListInfo();
			},
			//切换每页显示数量
			dhandleSizeChange(val) {
				this.dpageSize = val;
				this.getDeciceListInfo();
			},
			// 查询设备信息
			addDeviceList() {
				this.clearAll(); //打开dialog清空查询框
				this.deviceFormVisible = true;
				this.filters = {
					isdelete: this.filters.isdelete,
					domSearch: this.filters.domSearch, //查询框
				};
				this.getDeciceListInfo();
			},
			//获取设备信息
			getDeciceListInfo() {
				// let para = {
				// 	currentPage: this.dcurrentPage,
				// 	showCount: this.dpageSize,
				// 	// 搜索设置部分
				// 	domSearch: this.filters.domSearch, //查询框
				// 	ispack: 0,
				// 	isdelete: 0,
				// 	storageid: this.SIMdata.storageid,
				// 	prodcategory: 'E',
				// 	status: 'INSTO'
				// };
				// this.devicelistLoading = true;
				// getSelectListSIM(para).then((res) => {
				// 	if(res.data.result.code == 4001) {
				// 		this.$message({
				// 			message: res.data.result.desc,
				// 			type: 'error'
				// 		});
				// 		this.devicelistLoading = false;
				// 		return;
				// 	}
				// 	this.dtotal = res.data.data.totalResult;
				// 	this.deviceListData = res.data.data.records;
				// 	this.devicelistLoading = false;
				// }).catch((error) => {
				// 	this.devicelistLoading = false;
				// });
			},

			//查询清空
			clearAll() {
				this.filters.domSearch = [{
					select: [],
					content: ''
				}] //清空查询框;
			},
			//详情查看
			formDetailHandle(simid, data) {
				this.formDialogTableVisible = true;
				let para = { id: simid, }
				getSIMInfoDetails(para).then((res) => {
					this.SIMdata = res.data.data.sim;
					this.Proddata = res.data.data.product;
					console.log(this.Proddata !== null)
				});
			},
			
			//状态显示转换
			statusFormat: function(row, col) {
				return row.status == 'ON' ? '开机' : row.status == 'OFF' ? '关机' : '--';
			},
			// 运营商
			operatorFormat: function(row, col) {
				return row.operator == 'CMCC' ? '中国移动' : row.operator == 'CTCC' ? '中国电信' : row.operator == 'CUCC' ? '中国联通' : '--';
			},
			//有效无效转换
			isdeleteFomat(row, col) {
				return row.isdelete == 1 ? '否' : row.isdelete != undefined ? '是' : '未知';
			},
			// 有效无效颜色切换
			tableRowClassName(row, index) {
				if(row.isdelete == 1) {
					return 'warning-row';
				}
				return '';
			},
			/*设备型号——下拉*/
			simNameChange(r) {
				if(!r || this.simNamelist.length > 0) return;
				this.simNameLoading = true;
				// getSIMNameList().then((res) => {
				// 	this.simNamelist = res.data.data.records;
				// 	this.simNameLoading = false;
				// });
			},
			/*库房名称——下拉*/
			stoNameChange(r) {
				if(!r || this.stoNamelist.length > 0) return;
				this.stoNameLoading = true;
				// getStoNameList().then((res) => {
				// 	this.stoNamelist = res.data.data.records;
				// 	this.stoNameLoading = false;
				// });
			},
			//新增—— 设备型号选中时自动获取设备分类
			getNameAdd() {
				for(var i = 0; i < this.simNamelist.length; i++) {
					if(this.simNamelist[i].id == this.addForm.productmodelname) {
						this.addForm.prodspec = this.simNamelist[i].prodspec;
						this.addForm.prodcategory = this.simNamelist[i].prodcategory;
					}
				}
			},
			//编辑—— 设备型号选中时自动获取设备分类
			getNameEdit() {
				for(var i = 0; i < this.simNamelist.length; i++) {
					if(this.simNamelist[i].id == this.editForm.productmodelname) {
						this.editForm.prodspec = this.simNamelist[i].prodspec;
						this.editForm.prodcategory = this.simNamelist[i].prodcategory;
					}
				}
			},
			//时间转换1
			dateFormatter: function(row, col) {
				if(row.expiredate == "" || row.expiredate == undefined) return;
				return util.formatDate.format(new Date(row.expiredate), 'yyyy-MM-dd');
			},
			//时间转换2
			dateFormatterSecond: function(row, col) {
				if(row.createdate == "" || row.createdate == undefined) return;
				return util.formatDate.format(new Date(row.createdate), 'yyyy-MM-dd');
			},
			//时间转换3
			dateFormatterThird: function(row, col) {
				if(row.updatedate == "" || row.updatedate == undefined) return;
				return util.formatDate.format(new Date(row.updatedate), 'yyyy-MM-dd');
			},
			//切换当前页
			handleCurrentChange(val) {
				this.currentPage = val;
				this.handleQuery();
			},
			//切换每页显示数量
			handleSizeChange(val) {
				this.pageSize = val;
				this.handleQuery();
			},
			// 添加查询条件
			addSelect() {
				this.filters.domSearch.push({
					select: [],
					content: ''
				});
			},
			// 移除查询条件
			removeSelect(index) {
				this.filters.domSearch.splice(index, 1); //从当前index位置开始，删除一项
			},
			//获取列表
			handleQuery() {
				let para = {
					page: this.currentPage,
					limit: this.pageSize,
					// 搜索设置部分
					domSearch: this.filters.domSearch,
					startTime: this.filters.timeScope ? (this.filters.timeScope[0] ? util.formatDate.format(new Date(this.filters.timeScope[0]), 'yyyy-MM-dd hh:mm:ss') : '') : '',
					endTime: this.filters.timeScope ? (this.filters.timeScope[1] ? util.formatDate.format(new Date(this.filters.timeScope[1]), 'yyyy-MM-dd hh:mm:ss') : '') : '',
				};
				this.listLoading = true;
				getSIMInfoList(para).then((res) => {
					this.total = res.data.data.total;
					this.listData = res.data.data.records;
					this.listLoading = false;
				}).catch((error) => {
					this.listLoading = false;
				});
			},
			//置为关机
			handleOff(index, row) {
				this.$confirm('您确定要将当前SIM卡置为'+' 【关机】 '+'状态吗？', '提示', {
					type: 'warning'
				}).then(() => {
					let para = {
						id: row.id,
						simcategory: row.simcategory
					};
					setHandleOff(para).then((res) => {
						this.$message.success('关机成功！');
						this.handleQuery();
					});
				}).catch(() => {

				});
			},
			//显示新增界面
			handleAdd() {
				this.addFormVisible = true;
				this.addForm = {
					prodnum: '',
					prodsnnum: '',
					prodspec: '',
					prodcategory: '',
					prodmodelid: '',
					productmodelname: '',
					storageid: '',
					storagename: '',
					status: '',
					ispack: '',
					isold: '',
					expiredate: '',
					remark: '',
					isdelete: 0,
				};
			},
			//新增
			addSubmit() {
				this.checkoutDataF.forEach((item, index) => {
					this.checkoutDataT = item && this.checkoutDataT;
				});
				this.$refs.addForm.validate((valid) => {
					if(valid) {
						this.addLoading = true;
						//NProgress.start();
						// let para = Object.assign({}, this.addForm);
						let para = {
							prodnum: this.addForm.prodnum,
							prodsnnum: this.addForm.prodsnnum,
							prodspec: this.addForm.prodspec,
							prodcategory: this.addForm.prodcategory,
							productmodelname: this.addForm.productmodelname,
							storagename: this.addForm.storagename,
							status: this.addForm.status,
							ispack: parseInt(this.addForm.ispack),
							isold: parseInt(this.addForm.isold),
							expiredate: this.addForm.expiredate,
							remark: this.addForm.remark,
							isdelete: parseInt(this.addForm.isdelete),
							prodmodelid: this.addForm.productmodelname,
							storageid: this.addForm.storagename,
							suppliername: this.addForm.suppliername,
						}
						if(this.checkoutDataT) { //验证通过时(无重复时)
							addSIMInfo(para).then((res) => {
								this.addLoading = false;
								//NProgress.done();
								this.$message({
									message: '新增成功',
									type: 'success'
								});
								this.$refs['addForm'].resetFields();
								this.addFormVisible = false;
								this.handleQuery();
							});
						} else {
							this.addLoading = false;
							this.$message({
								message: '标红信息已存在！',
								type: 'warning'
							});
						}

					}
				});
			},
			//批量删除
			batchRemove() {
				var ids = this.sels.map(item => item.id).toString();
				this.$confirm('确认删除选中记录吗？', '提示', {
					type: 'warning'
				}).then(() => {
					this.listLoading = true;
					let para = {
						ids: ids,
						method: "delete"
					};
					removeSIMInfo(para).then((res) => {
						this.listLoading = false;
						//NProgress.done();
						this.$message({
							message: '删除成功',
							type: 'success'
						});
						this.handleQuery();
					});
				}).catch(() => {

				});
			}
		},
		created() {
			this.handleQuery();
		}
	}